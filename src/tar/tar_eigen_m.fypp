! Module  : tar_eigen_m
! Purpose : traditional approximation of rotation (TAR) eigenvalue calculation
!
! Copyright 2016-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tar_eigen_m

   ! Uses

   use forum_m, only: RD

   use math_m

   use f95_lapack

   use ISO_FORTRAN_ENV

   #:if IEEE
      use IEEE_ARITHMETIC
   #:endif

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: RQ = SELECTED_REAL_KIND(32)

   ! Access specifiers

   public :: lambda

   ! Default access

   private

contains

   function lambda(q, m, k)

      real(RD), intent(in) :: q
      integer, intent(in)  :: m
      integer, intent(in)  :: k
      real(RD)             :: lambda

      ! Calculate the (m, k) Hough eigenvalue lambda

      lambda = lambda_matrix_(q, m, k, 'BISECT')

      ! Finish

      return

   end function lambda

   !****

   function lambda_matrix_(q, m, k, algo) result(lambda)

      real(RD), intent(in)     :: q
      integer, intent(in)      :: m
      integer, intent(in)      :: k
      character(*), intent(in) :: algo
      real(RD)                 :: lambda

      logical  :: parity
      integer  :: n
      real(RD) :: lambda_A
      real(RD) :: lambda_A_cmp

      ! Calculate the (m, k) Hough eigenvalue lambda, the using the
      ! matrix approach described in Townsend (1997, PhD Thesis,
      ! University of London) and references therein. The matrix
      ! dimension is determined dynamically

      ! Special-case handling of m=0, k=0

      if (m == 0 .AND. k == 0) then
         lambda = 0._RD
         return
      endif

      ! Initialize n to the smallest possible value

      parity = MOD(k, 2) == 0

      if (k >= 0) then

         if (parity) then
            n = k/2+1
         else
            n = (k+1)/2+1
         endif

         if (m*q < 0._RD) then
            n = n + Xi_(q, m, n, parity)
         endif

      else

         if (parity) then
            n = abs(k)/2
         else
            n = abs(k-1)/2
         endif

      endif

      ! Double n until a good A-matrix eigenvalue (by convention,
      ! non-zero) is found

      dble_loop : do

         lambda_A = lambda_A_(q, m, k, n, algo)

         if (lambda_A /= 0._RD) exit dble_loop

         n = 2*n

      end do dble_loop

      ! Continue to double n until convergence is achieved

      conv_loop : do

         lambda_A_cmp = lambda_A_(q, m, k, 2*n, algo)

         if (lambda_A_cmp /= 0._RD) then

            if (lambda_A == lambda_A_cmp) exit conv_loop

            lambda_A = lambda_A_cmp

         endif

         n = 2*n

      end do conv_loop

      ! Set up lambda

      lambda = 1._RD/lambda_A

      ! Finish

      return

   end function lambda_matrix_

   !****

   function lambda_A_(q, m, k, n, algo) result(lambda)

      real(RD), intent(in)     :: q
      integer, intent(in)      :: m
      integer, intent(in)      :: k
      integer, intent(in)      :: n
      character(*), intent(in) :: algo
      real(RD)                 :: lambda

      ! Calculate the index-k eigenvalue of the A-matrix with fixed
      ! dimension n, using the indicated algorithm

      select case (algo)
      case('LAPACK')
         lambda = lambda_A_lapack_(q, m, k, n)
      case ('BISECT')
         lambda = lambda_A_bisect_(q, m, k, n)
      case default
         @:ABORT('unrecognized algo')
      end select

      ! Finish

      return

   end function lambda_A_

   !****

   function lambda_A_lapack_(q, m, k, n) result(lambda)

      real(RD), intent(in) :: q
      integer, intent(in)  :: m
      integer, intent(in)  :: k
      integer, intent(in)  :: n
      real(RD)             :: lambda

      #:if IEEE
      logical  :: h_over
      logical  :: h_zero
      logical  :: h_inval
      #:endif
      logical  :: parity
      real(RD) :: A_1(n)
      real(RD) :: A_2n(n)
      real(RD) :: A_2d(n)
      real(RD) :: A_3n(n)
      real(RD) :: A_3d(n)
      real(RD) :: A_4n(n)
      real(RD) :: A_4d(n)
      real(RD) :: A_5(n)
      real(RD) :: A_D(n)
      real(RD) :: A_E(n)
      integer  :: i
      real(RD) :: W(n)
      integer  :: j
      integer  :: j_inf

      ! Calculate the index-k eigenvalue of the A-matrix with fixed
      ! dimension n, using LAPACK routines at working-precision

      #:if IEEE
      call save_ieee_state_(h_over, h_zero, h_inval)
      #:endif

      ! Determine the (negative-to-positive) index of the eigenvalue to
      ! calculate

      parity = MOD(k, 2) == 0

      if (k >= 0) then
         if (parity) then
            i = n - k/2
         else
            i = n - (k-1)/2
         endif
      else
         if (parity) then
            i = abs(k)/2
         else
            i = abs(k-1)/2
         endif
      endif

      i = MODULO(i-Xi_(q, m, n, parity)-1, n) + 1

      ! Assemble the A-matrix

      call assemble_A_r_(q, m, n, parity, A_1, A_2n, A_2d, A_3n, A_3d, A_4n, A_4d, A_5, &
         A_D, A_E)

      A_E(n) = 0._RD

      ! Calculate the eigenvalue, taking special care to handle cases
      ! where elements of A are infinite

      if (A_5(1) == 0._RD) then

         ! A(1,1) infinite, causing a +inf eigenvalue

         if (n > 1 .AND. i < n) then

            call LA_STEVR(A_D(2:), A_E(2:), W(:n-1), IL=i, IU=i)
            lambda = W(1)

         else

            #:if IEEE
               lambda = IEEE_VALUE(0._RD, IEEE_POSITIVE_INF)
            #:else
               lambda = HUGE(0._RD)
            #:endif

         endif

      elseif (A_2d(1) == 0._RD .AND. A_2n(1) /= 0._RD) then

         ! A(1,1) infinite, causing a -inf eigenvalue

         if (n > 1 .AND. i > 1) then

            call LA_STEVR(A_D(2:), A_E(2:), W(2:), IL=i-1, IU=i-1)
            lambda = W(2)

         else

            #:if IEEE
            lambda = IEEE_VALUE(0._RD, IEEE_NEGATIVE_INF)
            #:else
            lambda = -HUGE(0._RD)
            #:endif

         endif

      elseif (A_3d(n) == 0._RD .AND. A_3n(n) /= 0._RD) then

         ! A(n,n) infinite, causing a -inf eigenvalue

         if (n > 1 .AND. i > 1) then

            call LA_STEVR(A_D(:n-1), A_E(:n-1), W(2:), IL=i-1, IU=i-1)
            lambda = W(2)

         else

            #:if IEEE
            lambda = IEEE_VALUE(0._RD, IEEE_NEGATIVE_INF)
            #:else
            lambda = -HUGE(0._RD)
            #:endif

         endif

      else

         ! Scan for a 2x2 block of infinite components (arising from a
         ! pure Rossby mode being part of the spectrum)

         j_inf = 0

         scan_loop : do j = 1, n-1
            if (A_3d(j) == 0._RD .AND. A_3n(j) /= 0._RD) then
               j_inf = j
               exit scan_loop
            endif
         end do scan_loop

         if (j_inf /= 0) then

            print *,q,m,k,j_inf

            @:ABORT('pure Rossby mode encountered')

         else

            call LA_STEVR(A_D, A_E, W, IL=i, IU=i)
            lambda = W(1)

         endif

      endif

      #:if IEEE
      call restore_ieee_state_(h_over, h_zero, h_inval)
      #:endif

      ! Finish

      return

   end function lambda_A_lapack_

   !****

   function lambda_A_bisect_(q, m, k, n) result(lambda)

      real(RD), intent(in)  :: q
      integer, intent(in)   :: m
      integer, intent(in)   :: k
      integer, intent(in)   :: n
      real(RD)              :: lambda

      real(RD), parameter :: Q_TRANS = 1E4_RD

      #:if IEEE
      logical  :: h_over
      logical  :: h_zero
      logical  :: h_inval
      #:endif
      real(RD) :: lambda_est
      logical  :: parity
      real(RQ) :: A_1(n)
      real(RQ) :: A_2n(n)
      real(RQ) :: A_2d(n)
      real(RQ) :: A_3n(n)
      real(RQ) :: A_3d(n)
      real(RQ) :: A_4n(n)
      real(RQ) :: A_4d(n)
      real(RQ) :: A_5(n)
      real(RQ) :: A_D(n)
      real(RQ) :: A_E(n)

      ! Calculate the index-k eigenvalue of the A-matrix with fixed
      ! dimension n, using bisection routines at quad-precision

      #:if IEEE
      call save_ieee_state_(h_over, h_zero, h_inval)
      #:endif

      ! Get an initial estimate for the eigenvalue; use the LAPACK
      ! routine for |q| < Q_TRANS, and the asymptotic value plus an
      ! extrapolated error correction otherwise

      if (abs(q) < Q_TRANS) then
         lambda_est = lambda_A_lapack_(q, m, k, n)
      else
         lambda_est = 1._RD/(lambda_asymp_(q, m, k) + &
            (1._RD/lambda_A_lapack_(SIGN(Q_TRANS, q), m, k, n) - lambda_asymp_(SIGN(Q_TRANS, q), m, k))/q**2)
      endif

      ! Check to see if lambda_est is +/- HUGE, indicating a Rossby mode

      if (lambda_est == HUGE(0._RD) .OR. lambda_est == -HUGE(0._RD)) then
         lambda = lambda_est
         return
      end if

      ! Assemble the A-matrix

      parity = MOD(k, 2) == 0

      call assemble_A_q_(q, m, n, parity, A_1, A_2n, A_2d, A_3n, A_3d, A_4n, A_4d, A_5, &
         A_D, A_E)

      ! Calculate the eigenvalue, taking special care to handle cases
      ! where elements of A are infinite

      if (A_5(1) == 0._RQ) then

         ! A(1,1) infinite, causing a +inf eigenvalue

         lambda = bisect_lambda_(A_D(2:), A_E(2:), lambda_est)

      elseif (A_2d(1) == 0._RQ .AND. A_2n(1) /= 0._RQ) then

         ! A(1,1) infinite, causing a -inf eigenvalue

         lambda = bisect_lambda_(A_D(2:), A_E(2:), lambda_est)

      elseif (A_3d(n) == 0._RD .AND. A_3n(n) /= 0._RD) then

         ! A(n,n) infinite, causing a -inf eigenvalue

         lambda = bisect_lambda_(A_D(:n-1), A_E(:n-1), lambda_est)

      else

         lambda = bisect_lambda_(A_D, A_E, lambda_est)

      endif

      ! Finish

      return

   contains

      function bisect_lambda_(A_D, A_E, lambda_est) result(lambda)

         real(RQ), intent(in) :: A_D(:)
         real(RQ), intent(in) :: A_E(:)
         real(RD), intent(in) :: lambda_est
         real(RD)             :: lambda

         real(RQ) :: lambda_a
         real(RQ) :: lambda_b
         real(RQ) :: lambda_m
         real(RQ) :: dlambda
         integer  :: P_a
         integer  :: P_b
         integer  :: P_m

         @:CHECK_BOUNDS(SIZE(A_E), SIZE(A_D))

         ! Set up a bracket around the estimated eigenvalue lambda_est

         if (lambda_est > 0._RD) then
            lambda_a = lambda_est*(1._RD - sqrt(EPSILON(0._RD)))
            lambda_b = lambda_est*(1._RD + sqrt(EPSILON(0._RD)))
         else
            lambda_a = lambda_est*(1._RD + sqrt(EPSILON(0._RD)))
            lambda_b = lambda_est*(1._RD - sqrt(EPSILON(0._RD)))
         endif

         expand_loop : do

            P_a = bisect_P_(A_D, A_E, lambda_a)
            P_b = bisect_P_(A_D, A_E, lambda_b)

            if (P_b == P_a+1) then

               ! Single eigenvalue found

               exit expand_loop

            elseif (P_b > P_a+1) then

               ! Multiple eigenvalues found --- return a bogus value
               ! (which has the ultimate effect that we'll try again at
               ! larger n)

               lambda = 0._RD
               return

            endif

            ! Expand the bracket

            lambda_m = 0.5_RQ*(lambda_a + lambda_b)
            dlambda = lambda_b - lambda_a

            lambda_a = lambda_a - 0.5_RD*dlambda
            lambda_b = lambda_b + 0.5_RD*dlambda

         end do expand_loop

         ! Now apply the bisection algorithm

         bisect_loop : do

            ! Check for convergence

            if (REAL(lambda_a, RD) == REAL(lambda_b, RD)) then
               lambda = REAL(lambda_a, RD)
               exit bisect_loop
            endif

            ! Set up the midpoint

            lambda_m = 0.5_RQ*(lambda_a + lambda_b)

            ! Calculate P at the midpoint

            P_m = bisect_P_(A_D, A_E, lambda_m)

            ! Update the bracket

            if (P_m == P_a) then
               lambda_a = lambda_m
            elseif (P_m == P_b) then
               lambda_b = lambda_m
            else
               print *,P_a, P_b, P_m
               @:ABORT('P_m not equal to P_a or P_b')
            endif

         end do bisect_loop

         ! Finish

         return

      end function bisect_lambda_

      !****

      function bisect_P_(A_D, A_E, lambda) result(P)

         real(RQ), intent(in) :: A_D(:)
         real(RQ), intent(in) :: A_E(:)
         real(RQ), intent(in) :: lambda
         integer              :: P

         real(RQ), parameter :: RELFEH = EPSILON(0._RQ)

         real(RQ) :: q(SIZE(A_D))
         integer  :: i

         @:CHECK_BOUNDS(SIZE(A_E), SIZE(A_D))

         @:ASSERT(SIZE(A_D) > 0, 'empty matrix')

         ! Calculate the number P of eigenvalues of A which are less than
         ! lambda, using the algorithm in Barth, Martin & Wilkinson
         ! (1967)

         q(1) = A_D(1) - lambda

         do i = 2, SIZE(A_D)
            if (q(i-1) /= 0._RQ) then
               q(i) = (A_D(i) - lambda) - A_E(i-1)**2/q(i-1)
            else
               q(i) = (A_D(i) - lambda) - abs(A_E(i-1))/RELFEH
            endif
         end do

         P = COUNT(q < 0._RQ)

         ! Finish

         return

      end function bisect_P_

   end function lambda_A_bisect_

   !****

   function lambda_asymp_(q, m, k) result(lambda)

      real(RD), intent(in) :: q
      integer, intent(in)  :: m
      integer, intent(in)  :: k
      real(RD)             :: lambda

      integer  :: s

      ! Calculate the (m, k) Hough eigenvalue lambda, using asymptotic expansions

      if (m*q >= 0._RD) then

         ! Prograde modes

         if (k >= 0) then

            s = k - 1

            if (s >= 0) then
               lambda = lambda_asymp_grav_(q, m, s)
            else
               lambda = lambda_asymp_kelv_(q, m)
            endif

         else

            @:ABORT('invalid k for prograde modes')

         endif

      else

         ! Retrograde modes

         if (k >= -1) then

            s = k + 1

            lambda = lambda_asymp_grav_(q, m, s)

         else

            s = - k - 1

            lambda = lambda_asymp_ross_(q, m, s)

         endif

      end if

   contains

      function lambda_asymp_grav_(q, m, s) result(lambda)

         real(RD), intent(in) :: q
         integer, intent(in)  :: m
         integer, intent(in)  :: s
         real(RD)             :: lambda

         real(RQ) :: w
         real(RQ) :: I2
         real(RQ) :: I4
         real(RQ) :: alpha_0
         real(RQ) :: alpha_1
         real(RQ) :: alpha_2
         real(RQ) :: alpha_3
         real(RQ) :: alpha

         ! Calculate the (m, s) gravity-wave Hough eigenvalue lambda,
         ! using the third-order perturbation expansion by Townsend (in
         ! prep)

         w = 1._RQ/REAL(q, RQ)

         I2 = 0.5_RQ*(2*s+1)
         I4 = 0.75_RQ*(2*s*(s+1) + 1)

         alpha_0 = 2*s + 1
         alpha_1 = m/alpha_0
         alpha_2 = m**2/alpha_0 - m*alpha_1/alpha_0**2 + 2/alpha_0*(I4 - alpha_0*I2) + I2 - I4/alpha_0
         alpha_3 = m*(alpha_1**2 - alpha_0*alpha_2)/alpha_0**3 - m**2*alpha_1/alpha_0**2 - &
            2*alpha_1/alpha_0**2*(I4 - alpha_0*I2) -  m/alpha_0**2*I2 + alpha_1/alpha_0**2*I4

         alpha = alpha_0 + alpha_1*w + alpha_2*w**2 + alpha_3*w**3

         lambda = REAL(alpha**2/w**2, RD)

         ! Finish

         return

      end function lambda_asymp_grav_

      function lambda_asymp_kelv_(q, m) result(lambda)

         real(RD), intent(in) :: q
         integer, intent(in)  :: m
         real(RD)             :: lambda

         real(RQ) :: w
         real(RQ) :: alpha_0
         real(RQ) :: alpha_1
         real(RQ) :: alpha

         ! Calculate the (m) Kelvin-wave Hough eigenvalue lambda, using
         ! the first-order perturbation expansion by Townsend (in prep)

         w = 1._RQ/REAL(q, RQ)

         alpha_0 = abs(m)
         alpha_1 = -0.25_RQ

         alpha = alpha_0 + alpha_1*w

         lambda = REAL(alpha**2, RD)

         ! Finish

         return

      end function lambda_asymp_kelv_

      function lambda_asymp_ross_(q, m, s) result(lambda)

         real(RD), intent(in) :: q
         integer, intent(in)  :: m
         integer, intent(in)  :: s
         real(RD)             :: lambda

         real(RQ) :: w
         real(RQ) :: alpha_0
         real(RQ) :: alpha_1
         real(RQ) :: alpha

         ! Calculate the (m, s) Rossby-wave Hough eigenvalue lambda,
         ! using the first-order perturbation expansion by Townsend (in
         ! prep)

         w = 1._RQ/REAL(q, RQ)

         alpha_0 = REAL(m, RQ)/(2*s+1)
         alpha_1 = REAL(-1 - 4*(1+m**2)*s*(s+1), RQ)/(2*s+1)**3

         alpha = alpha_0 + alpha_1*w

         lambda = REAL(alpha**2, RD)

         ! Finish

         return

      end function lambda_asymp_ross_

   end function lambda_asymp_

   !****

   #:for T, S in zip(REAL_TYPES+['real(RQ)',], REAL_SUFFIXES+['q',])

      subroutine assemble_A_${S}$_(q, m, n, parity, A_1, A_2n, A_2d, A_3n, A_3d, A_4n, A_4d, A_5, A_D, A_E)

         real(RD), intent(in) :: q
         integer, intent(in)  :: m
         integer, intent(in)  :: n
         logical, intent(in)  :: parity
         ${T}$, intent(out)   :: A_1(:)
         ${T}$, intent(out)   :: A_2n(:)
         ${T}$, intent(out)   :: A_2d(:)
         ${T}$, intent(out)   :: A_3n(:)
         ${T}$, intent(out)   :: A_3d(:)
         ${T}$, intent(out)   :: A_4n(:)
         ${T}$, intent(out)   :: A_4d(:)
         ${T}$, intent(out)   :: A_5(:)
         ${T}$, intent(out)   :: A_D(:)
         ${T}$, intent(out)   :: A_E(:)

         ${T}$   :: q_
         integer :: j
         integer :: l_j
         ${T}$   :: A_2
         ${T}$   :: A_3
         ${T}$   :: A_4

         @:CHECK_BOUNDS(SIZE(A_1), n)
         @:CHECK_BOUNDS(SIZE(A_2n), n)
         @:CHECK_BOUNDS(SIZE(A_2d), n)
         @:CHECK_BOUNDS(SIZE(A_3n), n)
         @:CHECK_BOUNDS(SIZE(A_3d), n)
         @:CHECK_BOUNDS(SIZE(A_4n), n)
         @:CHECK_BOUNDS(SIZE(A_4d), n)
         @:CHECK_BOUNDS(SIZE(A_5), n)

         @:CHECK_BOUNDS(SIZE(A_D), n)
         @:CHECK_BOUNDS(SIZE(A_E), n)

         ! Evaluate constituent parts of the A matrix. These are defined so
         ! that:
         !
         ! A_D(j) = A(j,j) = A_D(j) = [A_1(j) + A_2n(j)/A_2d(j) + A_3n(j)/A_3d(j)] / A_5(j)
         ! A_E(j) = A(j+1,j) = A(j, j+1) = A_4n(j)/A_4d(j)
         !
         ! A_E(n) is unused

         q_ = REAL(q, KIND(${T}$))

         if (parity) then
            l_j = abs(m)
         else
            l_j = abs(m) + 1
         endif

         do j = 1, n

            if (l_j == abs(m)) then
               A_1(j) = 1 + SIGN(1, m)*q_/(l_j+1)
               A_2n(j) = 0
            else
               A_1(j) = 1 + m*q_/(l_j*(l_j+1))
               A_2n(j) = -q_**2*(l_j-1)**2*(l_j+1)*J_lm_${S}$_(l_j, m)**2/l_j
            endif

            A_2d(j) = (l_j-1)*l_j + m*q_

            A_3n(j) = -q_**2*l_j*(l_j+2)**2*J_lm_${S}$_(l_j+1, m)**2/(l_j+1)
            A_3d(j) = (l_j+1)*(l_j+2) + m*q_

            A_4n(j) = -q_**2*J_lm_${S}$_(l_j+1, m)*J_lm_${S}$_(l_j+2, m)
            A_4d(j) = A_3d(j)

            A_5(j) = l_j*(l_j+1)

            l_j = l_j + 2

         end do

         ! Now assemble the matrix

         do j = 1, n-1

            if (A_2n(j) /= 0) then
               A_2 = A_2n(j)/A_2d(j)
            else
               A_2 = 0
            endif

            if (A_3n(j) /= 0) then
               A_3 = A_3n(j)/A_3d(j)
            else
               A_3 = 0
            endif

            if (A_4n(j) /= 0) then
               A_4 = A_4n(j)/A_4d(j)
            else
               A_4 = 0
            endif

            if (A_5(j) /= 0) then
               A_D(j) = (A_1(j) + A_2 + A_3)/A_5(j)
            endif
            A_E(j) = A_4

         end do

         if (A_2n(n) /= 0) then
            A_2 = A_2n(n)/A_2d(n)
         else
            A_2 = 0
         endif

         if (A_3n(n) /= 0 .AND. parity) then
            A_3 = A_3n(n)/A_3d(n)
         else
            A_3 = 0
         endif

         if (A_5(n) /= 0) then
            A_D(n) = (A_1(n) + A_2 + A_3)/A_5(n)
         endif

         ! Finish

         return

      end subroutine assemble_A_${S}$_

      !****

      function J_lm_${S}$_(l, m) result(J_lm)

         integer, intent(in) :: l
         integer, intent(in) :: m
         ${T}$               :: J_lm

         ! Calculate the J_lm function, being the integral of Y_lm Y_{l+1}m
         ! cos(theta) over all solid angles

         if (abs(m) >= l) then

            J_lm = 0

         else

            J_lm = sqrt(REAL((l-m)*(l+m), KIND(J_lm))/REAL((2*l-1)*(2*l+1), KIND=KIND(J_lm)))

         endif

         ! Finish

         return

      end function J_lm_${S}$_

   #:endfor

   !****

   function Xi_(q, m, n, parity)

      real(RD), intent(in) :: q
      integer, intent(in)  :: m
      integer, intent(in)  :: n
      logical, intent(in)  :: parity
      integer              :: Xi_

      integer :: l_j
      integer :: j

      ! Calculate the permutation constant Xi (see Townsend 1997)

      Xi_ = 0

      if (-m*q > 0._RD) then

         if (parity) then
            l_j = abs(m)
         else
            l_j = abs(m) + 1
         endif

         j_loop : do j = 1,n
            if (-m*q > REAL(l_j+1, RD)*REAL(l_j+2, RD)) Xi_ = Xi_ + 1
            l_j = l_j + 2
         enddo j_loop

         if (.NOT. parity .AND. -m*q > REAL(abs(m), RD)*REAL(abs(m)+1, RD)) Xi_ = Xi_ + 1

      endif

      ! Finish

      return

   end function Xi_

   !****

   #:if IEEE

      subroutine save_ieee_state_(h_over, h_zero, h_inval)

         logical, intent(out) :: h_over
         logical, intent(out) :: h_zero
         logical, intent(out) :: h_inval

         ! Save the IEEE state, and then turn off exceptions

         call IEEE_GET_HALTING_MODE(IEEE_OVERFLOW, h_over)
         call IEEE_GET_HALTING_MODE(IEEE_DIVIDE_BY_ZERO, h_zero)
         call IEEE_GET_HALTING_MODE(IEEE_INVALID, h_inval)

         call IEEE_SET_HALTING_MODE(IEEE_OVERFLOW, .FALSE.)
         call IEEE_SET_HALTING_MODE(IEEE_DIVIDE_BY_ZERO, .FALSE.)
         call IEEE_SET_HALTING_MODE(IEEE_INVALID, .FALSE.)

         ! Finish

         return

      end subroutine save_ieee_state_

      !****

      subroutine restore_ieee_state_(h_over, h_zero, h_inval)

         logical, intent(in) :: h_over
         logical, intent(in) :: h_zero
         logical, intent(in) :: h_inval

         ! Restore the IEEE state

         call IEEE_SET_HALTING_MODE(IEEE_OVERFLOW, h_over)
         call IEEE_SET_HALTING_MODE(IEEE_DIVIDE_BY_ZERO, h_zero)
         call IEEE_SET_HALTING_MODE(IEEE_INVALID, h_inval)

         ! Finish

         return

      end subroutine restore_ieee_state_

   #:endif

end module tar_eigen_m
