! Module  : tnad_diff_m
! Purpose : nonadiabatic (+turbulent convection) difference equations
!
! Copyright 2021 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tnad_diff_m

   ! Uses

   use forum_m, only: RD

   use context_m
   use diff_m
   use diff_factory_m
   use trapz_diff_m
   use ext_m
   use math_m
   use mode_par_m
   use model_m
   use tnad_eqns_m
   use nad_match_m
   use num_par_m
   use osc_par_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(diff_ct) :: tnad_diff_t
      private
      type(context_t), pointer    :: cx => null()
      class(diff_ct), allocatable :: df
      type(tnad_eqns_t)           :: eq
      real(RD)                    :: Omega_rot
      real(RD)                    :: dx
   contains
      private
      procedure, public :: build
   end type tnad_diff_t

   ! Interfaces

   interface tnad_diff_t
      module procedure tnad_diff_t_
   end interface tnad_diff_t

   ! Access specifiers

   public :: tnad_diff_t

   ! Default access

   private

contains

   function tnad_diff_t_(cx, pt_a, pt_b, md_p, nm_p, os_p) result(df)

      type(context_t), pointer, intent(in) :: cx
      type(point_t), intent(in)            :: pt_a
      type(point_t), intent(in)            :: pt_b
      type(mode_par_t), intent(in)         :: md_p
      type(num_par_t), intent(in)          :: nm_p
      type(osc_par_t), intent(in)          :: os_p
      type(tnad_diff_t)                    :: df

      type(tnad_eqns_t)       :: eq
      type(point_t)           :: pt_m
      class(model_t), pointer :: ml

      ! Construct the tnad_diff_t

      df%cx => cx

      if (pt_a%s == pt_b%s) then

         ! Regular subinterval; use difference equations

         eq = tnad_eqns_t(cx, md_p, os_p)

         select case (nm_p%diff_scheme)
         case ('TRAPZ')
            allocate(df%df, SOURCE=trapz_diff_ct(eq, pt_a, pt_b, [0.5_RD,0.5_RD,0.5_RD,0.5_RD,0._RD,1._RD]))
         case default
            allocate(df%df, SOURCE=diff_ct(eq, pt_a, pt_b, nm_p))
         end select

         ! Set up midpoint eqns_t (used for regularization of Magnus
         ! schemes)

         df%dx = pt_b%x - pt_a%x

         pt_m%s = pt_a%s
         pt_m%x = pt_a%x + 0.5_RD*df%dx

         df%eq = eq

         call df%eq%stencil([pt_m])

         ! Set up midpoint Omega_rot (used for regularization of colloc
         ! schemes)

         df%Omega_rot = cx%Omega_rot(pt_m)

      else

         ! Segment boundary; use match conditions

         allocate(df%df, SOURCE=nad_match_t(cx, pt_a, pt_b, md_p, os_p))

      endif

      df%n_e = df%df%n_e

      ! Finish

      return

   end function tnad_diff_t_

   !****

   subroutine build(this, st, E_l, E_r, scl)

      use magnus_diff_m
      use colloc_diff_m

      class(tnad_diff_t), intent(in) :: this
      class(state_ct), intent(in)    :: st
      complex(RD), intent(out)       :: E_l(:,:)
      complex(RD), intent(out)       :: E_r(:,:)
      type(ext_ct), intent(out)      :: scl

      logical, parameter :: MAGNUS_EIGVAL_MASK(3) = [.FALSE.,.FALSE.,.TRUE.]

      complex(RD) :: A(this%n_e,this%n_e)
      complex(RD) :: lambda(3)
      complex(RD) :: omega_c

      @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
      @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
      @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

      ! Build the difference equations

      call this%df%build(st, E_l, E_r, scl)

      ! Apply regularization corrections

      select type (df => this%df)

      class is (magnus_diff_ct)

         ! Rescale by the uncoupled eigenvalues, in order to help the root
         ! finder

         A = this%eq%A(1, st)

         lambda(1) = sqrt(A(2,1)*A(1,2))
         lambda(2) = sqrt(A(4,3)*A(3,4))
         lambda(3) = sqrt(A(6,5)*A(5,6))

         scl = scl*exp(ext_ct(-SUM(lambda, MASK=MAGNUS_EIGVAL_MASK)*this%dx))

      class is (colloc_diff_ct)

         omega_c = this%cx%omega_c(this%Omega_rot, st)

         scl = scl/sqrt(omega_c)

      end select

      ! Finish

      return

   end subroutine build

end module tnad_diff_m
