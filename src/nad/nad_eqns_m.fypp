! Module  : nad_eqns_m
! Purpose : nonadiabatic differential equations
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module nad_eqns_m

   ! Uses

   use forum_m, only: RD

   use context_m
   use eqns_m
   use linalg_m
   use math_m
   use model_m
   use mode_par_m
   use model_util_m
   use nad_trans_m
   use osc_par_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: P1_CONV_SCHEME = 1
   integer, parameter :: P4_CONV_SCHEME = 4

   integer, parameter :: J_V = 1
   integer, parameter :: J_As = 2
   integer, parameter :: J_U = 3
   integer, parameter :: J_C_1 = 4
   integer, parameter :: J_GAMMA_1 = 5
   integer, parameter :: J_UPS_T = 6
   integer, parameter :: J_NABLA_AD = 7
   integer, parameter :: J_DNABLA_AD = 8
   integer, parameter :: J_NABLA = 9
   integer, parameter :: J_C_LUM = 10
   integer, parameter :: J_DC_LUM = 11
   integer, parameter :: J_C_RAD = 12
   integer, parameter :: J_DC_RAD = 13
   integer, parameter :: J_C_THN = 14
   integer, parameter :: J_DC_THN = 15
   integer, parameter :: J_C_THK = 16
   integer, parameter :: J_C_EPS = 17
   integer, parameter :: J_C_EGV = 18
   integer, parameter :: J_KAP_RHO = 19
   integer, parameter :: J_KAP_T = 20

   integer, parameter :: J_LAST = J_KAP_T

   ! Derived-type definitions

   type, extends(eqns_ct) :: nad_eqns_t
      private
      type(context_t), pointer   :: cx => null()
      type(point_t), allocatable :: pt(:)
      type(nad_trans_t)          :: tr
      real(RD), allocatable      :: coeff(:,:)
      real(RD)                   :: x_atm
      real(RD)                   :: alpha_grv
      real(RD)                   :: alpha_thm
      real(RD)                   :: alpha_hfl
      real(RD)                   :: alpha_omg
      real(RD)                   :: alpha_gam
      real(RD)                   :: alpha_pi
      real(RD)                   :: alpha_kar
      real(RD)                   :: alpha_kat
      real(RD)                   :: alpha_rht
      real(RD)                   :: alpha_egv
      integer                    :: conv_scheme
   contains
      private
      procedure, public :: stencil
      procedure, public :: A
      procedure, public :: xA
   end type nad_eqns_t

   ! Interfaces

   interface nad_eqns_t
      module procedure nad_eqns_t_
   end interface nad_eqns_t

   ! Access specifiers

   public :: nad_eqns_t

   ! Default access

   private

contains

   function nad_eqns_t_(cx, md_p, os_p) result(eq)

      type(context_t), pointer, intent(in) :: cx
      type(mode_par_t), intent(in)         :: md_p
      type(osc_par_t), intent(in)          :: os_p
      type(nad_eqns_t)                     :: eq

      type(point_t)                        :: pt_o

      ! Construct the nad_eqns_t

      eq%cx => cx

      eq%tr = nad_trans_t(cx, md_p, os_p)

      eq%alpha_grv = os_p%alpha_grv
      eq%alpha_thm = os_p%alpha_thm
      eq%alpha_hfl = os_p%alpha_hfl
      eq%alpha_gam = os_p%alpha_gam
      eq%alpha_pi = os_p%alpha_pi
      eq%alpha_kar = os_p%alpha_kar
      eq%alpha_kat = os_p%alpha_kat
      eq%alpha_rht = os_p%alpha_rht
      eq%alpha_egv = os_p%alpha_egv

      select case (os_p%time_factor)
      case ('OSC')
         eq%alpha_omg = 1._RD
      case ('EXP')
         eq%alpha_omg = -1._RD
      case default
         @:ABORT('invalid time_factor')
      end select

      select case (os_p%conv_scheme)
      case ('FROZEN_PESNELL_1')
         eq%conv_scheme = P1_CONV_SCHEME
      case ('FROZEN_PESNELL_4')
         eq%conv_scheme = P4_CONV_SCHEME
      case default
         @:ABORT('invalid conv_scheme')
      end select

      eq%x_atm = os_p%x_atm
      if (eq%x_atm < 0._RD) then
         pt_o = cx%point_o()
         eq%x_atm = pt_o%x
      end if

      eq%n_e = 6

      ! Finish

      return

   end function nad_eqns_t_

   !****

   subroutine stencil(this, pt)

      class(nad_eqns_t), intent(inout) :: this
      type(point_t), intent(in)        :: pt(:)

      class(model_t), pointer :: ml
      integer                 :: n_s
      integer                 :: i

      ! Calculate coefficients at the stencil points

      ml => this%cx%model()

      call check_model(ml, [ &
         I_V_2,I_AS,I_U,I_C_1,I_GAMMA_1,I_NABLA,I_NABLA_AD,I_UPS_T, &
         I_C_LUM,I_C_RAD,I_C_THN,I_C_THK,I_C_EPS,I_C_EGV, &
         I_KAP_RHO,I_KAP_T])

      n_s = SIZE(pt)

      if (ALLOCATED(this%coeff)) deallocate(this%coeff)
      allocate(this%coeff(n_s, J_LAST))

      do i = 1, n_s

         @:ASSERT(.NOT. ml%is_vacuum(pt(i)), 'attempt to stencil at vacuum point')

         this%coeff(i,J_V) = ml%coeff(I_V_2, pt(i))*pt(i)%x**2
         this%coeff(i,J_AS) = ml%coeff(I_AS, pt(i))
         this%coeff(i,J_U) = ml%coeff(I_U, pt(i))
         this%coeff(i,J_C_1) = ml%coeff(I_C_1, pt(i))
         this%coeff(i,J_GAMMA_1) = ml%coeff(I_GAMMA_1, pt(i))
         this%coeff(i,J_NABLA_AD) = ml%coeff(I_NABLA_AD, pt(i))
         this%coeff(i,J_DNABLA_AD) = ml%dcoeff(I_NABLA_AD, pt(i))
         this%coeff(i,J_NABLA) = ml%coeff(I_NABLA, pt(i))
         this%coeff(i,J_UPS_T) = ml%coeff(I_UPS_T, pt(i))
         this%coeff(i,J_C_LUM) = ml%coeff(I_C_LUM, pt(i))
         this%coeff(i,J_DC_LUM) = ml%dcoeff(I_C_LUM, pt(i))
         this%coeff(i,J_C_RAD) = ml%coeff(I_C_RAD, pt(i))
         this%coeff(i,J_DC_RAD) = ml%dcoeff(I_C_RAD, pt(i))
         this%coeff(i,J_C_THN) = ml%coeff(I_C_THN, pt(i))
         this%coeff(i,J_DC_THN) = ml%dcoeff(I_C_THN, pt(i))
         this%coeff(i,J_C_THK) = ml%coeff(I_C_THK, pt(i))
         this%coeff(i,J_C_EPS) = ml%coeff(I_C_EPS, pt(i))
         this%coeff(i, J_C_EGV) = ml%coeff(I_C_EGV, pt(i))
         this%coeff(i,J_KAP_RHO) = ml%coeff(I_KAP_RHO, pt(i))
         this%coeff(i,J_KAP_T) = ml%coeff(I_KAP_T, pt(i))

      end do

      ! Set up stencil for the tr component

      call this%tr%stencil(pt)

      ! Store the stencil points for on-the-fly evaluations

      this%pt = pt

      ! Finish

      return

   end subroutine stencil

   !****

   function A(this, i, st)

      class(nad_eqns_t), intent(in) :: this
      integer, intent(in)           :: i
      class(state_ct), intent(in)   :: st
      complex(RD)                   :: A(this%n_e,this%n_e)

      ! Evaluate the RHS matrix

      A = this%xA(i, st)/this%pt(i)%x

      ! Finish

      return

   end function A

   !****

   function xA(this, i, st)

      class(nad_eqns_t), intent(in) :: this
      integer, intent(in)           :: i
      class(state_ct), intent(in)   :: st
      complex(RD)                   :: xA(this%n_e,this%n_e)

      real(RD)    :: Omega_rot
      real(RD)    :: Omega_rot_i
      complex(RD) :: omega_c
      complex(RD) :: i_omega_c
      complex(RD) :: lambda
      complex(RD) :: l_i
      complex(RD) :: f_rh
      complex(RD) :: df_rh
      complex(RD) :: conv_term
      complex(RD) :: eps_rho
      complex(RD) :: eps_T
      complex(RD) :: c_eps_ad
      complex(RD) :: c_eps_S
      real(RD)    :: c_kap_ad
      real(RD)    :: c_kap_S
      real(RD)    :: c_dif

      ! Evaluate the log(x)-space RHS matrix

      associate ( &
         V => this%coeff(i,J_V), &
         As => this%coeff(i,J_AS), &
         U => this%coeff(i,J_U), &
         c_1 => this%coeff(i,J_C_1), &
         Gamma_1 => this%coeff(i,J_GAMMA_1), &
         nabla_ad => this%coeff(i,J_NABLA_AD), &
         dnabla_ad => this%coeff(i,J_DNABLA_AD), &
         nabla => this%coeff(i,J_NABLA), &
         ups_T => this%coeff(i,J_UPS_T), &
         c_lum => this%coeff(i,J_C_LUM), &
         dc_lum => this%coeff(i,J_DC_LUM), &
         c_rad => this%coeff(i,J_C_RAD), &
         dc_rad => this%coeff(i,J_DC_RAD), &
         c_thn => this%coeff(i,J_C_THN), &
         dc_thn => this%coeff(i,J_DC_THN), &
         c_thk => this%coeff(i,J_C_THK), &
         c_eps => this%coeff(i,J_C_EPS), &
         c_egv => this%coeff(i,J_C_EGV), &
         kap_rho => this%coeff(i,J_KAP_RHO), &
         kap_T => this%coeff(i,J_KAP_T), &
         pt => this%pt(i), &
         pt_i => this%cx%point_i(), &
         x => this%pt(i)%x, &
         x_atm => this%x_atm, &
         alpha_grv => this%alpha_grv, &
         alpha_thm => this%alpha_thm, &
         alpha_hfl => this%alpha_hfl, &
         alpha_rht => this%alpha_rht, &
         alpha_omg => this%alpha_omg, &
         alpha_gam => this%alpha_gam, &
         alpha_pi => this%alpha_pi, &
         alpha_kar => this%alpha_kar, &
         alpha_kat => this%alpha_kat, &
         alpha_egv => this%alpha_egv)

         Omega_rot = this%cx%Omega_rot(pt)
         Omega_rot_i = this%cx%Omega_rot(pt_i)

         omega_c = this%cx%omega_c(Omega_rot, st)
         i_omega_c = (0._RD,1._RD)*sqrt(CMPLX(alpha_omg, KIND=RD))*omega_c

         lambda = this%cx%lambda(Omega_rot, st)
         l_i = this%cx%l_e(Omega_rot_i, st)

         f_rh = 1._RD - 0.25_RD*alpha_rht*i_omega_c*c_thn
         df_rh = -0.25_RD*alpha_rht*i_omega_c*c_thn*dc_thn/f_rh

         select case (this%conv_scheme)
         case (P1_CONV_SCHEME)
            conv_term = lambda*c_rad*(3._RD + dc_rad)/(c_1*alpha_omg*omega_c**2)
         case (P4_CONV_SCHEME)
            conv_term = lambda*(c_lum*(3._RD + dc_lum) - (c_lum - c_rad))/(c_1*alpha_omg*omega_c**2)
         case default
            @:ABORT('invalid conv_scheme')
         end select

         eps_rho = this%cx%eps_rho(st, pt)
         eps_T = this%cx%eps_T(st, pt)

         c_eps_ad = c_eps*(nabla_ad*eps_T + eps_rho/Gamma_1)
         c_eps_S = c_eps*(eps_T - ups_T*eps_rho)

         c_kap_ad = nabla_ad*alpha_kat*kap_T + alpha_kar*kap_rho/Gamma_1
         c_kap_S = alpha_kat*kap_T - ups_T*alpha_kar*kap_rho

         c_dif = -4._RD*nabla_ad*V*nabla + nabla_ad*(dnabla_ad + V)

         ! Set up the matrix

         xA(1,1) = V/Gamma_1 - 1._RD - l_i
         xA(1,2) = lambda/(c_1*alpha_omg*omega_c**2) - V/Gamma_1*alpha_gam
         xA(1,3) = alpha_grv*(lambda/(c_1*alpha_omg*omega_c**2))
         xA(1,4) = alpha_grv*(0._RD)
         xA(1,5) = ups_T
         xA(1,6) = 0._RD

         xA(2,1) = c_1*alpha_omg*omega_c**2 - As*MERGE(MERGE(alpha_pi, alpha_gam, x<x_atm), 1._RD, As > 0._RD)
         xA(2,2) = As - U + 3._RD - l_i
         xA(2,3) = alpha_grv*(0._RD)
         xA(2,4) = alpha_grv*(-1._RD)
         xA(2,5) = ups_T
         xA(2,6) = 0._RD

         xA(3,1) = alpha_grv*(0._RD)
         xA(3,2) = alpha_grv*(0._RD)
         xA(3,3) = alpha_grv*(3._RD - U - l_i)
         xA(3,4) = alpha_grv*(1._RD)
         xA(3,5) = alpha_grv*(0._RD)
         xA(3,6) = alpha_grv*(0._RD)

         xA(4,1) = alpha_grv*(U*As)
         xA(4,2) = alpha_grv*(U*V/Gamma_1)
         xA(4,3) = alpha_grv*(lambda)
         xA(4,4) = alpha_grv*(-U - l_i + 2._RD)
         xA(4,5) = alpha_grv*(-U*ups_T)
         xA(4,6) = alpha_grv*(0._RD)

         xA(5,1) = V*(nabla_ad*(U - c_1*alpha_omg*omega_c**2) - 4._RD*(nabla_ad - nabla) + c_kap_ad*V*nabla + c_dif)/f_rh
         xA(5,2) = V*(lambda/(c_1*alpha_omg*omega_c**2)*(nabla_ad - nabla) - c_kap_ad*V*nabla - c_dif)/f_rh
         xA(5,3) = alpha_grv*(V*lambda/(c_1*alpha_omg*omega_c**2)*(nabla_ad - nabla))/f_rh
         xA(5,4) = alpha_grv*(V*nabla_ad)/f_rh
         xA(5,5) = V*nabla*(4._RD*f_rh - c_kap_S)/f_rh - df_rh - (l_i - 2._RD)
         xA(5,6) = -V*nabla/(c_rad*f_rh)

         xA(6,1) = alpha_hfl*lambda*(nabla_ad/nabla - 1._RD)*c_rad - V*c_eps_ad - alpha_egv*c_egv*nabla_ad*V
         xA(6,2) = V*c_eps_ad - lambda*c_rad*alpha_hfl*nabla_ad/nabla + conv_term + alpha_egv*c_egv*nabla_ad*V
         xA(6,3) = alpha_grv*conv_term
         xA(6,4) = alpha_grv*(0._RD)
         if (x > 0._RD) then
            xA(6,5) = c_eps_S - alpha_hfl*lambda*c_rad/(nabla*V) + alpha_thm*i_omega_c*c_thk + alpha_egv*c_egv
         else
            xA(6,5) = -alpha_hfl*HUGE(0._RD)
         endif
         xA(6,6) = -1._RD - l_i

      end associate

      ! Apply the variables transformation

      call this%tr%trans_eqns(xA, i, st)

      ! Finish

      return

   end function xA

end module nad_eqns_m
