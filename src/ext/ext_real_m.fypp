! Module  : ext_real_m
! Purpose : extented-exponent arithmetic (real)
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module ext_real_m

   ! Uses

   use forum_m, only: RD

   use math_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   real(RD), parameter :: RADIX_RD = REAL(RADIX(1._RD), RD)

   ! Derived-type definitions

   type ext_rt
      private
      real(RD) :: f  ! Fractional part
      integer  :: e  ! Exponent
   contains
      private
      procedure       :: op_minus_rx_
      generic, public :: operator(-) => op_minus_rx_
      #:for O, N in zip(('+', '-', '*', '/', '==', '/=', '<', '>', '<=', '>='), &
                        ('plus', 'minus', 'times', 'divide', 'eq', 'neq', 'lt', 'gt', 'le', 'ge'))
         procedure             :: op_${N}$_rx_rx_
         procedure             :: op_${N}$_rx_r_
         procedure, pass(that) :: op_${N}$_r_rx_
         generic, public       :: operator(${O}$) => op_${N}$_rx_rx_, op_${N}$_rx_r_, op_${N}$_r_rx_
      #:endfor
   end type ext_rt

   type, abstract :: func_ext_rt
   contains
      procedure(eval_), deferred :: eval
   end type func_ext_rt

   ! Interface blocks

   interface ext_rt
      module procedure ext_rt_r_
      module procedure ext_rt_c_
   end interface ext_rt

   interface real
      module procedure real_
   end interface real

   interface valid
      module procedure valid_
   end interface valid

   interface product
      module procedure product_
   end interface product

   interface exp
      module procedure exp_
   end interface exp

   interface sqrt
      module procedure sqrt_
   end interface sqrt

   interface abs
      module procedure abs_
   end interface abs

   interface fraction
      module procedure fraction_
   end interface fraction

   interface exponent
      module procedure exponent_
   end interface exponent

   interface max
      module procedure max_
   end interface max

   interface min
      module procedure min_
   end interface min

   interface scale
      module procedure scale_
   end interface scale

   abstract interface
      subroutine eval_(this, rx, f_rx, status)
         import ext_rt
         import func_ext_rt
         class(func_ext_rt), intent(inout) :: this
         type(ext_rt), intent(in)          :: rx
         type(ext_rt), intent(out)         :: f_rx
         integer, intent(out)              :: status
      end subroutine eval_
   end interface

   ! Access specifiers

   public :: ext_rt
   public :: real
   public :: valid
   public :: product
   public :: abs
   public :: exp
   public :: sqrt
   public :: fraction
   public :: exponent
   public :: max
   public :: min
   public :: scale

   ! Default access

   private

contains

   elemental function ext_rt_r_(r) result(rx)

      real(RD), intent(in) :: r
      type(ext_rt)         :: rx

      ! Construct the ext_rt from the real r

      call split_(r, rx%f, rx%e)

      ! Finish

      return

   end function ext_rt_r_

   !****

   elemental function ext_rt_c_(c) result(rx)

      complex(RD), intent(in) :: c
      type(ext_rt)            :: rx

      ! Construct the ext_rt from the complex c

      call split_(REAL(c), rx%f, rx%e)

      ! Finish

      return

   end function ext_rt_c_

   !****

   elemental function op_plus_rx_rx_(this, that) result(rx)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      type(ext_rt)              :: rx

      real(RD) :: f
      integer  :: e

      ! Evaluate the plus operator

      if (this%f == 0._RD) then

         rx%f = that%f
         rx%e = that%e

      elseif (that%f == 0._RD) then

         rx%f = this%f
         rx%e = this%e

      else

         if (this%e > that%e) then
            f = this%f + real(ext_rt(that%f, that%e - this%e))
            e = this%e
         else
            f = real(ext_rt(this%f, this%e - that%e)) + that%f
            e = that%e
         endif

         call split_(f, rx%f, rx%e)
         rx = scale(rx, e)

      endif

      ! Finish

      return

   end function op_plus_rx_rx_

   !****

   elemental function op_minus_rx_(this) result(rx)

      class(ext_rt), intent(in) :: this
      type(ext_rt)              :: rx

      ! Evaluate the unary minus operator

      rx%f = -this%f
      rx%e = this%e

      ! Finish

      return

   end function op_minus_rx_

   !****

   elemental function op_minus_rx_rx_(this, that) result(rx)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      type(ext_rt)              :: rx

      real(RD) :: f
      integer  :: e

      ! Evaluate the minus operator

      if (this%f == 0._RD) then

         rx%f = -that%f
         rx%e = that%e

      elseif (that%f == 0._RD) then

         rx%f = this%f
         rx%e = this%e

      else

         if (this%e > that%e) then
            f = this%f - real(ext_rt(that%f, that%e - this%e))
            e = this%e
         else
            f = real(ext_rt(this%f, this%e - that%e)) - that%f
            e = that%e
         endif

         call split_(f, rx%f, rx%e)
         rx = scale(rx, e)

      endif

      ! Finish

      return

   end function op_minus_rx_rx_

   !****

   elemental function op_times_rx_rx_(this, that) result(rx)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      type(ext_rt)              :: rx

      real(RD) :: f
      integer  :: e

      ! Evaluate the times operator

      if (this%f == 0._RD .OR. that%f == 0._RD) then

         rx = ext_rt(0._RD)

      else

         f = this%f*that%f
         e = this%e + that%e

         call split_(f, rx%f, rx%e)
         rx = scale(rx, e)

      endif

      ! Finish

      return

   end function op_times_rx_rx_

   !****

   elemental function op_divide_rx_rx_(this, that) result(rx)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      type(ext_rt)              :: rx

      real(RD) :: f
      integer  :: e

      ! Evaluate the divide operator

      if (this%f == 0._RD .AND. that%f /= 0._RD) then

         rx = ext_rt(0._RD)

      else

         f = this%f/that%f
         e = this%e - that%e

         call split_(f, rx%f, rx%e)
         rx = scale(rx, e)

      endif

      ! Finish

      return

   end function op_divide_rx_rx_

   !****

   elemental function op_eq_rx_rx_(this, that) result(eq)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: eq

      ! Evaluate the equality operator

      eq = this%e == that%e .AND. this%f == that%f

      ! Finish

      return

   end function op_eq_rx_rx_

   !****

   elemental function op_neq_rx_rx_(this, that) result(neq)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: neq

      ! Evaluate the inequality operator

      neq = .NOT. this == that

      ! Finish

      return

   end function op_neq_rx_rx_

   !****

   elemental function op_lt_rx_rx_(this, that) result(lt)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: lt

      real(RD) :: this_s
      real(RD) :: that_s

      ! Evaluate the less-than operator

      if (this%f == 0._RD .OR. that%f == 0._RD) then

         lt = this%f < that%f

      else

         this_s = SIGN(1._RD, this%f)
         that_s = SIGN(1._RD, that%f)

         if (this_s == that_s) then
            if (this_s > 0._RD) then
               lt = (this%e < that%e .OR. (this%e == that%e .AND. this%f < that%f))
            else
               lt = (this%e > that%e .OR. (this%e == that%e .AND. this%f < that%f))
            endif
         else
            lt = this_s < 0._RD
         endif

      endif

      ! Finish

      return

   end function op_lt_rx_rx_

   !****

   elemental function op_gt_rx_rx_(this, that) result(gt)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: gt

      ! Evaluate the greater-than operator

      gt = that < this

      ! Finish

      return

   end function op_gt_rx_rx_

   !****

   elemental function op_le_rx_rx_(this, that) result(le)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: le

      ! Evaluate the less-than-or-equal operator

      le = .NOT. this > that

      ! Finish

      return

   end function op_le_rx_rx_

   !****

   elemental function op_ge_rx_rx_(this, that) result(ge)

      class(ext_rt), intent(in) :: this
      class(ext_rt), intent(in) :: that
      logical                   :: ge

      ! Evaluate the greater-than-or-equal operator

      ge = .NOT. this < that

      ! Finish

      return

   end function op_ge_rx_rx_

   !****

   #:for O, N, T in zip(('+', '-', '*', '/', '==', '/=', '<', '>', '<=', '>='), &
                        ('plus', 'minus', 'times', 'divide', 'eq', 'neq', 'lt', 'gt', 'le', 'ge'), &
                        ('type(ext_rt)',)*4+('logical',)*6)

      elemental function op_${N}$_rx_r_(this, that) result(${N}$)

         class(ext_rt), intent(in) :: this
         real(RD), intent(in)      :: that
         ${T}$                     :: ${N}$

         ! Evaluate the operator to mixed ext_rt/real types

         ${N}$ = this ${O}$ ext_rt(that)

         ! Finish

         return

      end function op_${N}$_rx_r_

      !****

      elemental function op_${N}$_r_rx_(this, that) result(${N}$)

         real(RD), intent(in)      :: this
         class(ext_rt), intent(in) :: that
         ${T}$                     :: ${N}$

         ! Evaluate the operator to mixed real/ext_rt types

         ${N}$ = ext_rt(this) ${O}$ that

         ! Finish

         return

      end function op_${N}$_r_rx_

   #:endfor

   !****

   elemental function real_(rx) result(r)

      type(ext_rt), intent(in) :: rx
      real(RD)                 :: r

      integer :: e_min

      ! Convert the ext_rt to real

      if (rx%f /= 0._RD) then

         e_min = MINEXPONENT(0._RD)

         if (rx%e >= e_min) then
            r = rx%f*RADIX_RD**rx%e
         else
            r = (rx%f*RADIX_RD**MAX(rx%e-e_min, -DIGITS(0._RD)-1))*RADIX_RD**e_min
         endif

      else

         r = 0._RD

      endif

      ! Finish

      return

   end function real_

   !****

   elemental function valid_(rx) result(valid)

      type(ext_rt), intent(in) :: rx
      logical                  :: valid

      ! Determine if rx is valid

      valid = abs(rx%f) >= RADIX_RD**(-1) .AND. abs(rx%f) < 1._RD

      ! Finish

      return

   end function valid_

   !****

   function product_(rx) result(prod_rx)

      type(ext_rt), intent(in) :: rx(:)
      type(ext_rt)             :: prod_rx

      integer  :: i
      real(RD) :: g

      ! Calculate the product of the elements of rx

      prod_rx%f = 1._RD
      prod_rx%e = SUM(rx%e)

      do i = 1,SIZE(rx)

         g = prod_rx%f*rx(i)%f

         prod_rx%f = FRACTION(g)
         prod_rx = scale(prod_rx, EXPONENT(g))

      end do

      ! Finish

      return

   end function product_

   !****

   elemental function abs_(rx) result(abs_rx)

      type(ext_rt), intent(in) :: rx
      type(ext_rt)             :: abs_rx

      ! Calculate the absolute value of rx

      abs_rx%f = abs(rx%f)
      abs_rx%e = rx%e

      ! Finish

      return

   end function abs_

   !****

   elemental function exp_(rx) result(exp_rx)

      type(ext_rt), intent(in) :: rx
      type(ext_rt)             :: exp_rx

      real(RD) :: g
      integer  :: e

      ! Calculate the exponential of rx

      g = real(rx)/log(RADIX_RD)
      e = FLOOR(g)

      call split_(pow(RADIX_RD, g-e), exp_rx%f, exp_rx%e)
      exp_rx = scale(exp_rx, e)

      ! Finish

      return

   end function exp_

   !****

   elemental function sqrt_(rx) result(sqrt_rx)

      type(ext_rt), intent(in) :: rx
      type(ext_rt)             :: sqrt_rx

      ! Calculate the square root of rx

      sqrt_rx = ext_rt(sqrt(rx%f))

      if (MOD(rx%e, 2) == 0) then
         sqrt_rx = scale(sqrt_rx, rx%e/2)
      else
         sqrt_rx = scale(sqrt_rx, (rx%e-1)/2)*sqrt(2._RD)
      endif

      ! Finish

      return

   end function sqrt_

   !****

   elemental function fraction_(rx) result(fraction_rx)

      type(ext_rt), intent(in) :: rx
      real(RD)                  :: fraction_rx

      ! Return the fraction part of rx

      fraction_rx = rx%f

      ! Finish

      return

   end function fraction_

   !****

   elemental function exponent_(rx) result(exponent_rx)

      type(ext_rt), intent(in) :: rx
      integer                   :: exponent_rx

      ! Return the exponent part of rx

      exponent_rx = rx%e

      ! Finish

      return

   end function exponent_

   !****

   elemental function max_(rx_a, rx_b) result(max_rx)

      type(ext_rt), intent(in) :: rx_a
      type(ext_rt), intent(in) :: rx_b
      type(ext_rt)             :: max_rx

      real(RD) :: rx_a_s
      real(RD) :: rx_b_s

      ! Return the maximum of rx_a and rx_b

      rx_a_s = SIGN(1._RD, rx_a%f)
      rx_b_s = SIGN(1._RD, rx_b%f)

      if (rx_a_s > 0._RD .AND. rx_b_s > 0._RD) then
         if (rx_a%e > rx_b%e) then
            max_rx = rx_a
         elseif (rx_b%e > rx_a%e) then
            max_rx = rx_b
         else
            max_rx%f = MAX(rx_a%f, rx_b%f)
            max_rx%e = rx_a%e
         endif
      elseif (rx_a_s < 0._RD .AND. rx_b_s < 0._RD) then
         if (rx_a%e > rx_b%e) then
            max_rx = rx_b
         elseif (rx_b%e > rx_a%e) then
            max_rx = rx_a
         else
            max_rx%f = MAX(rx_a%f, rx_b%f)
            max_rx%e = rx_a%e
         endif
      else
         if (rx_a_s > 0._RD) then
            max_rx = rx_a
         else
            max_rx = rx_b
         endif
      endif

      ! Finish

      return

   end function max_

   !****

   elemental function min_(rx_a, rx_b) result(min_rx)

      type(ext_rt), intent(in) :: rx_a
      type(ext_rt), intent(in) :: rx_b
      type(ext_rt)             :: min_rx

      ! Return the minimum of rx_a and rx_b

      min_rx = -MAX(-rx_a, -rx_b)

      ! Finish

      return

   end function min_

   !****

   elemental function scale_(rx, de) result(scale_rx)

      class(ext_rt), intent(in) :: rx
      integer, intent(in)       :: de
      type(ext_rt)              :: scale_rx

      ! Scale rx by RADIX_RD**de

      scale_rx%f = rx%f

      if (scale_rx%f /= 0._RD) then
         scale_rx%e = rx%e + de
      else
         scale_rx%e = 0
      endif

      ! Finish

      return

   end function scale_

   !****

   elemental subroutine split_(x, f, e)

      real(RD), intent(in)  :: x
      real(RD), intent(out) :: f
      integer, intent(out)  :: e

      ! Spit x into fraction and exponent parts

      f = FRACTION(x)
      e = EXPONENT(x)

      ! Finish

      return

   end subroutine split_

end module ext_real_m
