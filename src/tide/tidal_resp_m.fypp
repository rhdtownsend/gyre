! Module  : tidal_resp_m
! Purpose : routines to evaluate tidal response
!
! Copyright 2018-2022 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tidal_resp_m

   ! Uses

   use forum_m, only: RD, ID

   use bvp_m
   use constants_m
   use context_m
   use ext_m
   use freq_m
   use grid_m
   use grid_par_m
   use grid_scaffold_m
   use grid_refine_m
   use grid_spec_m
   use math_m
   use mode_par_m
   use model_m
   use nad_bvp_m
   use num_par_m
   use orbit_par_m
   use osc_par_m
   use point_m
   use resp_m
   use rot_par_m
   use sad_bvp_m
   use state_m
   use tide_par_m
   use tidal_coeff_m
   use tidal_context_m
   use tnad_bvp_m
   use util_m
   use wave_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: NO_TIDE = 0
   integer, parameter :: DYNAMIC_TIDE = 1
   integer, parameter :: STATIC_TIDE = 2
   integer, parameter :: MIXED_TIDE = 3

   ! Module variables

   integer, save :: id_m = 0

   ! Access specifiers

   public :: eval_resp

   ! Default access

   private

contains

   subroutine eval_resp(ml, process_resp, gr_p, nm_p, or_p, os_p, rt_p, td_p)

      class(model_t), pointer, intent(in) :: ml
      interface
         subroutine process_resp (rs)
            use resp_m
            implicit none
            type(resp_t), intent(in) :: rs
         end subroutine process_resp
      end interface
      type(grid_par_t), intent(in)        :: gr_p
      type(num_par_t), intent(in)         :: nm_p
      type(orbit_par_t), intent(in)       :: or_p
      type(osc_par_t), intent(in)         :: os_p
      type(rot_par_t), intent(in)         :: rt_p
      type(tide_par_t), intent(in)        :: td_p

      real(RD), allocatable         :: omega(:)
      type(grid_t)                  :: gr
      type(mode_par_t), allocatable :: md_p(:,:)
      type(context_t), pointer      :: cx(:,:)
      real(RD), allocatable         :: y_T(:,:,:)
      integer, allocatable          :: tide_type(:,:,:)
      integer                       :: l
      integer                       :: m
      integer                       :: k
      class(bvp_ct), allocatable    :: bp_nad
      type(sad_bvp_t)               :: bp_sad
      complex(RD)                   :: w_i_nad(3)
      complex(RD)                   :: w_o_nad(3)
      real(RD)                      :: w_i_sad(1)
      real(RD)                      :: w_o_sad(1)
      type(state_ct)                :: st_nad
      type(state_rt)                :: st_sad
      type(wave_t)                  :: wv
      type(resp_t)                  :: rs

      integer(ID) :: c_beg, c_end, c_rate
      integer(ID) :: c_bvp, c_solve, c_proc

      c_bvp = 0
      c_solve = 0
      c_proc = 0

      call system_clock(count_rate=c_rate)

      ! Check that the NULL coriolis method is being used

      if (rt_p%coriolis_method /= 'NULL') then
         @:ABORT('only the NULL coriolis method can be used')
      end if

      ! Set up tidal params, contexts, grid, etc

      call setup_tides_(ml, gr_p, or_p, os_p, rt_p, td_p, omega, gr, cx, md_p, y_T, tide_type)

      ! Loop over l, m and k, solving for the tidal response

      id_m = id_m + 1

      l_loop : do l = td_p%l_min, td_p%l_max
         m_loop : do m = MAX(-l, td_p%m_min), MIN(l, td_p%m_max)

            ! Create the bvp_t's

            call system_clock(c_beg)

            if (os_p%alpha_trb > 0._RD) then
               allocate(bp_nad, SOURCE=tnad_bvp_t(cx(l,m), gr, md_p(l,m), nm_p, os_p))
            else
               allocate(bp_nad, SOURCE=nad_bvp_t(cx(l,m), gr, md_p(l,m), nm_p, os_p))
            endif

            bp_sad = sad_bvp_t(cx(l,m), gr, md_p(l,m), nm_p, os_p)

            call system_clock(c_end)
            c_bvp = c_bvp + (c_end - c_beg)

            k_loop : do k = td_p%k_min, td_p%k_max

               ! Evaluate the response

               if (ABS(y_T(l,m,k)) > 0._RD) then

                  call system_clock(c_beg)

                  select case(tide_type(l,m,k))
                  case (DYNAMIC_TIDE,MIXED_TIDE)

                     w_i_nad = 0._RD

                     w_o_nad = 0._RD
                     w_o_nad(2) = (2*l+1)*y_T(l,m,k)

                     st_nad = state_ct(CMPLX(omega(k), KIND=RD), omega(k))

                     select type (bp_nad)
                     type is (nad_bvp_t)
                        wv = wave_t(bp_nad, st_nad, w_i_nad, w_o_nad, id_m)
                     type is (tnad_bvp_t)
                        wv = wave_t(bp_nad, st_nad, w_i_nad, w_o_nad, id_m)
                     end select

                  case (STATIC_TIDE)

                     w_i_sad = 0._RD

                     w_o_sad = 0._RD
                     w_o_sad(1) = (2*l+1)*y_T(l,m,k)

                     st_sad = state_rt(omega(k))

                     wv = wave_t(bp_sad, st_sad, w_i_sad, w_o_sad, id_m)

                  case default

                     @:ABORT('invalid tide_type')

                  end select

                  rs = resp_t(wv, or_p, td_p, k)

                  call system_clock(c_end)
                  c_solve = c_solve + (c_end - c_beg)

                  ! Process the response

                  call system_clock(c_beg)

                  call process_resp(rs)

                  call system_clock(c_end)
                  c_proc = c_proc + (c_end - c_beg)

               end if

            end do k_loop

            ! Clean up

            deallocate(bp_nad)

         end do m_loop
      end do l_loop

      ! Report timing

      if (check_log_level('DEBUG')) then
         write(OUTPUT_UNIT, *) 'Time for bpv:', REAL(c_bvp)/c_rate
         write(OUTPUT_UNIT, *) 'Time for solve:', REAL(c_solve)/c_rate
         write(OUTPUT_UNIT, *) 'Time for proc:', REAL(c_proc)/c_rate
      end if

      ! Clean up

      deallocate(cx)

      ! Finish

      return

   end subroutine eval_resp

   !****

   subroutine setup_tides_(ml, gr_p, or_p, os_p, rt_p, td_p, &
      omega, gr, cx, md_p, y_T, tide_type)

      class(model_t), pointer, intent(in)        :: ml
      type(grid_par_t), intent(in)               :: gr_p
      type(orbit_par_t), intent(in)              :: or_p
      type(osc_par_t), intent(in)                :: os_p
      type(rot_par_t), intent(in)                :: rt_p
      type(tide_par_t), intent(in)               :: td_p
      real(RD), allocatable, intent(out)         :: omega(:)
      type(grid_t), intent(out)                  :: gr
      type(context_t), pointer, intent(out)      :: cx(:,:)
      type(mode_par_t), allocatable, intent(out) :: md_p(:,:)
      real(RD), allocatable, intent(out)         :: y_T(:,:,:)
      integer, allocatable, intent(out)          :: tide_type(:,:,:)

      type(point_t)                  :: pt_o
      integer                        :: l_min
      integer                        :: l_max
      integer                        :: m_min
      integer                        :: m_max
      integer                        :: k_min
      integer                        :: k_max
      real(RD)                       :: Omega_orb
      integer                        :: l
      integer                        :: m
      integer                        :: k
      real(RD)                       :: y_T_max
      type(grid_spec_t), allocatable :: gs(:,:,:)
      logical, allocatable           :: gs_mask(:,:,:)

      ! Set up the scaffold grid (used for tide classification and bc
      ! setting)

      gr = grid_t(ml, gr_p)

      pt_o = gr%pt_o()

      ! Initialize arrays

      l_min = td_p%l_min
      l_max = td_p%l_max

      m_min = MAX(-l_max, td_p%m_min)
      m_max = MIN(l_max, td_p%m_max)

      k_min = td_p%k_min
      k_max = td_p%k_max

      allocate(omega(k_min:k_max))

      allocate(md_p(l_min:l_max,m_min:m_max))
      allocate(cx(l_min:l_max,m_min:m_max))

      allocate(y_T(l_min:l_max,m_min:m_max,k_min:k_max))
      allocate(tide_type(l_min:l_max,m_min:m_max,k_min:k_max))

      ! Set up the forcing frequency

      Omega_orb = tidal_Omega_orb(ml, or_p)

      omega_loop : do k = k_min, k_max
         omega(k) = td_p%alpha_frq*k*Omega_orb
      end do omega_loop

      ! Set up other tide params

      y_T = 0._RD

      l_loop : do l = l_min, l_max
         m_loop : do m = MAX(-l, td_p%m_min), MIN(l, td_p%m_max)

            md_p(l,m) = mode_par_t(l=l, m=m)

            cx(l,m) = context_t(ml, gr, md_p(l,m), or_p, os_p, rt_p)

            k_loop : do k = k_min, k_max

               y_T(l,m,k) = pt_o%x**(-l)*ml%coeff(I_C_1, pt_o)*tidal_Phi_T(ml, or_p, pt_o%x, l, m, k)

               tide_type(l,m,k) = classify_tide_(cx(l,m), gr, td_p, omega(k))

               if (check_log_level('DEBUG')) then
                  write(OUTPUT_UNIT, *) 'tide type:', l, m, k, tide_type(l,m,k), y_T(l,m,k)
               endif

            end do k_loop

         end do m_loop
      end do l_loop

      y_T_max = MAXVAL(ABS(y_T))

      ! Zero y_T where it falls below the threshold

      where (ABS(y_T) <= td_p%y_T_thresh_abs .OR. &
         ABS(y_T) <= td_p%y_T_thresh_rel*y_T_max)
         y_T = 0._RD
      end where

      ! Refine the skeleton grid using grid specs

      allocate(gs(l_min:l_max,m_min:m_max,k_min:k_max))
      allocate(gs_mask(l_min:l_max,m_min:m_max,k_min:k_max))

      gs_mask = .FALSE.

      gs_l_loop : do l = l_min, l_max
         gs_m_loop : do m = MAX(-l, td_p%m_min), MIN(l, td_p%m_max)
            gs_k_loop : do k = k_min, k_max

               gs_mask(l,m,k) = (tide_type(l,m,k) == DYNAMIC_TIDE .OR. &
                  tide_type(l,m,k) == MIXED_TIDE) .AND. &
                  ABS(y_T(l,m,k)) > 0._RD

               if (gs_mask(l,m,k)) then
                  gs(l,m,k) = grid_spec_t(cx(l,m), [omega(k)])
               end if

            end do gs_k_loop
         end do gs_m_loop
      end do gs_l_loop

      if (COUNT(gs_mask) > 0) then
         call refine_grid(gr, PACK(gs, MASK=gs_mask), gr_p, os_p)
      end if

      ! Finish

      return

   end subroutine setup_tides_

   !****

   function classify_tide_(cx, gr, td_p, omega) result(tide_type)

      type(context_t), intent(in)  :: cx
      type(grid_t), intent(in)     :: gr
      type(tide_par_t), intent(in) :: td_p
      real(RD), intent(in)         :: omega
      integer                      :: tide_type

      type(state_rt) :: st
      integer        :: j
      real(RD)       :: Omega_rot
      real(RD)       :: omega_c(gr%n)

      ! Check co-rotating frequencies

      st = state_rt(omega)

      !$OMP PARALLEL DO PRIVATE (Omega_rot)
      do j = 1, gr%n
         Omega_rot = cx%Omega_rot(gr%pt(j))
         omega_c(j) = cx%omega_c(Omega_rot, st)
      end do

      if (ALL(abs(omega_c) > td_p%omega_c_thresh)) then
         tide_type = DYNAMIC_TIDE
      elseif (ALL(abs(omega_c) <= td_p%omega_c_thresh)) then
         tide_type = STATIC_TIDE
      else
         tide_type = MIXED_TIDE
      endif

      ! Finish

      return

   end function classify_tide_

end module tidal_resp_m
