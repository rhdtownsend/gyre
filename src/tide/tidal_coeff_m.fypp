! Module  : tidal_coeff_m
! Purpose : tide-related coefficient evaluation
!
! Copyright 2018-2022 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tidal_coeff_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use freq_m
   use grid_m
   use math_m
   use model_m
   use orbit_par_m
   use special_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter  :: RQ = SELECTED_REAL_KIND(32)

   real(RD), parameter :: TOL = 1E-12_RD

   ! Access specifiers

   public :: tidal_Phi_T
   public :: tidal_dPhi_T
   public :: tidal_Omega_orb
   public :: tidal_R_a
   public :: tidal_cbar
   public :: tidal_Gbar_1
   public :: tidal_Gbar_2
   public :: tidal_Gbar_3
   public :: tidal_Gbar_4
   public :: hansen_X
   public :: hansen_X_RQ

   ! Default accesss

   private

contains

   function tidal_Phi_T(ml, or_p, x, l, m, k) result(Phi_T)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      real(RD), intent(in)          :: x
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: Phi_T

      real(RD) :: R_a
      real(RD) :: eps_T
      real(RD) :: cbar

      ! Evaluate the tidal forcing potential Phi_T at x, in units of G*M/R

      R_a = tidal_R_a(ml, or_p)
      eps_T = R_a**3*or_p%q

      cbar = tidal_cbar(ml, or_p, l, m, k)

      Phi_T = -eps_T*cbar*x**l

      ! Finish

      return

   end function tidal_Phi_T

   !****

   function tidal_dPhi_T(ml, or_p, x, l, m, k) result(dPhi_T)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      real(RD), intent(in)          :: x
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: dPhi_T

      real(RD) :: R_a
      real(RD) :: eps_T
      real(RD) :: cbar

      ! Evaluate the tidal forcing potential gradient dPhi_T/dx at x, in
      ! units of G*M/R

      R_a = tidal_R_a(ml, or_p)
      eps_T = R_a**3*or_p%q

      cbar = tidal_cbar(ml, or_p, l, m, k)

      dPhi_T = -eps_T*cbar*l*x**(l-1)

      ! Finish

      return

   end function tidal_dPhi_T

   !****

   function tidal_Omega_orb(ml, or_p) result(Omega_orb)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      real(RD)                      :: Omega_orb

      ! Evaluate the dimensionless orbital frequency

      Omega_orb = or_p%Omega_orb/freq_scale(or_p%Omega_orb_units, ml)

      ! Finish

      return

   end function tidal_Omega_orb

   !****

   function tidal_R_a(ml, or_p) result(R_a)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      real(RD)                      :: R_a

      real(RD) :: Omega_orb

      ! Evaluate the ratio of the stellar radius to the semi-major axis

      Omega_orb = tidal_Omega_orb(ml, or_p)

      R_a = (Omega_orb**2/(1._RD + or_p%q))**(1._RD/3._RD)

      ! Finish

      return

   end function tidal_R_a

   !****

   function tidal_cbar(ml, or_p, l, m, k) result(cbar)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: cbar

      real(RD) :: R_a
      real(RD) :: X_1

      ! Evaluate the tidal potential coefficient cbar_lmk

      R_a = tidal_R_a(ml, or_p)

      X_1 = hansen_X(or_p, -(l+1), -m, -k)

      cbar = (4._RD*PI/(2*l+1))*R_a**(l-2)*REAL(CONJG(spherical_Y(l, m, HALFPI, 0._RD)))*X_1

      ! Finish

      return

   end function tidal_cbar

   !****

   function tidal_Gbar_1(ml, or_p, l, m, k) result(Gbar_1)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: Gbar_1

      real(RD) :: cbar
      real(RD) :: Y
      real(RD) :: X_1m1
      real(RD) :: X_1p1
      real(RD) :: X_2m1
      real(RD) :: X_2p1

      ! Evaluate the secular evolution coefficient Gbar^(1)_lmk

      cbar = tidal_cbar(ml, or_p, l, m, k)

      Y = REAL(spherical_Y(l, m, HALFPI, 0._RD))

      X_1m1 = hansen_X(or_p, -(l+1), -m-1, -k)
      X_1p1 = hansen_X(or_p, -(l+1), -m+1, -k)

      X_2m1 = hansen_X(or_p, -(l+2), -m-1, -k)
      X_2p1 = hansen_X(or_p, -(l+2), -m+1, -k)

      associate (e => or_p%e)
         Gbar_1 = cbar*Y* &
            (0.5_RD*(l+1)*(X_2m1 + X_2p1) + 0.5_RD*m*(X_2m1 - X_2p1) + &
            0.5_RD*m/(1._RD - e**2)*(X_1m1 - X_1p1))*sqrt(1._RD - e**2)/e
      end associate

      ! Finish

      return

   end function tidal_Gbar_1

   !****

   function tidal_Gbar_2(ml, or_p, l, m, k) result(Gbar_2)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: Gbar_2

      real(RD) :: cbar
      real(RD) :: Y
      real(RD) :: X_2m1
      real(RD) :: X_2p1
      real(RD) :: X_3

      ! Evaluate the secular evolution coefficient Gbar^(2)_lmk

      cbar = tidal_cbar(ml, or_p, l, m, k)

      Y = REAL(spherical_Y(l, m, HALFPI, 0._RD))

      X_2m1 = hansen_X(or_p, -(l+2), -m-1, -k)
      X_2p1 = hansen_X(or_p, -(l+2), -m+1, -k)

      X_3 = hansen_X(or_p, -(l+3), -m, -k)

      associate (e => or_p%e)
         Gbar_2 = -2._RD*cbar*Y* &
            (0.5_RD*(l+1)*e*(X_2m1 - X_2p1) + m*(1._RD - e**2)*X_3)/sqrt(1._RD - e**2)
      end associate

      ! Finish

      return

   end function tidal_Gbar_2

   !****

   function tidal_Gbar_3(ml, or_p, l, m, k) result(Gbar_3)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: Gbar_3

      real(RD) :: cbar
      real(RD) :: Y
      real(RD) :: X_1
      real(RD) :: X_2m1
      real(RD) :: X_2p1
      real(RD) :: X_3

      ! Evaluate the secular evolution coefficient Gbar^(3)_lmk

      cbar = tidal_cbar(ml, or_p, l, m, k)

      Y = REAL(spherical_Y(l, m, HALFPI, 0._RD))

      X_1 = hansen_X(or_p, -(l+1), -m, -k)

      X_2m1 = hansen_X(or_p, -(l+2), -m-1, -k)
      X_2p1 = hansen_X(or_p, -(l+2), -m+1, -k)

      X_3 = hansen_X(or_p, -(l+3), -m, -k)

      associate (e => or_p%e)
         Gbar_3 = -cbar*Y* &
            (0.5_RD*(l+1)*e*(X_2m1 - X_2p1) + m*(1._RD - e**2)*X_3 - m*X_1)*sqrt(1._RD - e**2)/e
      end associate

      ! Finish

      return

   end function tidal_Gbar_3

   !****

   function tidal_Gbar_4(ml, or_p, l, m, k) result(Gbar_4)

      class(model_t), intent(in)    :: ml
      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: l
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: Gbar_4

      real(RD) :: cbar
      real(RD) :: R_a

      ! Evaluate the secular evolution coefficient Gbar^(4)_lmk

      cbar = tidal_cbar(ml, or_p, l, m, k)

      R_a = tidal_R_a(ml, or_p)

      Gbar_4 = m*(2*l+1)/(4._RD*PI)*R_a**(2-l)*cbar**2

      ! Finish

      return

   end function tidal_Gbar_4

   !****

   function hansen_X (or_p, n, m, k) result(X)

      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: n
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: X

      real(RD) :: S

      ! Evaluate the Hansen coefficient X_nmk

      associate (e => or_p%e)

         if (e**2 > EPSILON(0._RD)) then

            S = MAX((1._RD - e)**(-n-2), (1._RD + e)**(-n-2))

            X = (1._RD - e**2)**(n+1.5_RD)/TWOPI*S*orbit_quad(hansen_X_f_, e, TOL)

         else

            if (m == k) then
               X = 1._RD
            else
               X = 0._RD
            endif

         endif

      end associate

      ! Finish

      return

   contains

      function hansen_X_f_(ua, Ma, e) result(f)

         real(RD), intent(in) :: ua
         real(RD), intent(in) :: Ma
         real(RD), intent(in) :: e
         real(RD)             :: f

         ! Set up the integrand

         f = cos(m*ua - k*Ma)/(S*(1._RD + e*cos(ua))**(n+2))

         ! Finish

         return

      end function hansen_X_f_

   end function hansen_X

   !****

   function hansen_X_RQ(or_p, n, m, k) result(X)

      type(orbit_par_t), intent(in) :: or_p
      integer, intent(in)           :: n
      integer, intent(in)           :: m
      integer, intent(in)           :: k
      real(RD)                      :: X

      real(RD) :: S

      ! Evaluate the Hansen coefficient X_nmk

      associate (e => or_p%e)

         if (e**2 > EPSILON(0._RD)) then

            S = MAX((1._RD - e)**(-n-2), (1._RD + e)**(-n-2))

            X = (1._RD - e**2)**(n+1.5_RD)/TWOPI*REAL(orbit_quad_RQ(hansen_X_f_, REAL(e, RQ), REAL(TOL, RQ)), RD)

         else

            if (m == k) then
               X = 1._RD
            else
               X = 0._RD
            endif

         endif

      end associate

      ! Finish

      return

   contains

      function hansen_X_f_(ua, Ma, e) result(f)

         real(RQ), intent(in) :: ua
         real(RQ), intent(in) :: Ma
         real(RQ), intent(in) :: e
         real(RQ)             :: f

         ! Set up the integrand

         f = cos(m*ua - k*Ma)/(S*(1._RQ + e*cos(ua))**(n+2))

         ! Finish

         return

      end function hansen_X_f_

   end function hansen_X_RQ

   !****

   function orbit_quad(f, e, tol) result(I)

      interface
         function f (ua, Ma, e)
            use forum_m, only: RD
            real(RD), intent(in) :: ua
            real(RD), intent(in) :: Ma
            real(RD), intent(in) :: e
            real(RD)             :: f
         end function f
      end interface
      real(RD), intent(in) :: e
      real(RD), intent(in) :: tol
      real(RD)             :: I

      integer, parameter :: N_MAX = 2**24

      integer  :: N
      real(RD) :: e_fac
      real(RD) :: S
      integer  :: j
      real(RD) :: ua
      real(RD) :: Ea
      real(RD) :: Ma
      real(RD) :: dI
      real(RD) :: dI_conv

      ! Perform "orbital quadrature" on the function f(ua, Ma, e, l, m,
      ! k). This involves calculating the integral I = int(f(ua),
      ! ua->0,2pi), where ua is the true anomaly.  Along with ua, the
      ! corresponding mean anomaly Ma(ua) is passed into f
      !
      ! This implementation assumes that f(ua) is an even function,
      ! scaled to order-unity

      ! Set up initial values

      N = 1

      I = PI*(f(0._RD, 0._RD, e) + f(PI, PI, e))/2

      ! Refine the quadrature by repeatedly doubling N

      e_fac = sqrt((1._RD - e)*(1._RD + e))

      refine_loop : do

         ! Update the value of the quadrature

         S = 0._RD

         ! Parallelization disabled for now to give reproducible results
         ! !$OMP PARALLEL DO REDUCTION(+:S) PRIVATE(ua,Ea,Ma) SCHEDULE(static, 4)
         update_loop : do j = 1, N

            ! Add contributions to the sum

            ua = PI*(2*j-1.5_RD)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

            ua = PI*(2*j-1.0_RD)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

            ua = PI*(2*j-0.5_RD)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

         end do update_loop

         dI = PI*S/(4*N) - 0.75_RD*I
         I = I + dI

         N = 4*N

         ! Check for convergence

         @:ASSERT(N <= N_MAX, 'too many iterations')

         dI_conv = MAX(tol, 2._RD*EPSILON(0._RD))

         if (abs(dI) < dI_conv) exit refine_loop

      end do refine_loop

      ! Double I (since we only integrate from 0 to pi)

      I = 2*I

      ! Finish

      return

   end function orbit_quad

   !****

   function orbit_quad_RQ(f, e, tol) result(I)

      interface
         function f (ua, Ma, e)
            integer, parameter   :: RQ = SELECTED_REAL_KIND(32)
            real(RQ), intent(in) :: ua
            real(RQ), intent(in) :: Ma
            real(RQ), intent(in) :: e
            real(RQ)             :: f
         end function f
      end interface
      real(RQ), intent(in) :: e
      real(RQ), intent(in) :: tol
      real(RQ)             :: I

      integer, parameter :: N_MAX = 2**24
      real(RQ), parameter :: PI = ACOS(-1._RQ)

      integer  :: N
      real(RQ) :: e_fac
      real(RQ) :: S
      integer  :: j
      real(RQ) :: ua
      real(RQ) :: Ea
      real(RQ) :: Ma
      real(RQ) :: dI
      real(RQ) :: dI_conv

      ! Perform "orbital quadrature" on the function f(ua, Ma, e, l, m,
      ! k). This involves calculating the integral I = int(f(ua),
      ! ua->0,2pi), where ua is the true anomaly.  Along with ua, the
      ! corresponding mean anomaly Ma(ua) is passed into f
      !
      ! This implementation assumes that f(ua) is an even function,
      ! scaled to order-unity

      ! Set up initial values

      N = 1

      I = PI*(f(0._RQ, 0._RQ, e) + f(PI, PI, e))/2

      ! Refine the quadrature by repeatedly doubling N

      e_fac = sqrt((1._RQ - e)*(1._RQ + e))

      refine_loop : do

         ! Update the value of the quadrature

         S = 0._RQ

         !$OMP PARALLEL DO REDUCTION(+:S) PRIVATE(ua,Ea,Ma) SCHEDULE(static, 4)
         update_loop : do j = 1, N

            ! Add contributions to the sum

            ua = PI*(2*j-1.5_RQ)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

            ua = PI*(2*j-1.0_RQ)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

            ua = PI*(2*j-0.5_RQ)/(2*N)
            Ea = atan2(e_fac*sin(ua), e + cos(ua))
            Ma = Ea - e*sin(Ea)
            S = S + f(ua, Ma, e)

         end do update_loop

         dI = PI*S/(4*N) - 0.75_RQ*I
         I = I + dI

         N = 4*N

         ! Check for convergence

         @:ASSERT(N <= N_MAX, 'too many iterations')

         dI_conv = MAX(tol, 2._RQ*EPSILON(0._RQ))

         if (abs(dI) < dI_conv) exit refine_loop

      end do refine_loop

      ! Double I (since we only integrate from 0 to pi)

      I = 2*I

      ! Finish

      return

   end function orbit_quad_RQ

end module tidal_coeff_m
