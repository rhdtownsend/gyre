! Module  : magnus_diff_m
! Purpose : difference equations (Magnus method)
!
! Copyright 2013-2015 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module magnus_diff_m

   ! Uses

   use forum_m, only: RD

   use blas_lapack_m
   use diff_m
   use eqns_m
   use ext_m
   use linalg_m
   use math_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: GL2_SCHEME = 1
   integer, parameter :: GL4_SCHEME = 2
   integer, parameter :: GL6_SCHEME = 3

   real(RD), parameter :: GL2_C_I(1) = [0.5_RD]

   real(RD), parameter :: GL4_C_I(2) = [ &
      0.5_RD-sqrt(3._RD)/6._RD, &
      0.5_RD+sqrt(3._RD)/6._RD]

   real(RD), parameter :: GL6_C_I(3) = [ &
      0.5_RD-sqrt(15._RD)/10._RD, &
      0.5_RD, &
      0.5_RD+sqrt(15._RD)/10._RD]

   #:for S in DTYPE_SUFFIXES

      ! Derived-type definitions

      type, extends(diff_${S}$) :: magnus_diff_${S}$
         private
         class(eqns_${S}$), allocatable :: eq
         real(RD)                       :: dx
         integer                        :: scheme
      contains
         private
         procedure, public :: build => build_${S}$_
         procedure         :: dOmega_GL2_${S}$_
         procedure         :: dOmega_GL4_${S}$_
         procedure         :: dOmega_GL6_${S}$_
      end type magnus_diff_${S}$

      ! Interfaces

      interface magnus_diff_${S}$
         module procedure magnus_diff_${S}$_
      end interface magnus_diff_${S}$

      ! Access specifiers

      public :: magnus_diff_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function magnus_diff_${S}$_(eq, pt_a, pt_b, scheme) result(df)

         class(eqns_${S}$), intent(in) :: eq
         type(point_t), intent(in)     :: pt_a
         type(point_t), intent(in)     :: pt_b
         character(*), intent(in)      :: scheme
         type(magnus_diff_${S}$)       :: df

         real(RD), allocatable      :: c_i(:)
         type(point_t), allocatable :: pt(:)

         @:ASSERT_DEBUG(pt_a%s == pt_b%s, 'segment mismatch')

         ! Construct the magnus_diff type

         select case (scheme)
         case ('GL2')
            df%scheme = GL2_SCHEME
            c_i = GL2_C_I
         case ('GL4')
            df%scheme = GL4_SCHEME
            c_i = GL4_C_I
         case ('GL6')
            df%scheme = GL6_SCHEME
            c_i = GL6_C_I
         case default
            @:ABORT('invalid scheme')
         end select

         df%dx = pt_b%x - pt_a%x

         allocate(pt(SIZE(c_i)))

         pt%s = pt_a%s
         pt%x = pt_a%x + c_i*df%dx

         allocate(df%eq, SOURCE=eq)

         call df%eq%stencil(pt)

         df%n_e = eq%n_e

         ! Finish

         return

      end function magnus_diff_${S}$_

      !****

      subroutine build_${S}$_(this, st, E_l, E_r, scl)

         class(magnus_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$, intent(out)                   :: E_l(:,:)
         ${T}$, intent(out)                   :: E_r(:,:)
         type(ext_${S}$), intent(out)         :: scl

         logical, parameter :: UPWIND = .TRUE.

         ${T}$       :: dOmega(this%n_e,this%n_e)
         complex(RD) :: lambda(this%n_e)
         complex(RD) :: V_l(this%n_e,this%n_e)
         complex(RD) :: V_r(this%n_e,this%n_e)
         integer     :: i
         complex(RD) :: V_pos(this%n_e,this%n_e)
         complex(RD) :: V_neg(this%n_e,this%n_e)
         complex(RD) :: E_l_(this%n_e,this%n_e)
         complex(RD) :: E_r_(this%n_e,this%n_e)

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         ! Build the difference equations

         ! Evaluate the Magnus slope matrix

         select case (this%scheme)
         case (GL2_SCHEME)
            dOmega = this%dOmega_GL2_${S}$_(st)
         case (GL4_SCHEME)
            dOmega = this%dOmega_GL4_${S}$_(st)
         case (GL6_SCHEME)
            dOmega = this%dOmega_GL6_${S}$_(st)
         case default
            @:ABORT('invalid scheme')
         end select

         ! Decompose it

         call eigen_decompose(dOmega, lambda, V_l, V_r)

         ! Build the difference equations

         if (UPWIND) then

            ! Use 'upwinding' for stability

            do i = 1, this%n_e
               call XCOPY_inplace(this%n_e, V_r(1,i), 1, V_pos(1,i), 1)
               if (REAL(lambda(i)) >= 0._RD) then
                  call XSCAL_inplace(this%n_e, exp(-lambda(i)*this%dx), V_pos(1,i), 1)
               endif
            end do

            do i = 1, this%n_e
               call XCOPY_inplace(this%n_e, V_r(1,i), 1, V_neg(1,i), 1)
               if (REAL(lambda(i)) < 0._RD) then
                  call XSCAL_inplace(this%n_e, exp(lambda(i)*this%dx), V_neg(1,i), 1)
               endif
            end do

            call XGEMM_inplace('N', 'N', this%n_e, this%n_e, this%n_e, CMPLX(-1._RD, KIND=RD), &
               V_neg(1,1), this%n_e, V_l(1,1), this%n_e, CMPLX(0._RD, KIND=RD), &
               E_l_(1,1), this%n_e)

            call XGEMM_inplace('N', 'N', this%n_e, this%n_e, this%n_e, CMPLX(1._RD, KIND=RD), &
               V_pos(1,1), this%n_e, V_l(1,1), this%n_e, CMPLX(0._RD, KIND=RD), &
               E_r_(1,1), this%n_e)

            scl = exp(ext_${S}$(SUM(lambda, MASK=REAL(lambda) >= 0._RD)*this%dx))

         else

            ! Use the [TowTei2013] expression (their eqns. 4, 16, 18)

            do i = 1, this%n_e
               call XCOPY_inplace(this%n_e, V_r(1,i), 1, V_neg(1,i), 1)
               call XSCAL_inplace(this%n_e, exp(lambda(i)*this%dx), V_neg(1,i), 1)
            end do

            call XGEMM_inplace('N', 'N', this%n_e, this%n_e, this%n_e, CMPLX(1._RD, KIND=RD), &
               V_neg(1,1), this%n_e, V_l(1,1), this%n_e, CMPLX(0._RD, KIND=RD), &
               E_l_(1,1), this%n_e)

            do i = 1, this%n_e
               E_r_(:,i) = 0._RD
               E_r_(i,i) = -1._RD
            end do

            scl = ext_${S}$(1._RD)

         endif

         #:if T == 'real(RD)'
            E_l = REAL(E_l_)
            E_r = REAL(E_r_)
         #:elif T == 'complex(RD)'
            E_l = E_l_
            E_r = E_r_
         #:else
            #:stop f'invalid type {T}'
         #:endif

         ! Finish

         return

      end subroutine build_${S}$_

      !****

      function dOmega_GL2_${S}$_(this, st) result(dOmega)

         class(magnus_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$                                :: dOmega(this%n_e,this%n_e)

         ${T}$ :: A(this%n_e,this%n_e,1)

         ! Evaluate the GL2 Magnus slope matrix

         ! Calculate the RHS matrix

         A(:,:,1) = this%eq%A(1, st)

         ! Set up the slope matrix

         dOmega = A(:,:,1)

         ! Finish

         return

      end function dOmega_GL2_${S}$_

      !****

      function dOmega_GL4_${S}$_(this, st) result(dOmega)

         class(magnus_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$                                :: dOmega(this%n_e,this%n_e)

         ${T}$ :: A(this%n_e,this%n_e,2)
         ${T}$ :: dalpha(this%n_e,this%n_e,2)

         ! Evaluate the GL4 Magnus slope matrix

         ! Calculate the RHS matrices

         A(:,:,1) = this%eq%A(1, st)
         A(:,:,2) = this%eq%A(2, st)

         ! Set up the Magnus slope matrix (Blanes et al. 2009, eqns. 243
         ! and 253; note that the 12 in the denominator of their expression
         ! for alpha_2 is erroneous)

         dalpha(:,:,1) = 0.5_RD*(A(:,:,1) + A(:,:,2))
         dalpha(:,:,2) = sqrt(3._RD)*(A(:,:,2) - A(:,:,1))

         dOmega = dalpha(:,:,1) - this%dx*commutator(dalpha(:,:,1), dalpha(:,:,2))/12._RD

         ! Finish

         return

      end function dOmega_GL4_${S}$_

      !****

      function dOmega_GL6_${S}$_(this, st) result(dOmega)

         class(magnus_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$                                :: dOmega(this%n_e,this%n_e)

         ${T}$ :: A(this%n_e,this%n_e,3)
         ${T}$ :: dalpha(this%n_e,this%n_e,3)
         ${T}$ :: dC(this%n_e,this%n_e,2)

         ! Evaluate the GL6 Magnus slope matrix

         ! Calculate the RHS matrices

         A(:,:,1) = this%eq%A(1, st)
         A(:,:,2) = this%eq%A(2, st)
         A(:,:,3) = this%eq%A(3, st)

         ! Set up the Magnus slope matrix (Blanes et al. 2009, eqns. 251
         ! and 257)

         dalpha(:,:,1) = A(:,:,2)
         dalpha(:,:,2) = sqrt(15._RD)*(A(:,:,3) - A(:,:,1))/3
         dalpha(:,:,3) = 10*(A(:,:,3) - 2*A(:,:,2) + A(:,:,1))/3

         dC(:,:,1) = this%dx*commutator(dalpha(:,:,1), dalpha(:,:,2))
         dC(:,:,2) = -this%dx*commutator(dalpha(:,:,1), 2*dalpha(:,:,3)+dC(:,:,1))/60

         dOmega = dalpha(:,:,1) + dalpha(:,:,3)/12 + &
            this%dx*commutator(-20*dalpha(:,:,1)-dalpha(:,:,3)+dC(:,:,1), dalpha(:,:,2)+dC(:,:,2))/240

         ! Finish

         return

      end function dOmega_GL6_${S}$_

   #:endfor

end module magnus_diff_m
