! Module  : trapz_diff_m
! Purpose : difference equations (quasi-trapezoidal)
!
! Copyright 2013-2015 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module trapz_diff_m

   ! Uses

   use forum_m, only: RD

   use diff_m
   use eqns_m
   use ext_m
   use linalg_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   #:for S in DTYPE_SUFFIXES

      ! Derived-type definitions

      type, extends(diff_${S}$) :: trapz_diff_${S}$
         private
         class(eqns_${S}$), allocatable :: eq
         real(RD), allocatable          :: w(:)
         real(RD)                       :: dx
         real(RD)                       :: x_m
      contains
         private
         procedure, public :: build => build_${S}$_
      end type trapz_diff_${S}$

      ! Interfaces

      interface trapz_diff_${S}$
         module procedure trapz_diff_${S}$_
      end interface trapz_diff_${S}$

      ! Access specifiers

      public :: trapz_diff_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function trapz_diff_${S}$_(eq, pt_a, pt_b, w) result(df)

         class(eqns_${S}$), intent(in) :: eq
         type(point_t), intent(in)     :: pt_a
         type(point_t), intent(in)     :: pt_b
         real(RD), intent(in)          :: w(:)
         type(trapz_diff_${S}$)        :: df

         @:ASSERT_DEBUG(pt_a%s == pt_b%s, 'segment mismatch')

         @:CHECK_BOUNDS(SIZE(w), eq%n_e)

         ! Construct the trapz_diff_t

         df%w = w

         df%dx = pt_b%x - pt_a%x
         df%x_m = 0.5_RD*(pt_a%x + pt_b%x)

         allocate(df%eq, SOURCE=eq)

         call df%eq%stencil([pt_a,pt_b])

         df%n_e = eq%n_e

         ! Finish

         return

      end function trapz_diff_${S}$_

      !****

      subroutine build_${S}$_(this, st, E_l, E_r, scl)

         class(trapz_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)      :: st
         ${T}$, intent(out)                  :: E_l(:,:)
         ${T}$, intent(out)                  :: E_r(:,:)
         type(ext_${S}$), intent(out)        :: scl

         ${T}$ :: xA(this%n_e,this%n_e,2)

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         ! Evaluate the RHS matrix

         xA(:,:,1) = this%eq%xA(1, st)
         xA(:,:,2) = this%eq%xA(2, st)

         ! Build the difference equations

         E_l = -this%x_m*identity_matrix(this%n_e) - this%dx*MATMUL(diagonal_matrix(1._RD-this%w), xA(:,:,1))
         E_r =  this%x_m*identity_matrix(this%n_e) - this%dx*MATMUL(diagonal_matrix(      this%w), xA(:,:,2))

         scl = ext_${S}$(1._RD)

         ! Finish

      end subroutine build_${S}$_

   #:endfor

end module trapz_diff_m
