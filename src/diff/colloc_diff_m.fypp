! Module  : colloc_diff_m
! Purpose : difference equations (local collocation)
!
! Copyright 2013-2015 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module colloc_diff_m

   ! Uses

   use forum_m, only: RD

   use diff_m
   use eqns_m
   use ext_m
   use linalg_m
   use math_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: GL2_SCHEME = 1
   integer, parameter :: GL4_SCHEME = 2
   integer, parameter :: GL6_SCHEME = 3

   real(RD), parameter :: GL2_C_I(1) = [0.5_RD]

   real(RD), parameter :: GL4_A_IJ(2,2) = RESHAPE([ &
      0.25_RD, &
      0.25_RD+sqrt(3._RD)/6._RD, &
      0.25_RD-sqrt(3._RD)/6._RD, &
      0.25_RD], &
      [2,2])
   real(RD), parameter :: GL4_B_I(2) = [ &
      0.5_RD, &
      0.5_RD]
   real(RD), parameter :: GL4_C_I(2) = [ &
      0.5_RD-sqrt(3._RD)/6._RD, &
      0.5_RD+sqrt(3._RD)/6._RD]

   real(RD), parameter :: GL6_A_IJ(3,3) = RESHAPE([ &
      5._RD/36._RD, &
      5._RD/36._RD+sqrt(15._RD)/24._RD, &
      5._RD/36._RD+sqrt(15._RD)/30._RD, &
      2._RD/9._RD-sqrt(15._RD)/15._RD, &
      2._RD/9._RD, &
      2._RD/9._RD+sqrt(15._RD)/15._RD, &
      5._RD/36._RD-sqrt(15._RD)/30._RD, &
      5._RD/36._RD-sqrt(15._RD)/24._RD, &
      5._RD/36._RD], &
      [3,3])
   real(RD), parameter :: GL6_B_I(3) = [ &
      5._RD/18._RD, &
      4._RD/9._RD, &
      5._RD/18._RD]
   real(RD), parameter :: GL6_C_I(3) = [ &
      0.5_RD-sqrt(15._RD)/10._RD, &
      0.5_RD, &
      0.5_RD+sqrt(15._RD)/10._RD]

   #:for S in DTYPE_SUFFIXES

      ! Derived-type definitions

      type, extends(diff_${S}$) :: colloc_diff_${S}$
         private
         class(eqns_${S}$), allocatable :: eq
         real(RD)                       :: dx
         integer                        :: n_s
         integer                        :: scheme
         logical                        :: reverse
      contains
         private
         procedure, public :: build => build_${S}$_
         procedure         :: build_GL2_${S}$_
         procedure         :: build_GL4_${S}$_
         procedure         :: build_GL6_${S}$_
         procedure         :: build_irk_${S}$_
      end type colloc_diff_${S}$

      ! Interfaces

      interface colloc_diff_${S}$
         module procedure colloc_diff_${S}$_
      end interface colloc_diff_${S}$

      ! Access specifiers

      public :: colloc_diff_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function colloc_diff_${S}$_(eq, pt_a, pt_b, scheme) result(df)

         class(eqns_${S}$), intent(in) :: eq
         type(point_t), intent(in)     :: pt_a
         type(point_t), intent(in)     :: pt_b
         character(*), intent(in)      :: scheme
         type(colloc_diff_${S}$)       :: df

         real(RD), allocatable      :: c_i(:)
         type(point_t), allocatable :: pt(:)

         @:ASSERT_DEBUG(pt_a%s == pt_b%s, 'segment mismatch')

         ! Construct the colloc_diff type

         select case (scheme)
         case ('GL2')
            df%scheme = GL2_SCHEME
            df%n_s = 1
            c_i = GL2_C_I
         case ('GL4')
            df%scheme = GL4_SCHEME
            df%n_s = 2
            c_i = GL4_C_I
         case ('GL6')
            df%scheme = GL6_SCHEME
            df%n_s = 3
            c_i = GL6_C_I
         case default
            @:ABORT('invalid scheme')
         end select

         df%reverse = pt_a%x >= 0.5_RD

         allocate(pt(df%n_s))

         pt%s = pt_a%s

         if (df%reverse) then
            df%dx = pt_a%x - pt_b%x
            pt%x = pt_b%x + c_i*df%dx
         else
            df%dx = pt_b%x - pt_a%x
            pt%x = pt_a%x + c_i*df%dx
         endif

         allocate(df%eq, SOURCE=eq)

         call df%eq%stencil(pt)

         df%n_e = eq%n_e

         ! Finish

         return

      end function colloc_diff_${S}$_

      !****

      subroutine build_${S}$_(this, st, E_l, E_r, scl)

         class(colloc_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$, intent(out)                   :: E_l(:,:)
         ${T}$, intent(out)                   :: E_r(:,:)
         type(ext_${S}$), intent(out)         :: scl

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         ! Build the difference equations

         select case (this%scheme)
         case (GL2_SCHEME)
            call this%build_GL2_${S}$_(st, E_l, E_r, scl)
         case (GL4_SCHEME)
            call this%build_GL4_${S}$_(st, E_l, E_r, scl)
         case (GL6_SCHEME)
            call this%build_GL6_${S}$_(st, E_l, E_r, scl)
         case default
            @:ABORT('invalid scheme')
         end select

         ! Finish

         return

      end subroutine build_${S}$_

      !****

      subroutine build_GL2_${S}$_(this, st, E_l, E_r, scl)

         class(colloc_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$, intent(out)                   :: E_l(:,:)
         ${T}$, intent(out)                   :: E_r(:,:)
         type(ext_${S}$), intent(out)         :: scl

         ${T}$ :: A(this%n_e,this%n_e)

         ! Evaluate the RHS matrix

         A = this%eq%A(1, st)

         ! Build the GL2 difference equations

         if (this%reverse) then
            E_l = 0.5_RD*this%dx*A - identity_matrix(this%n_e)
            E_r = 0.5_RD*this%dx*A + identity_matrix(this%n_e)
         else
            E_l = 0.5_RD*this%dx*A + identity_matrix(this%n_e)
            E_r = 0.5_RD*this%dx*A - identity_matrix(this%n_e)
         endif

         scl = ext_${S}$(1._RD)

         ! Finish

      end subroutine build_GL2_${S}$_

      !****

      subroutine build_GL4_${S}$_(this, st, E_l, E_r, scl)

         class(colloc_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$, intent(out)                   :: E_l(:,:)
         ${T}$, intent(out)                   :: E_r(:,:)
         type(ext_${S}$), intent(out)         :: scl

         ! Build the GL4 difference equations

         if (this%reverse) then
            call this%build_irk_${S}$_(st, GL4_A_IJ, GL4_B_I, E_r, E_l)
         else
            call this%build_irk_${S}$_(st, GL4_A_IJ, GL4_B_I, E_l, E_r)
         endif

         scl = ext_${S}$(1._RD)

         ! Finish

      end subroutine build_GL4_${S}$_

      !****

      subroutine build_GL6_${S}$_(this, st, E_l, E_r, scl)

         class(colloc_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         ${T}$, intent(out)                   :: E_l(:,:)
         ${T}$, intent(out)                   :: E_r(:,:)
         type(ext_${S}$), intent(out)         :: scl

         ! Build the GL6 difference equations

         if (this%reverse) then
            call this%build_irk_${S}$_(st, GL6_A_IJ, GL6_B_I, E_r, E_l)
         else
            call this%build_irk_${S}$_(st, GL6_A_IJ, GL6_B_I, E_l, E_r)
         endif

         scl = ext_${S}$(1._RD)

         ! Finish

      end subroutine build_GL6_${S}$_

      !****

      subroutine build_irk_${S}$_(this, st, a_ij, b_i, E_a, E_b)

         class(colloc_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)       :: st
         real(RD), intent(in)                 :: a_ij(:,:)
         real(RD), intent(in)                 :: b_i(:)
         ${T}$, intent(out)                   :: E_a(:,:)
         ${T}$, intent(out)                   :: E_b(:,:)

         ${T}$   :: A(this%n_e,this%n_e,this%n_s)
         ${T}$   :: M(this%n_s*this%n_e,this%n_s*this%n_e)
         integer :: i
         integer :: i_a
         integer :: i_b
         integer :: j
         integer :: j_a
         integer :: j_b
         ${T}$   :: B(this%n_s*this%n_e,this%n_e)
         ${T}$   :: X(this%n_s*this%n_e,this%n_e)
         ${T}$   :: K(this%n_e,this%n_e,this%n_s)

         @:CHECK_BOUNDS(SIZE(a_ij, 1), this%n_s)
         @:CHECK_BOUNDS(SIZE(a_ij, 2), this%n_s)

         @:CHECK_BOUNDS(SIZE(b_i), this%n_s)

         ! Build the difference equations using an n_s-step implicit Runge
         ! Kutta (IRK) scheme with Butcher tableaux coefficients a_ij and
         ! b_i (c_i has already been used in the constructor)

         ! Evaluate the RHS matrices

         do i = 1, this%n_s
            A(:,:,i) = this%eq%A(i, st)
         end do

         ! Calculate the intermediate-state matrices K

         ! First, set up the linear system

         do i = 1, this%n_s

            i_a = (i-1)*this%n_e + 1
            i_b = (i-1)*this%n_e + this%n_e

            do j = 1, this%n_s

               j_a = (j-1)*this%n_e + 1
               j_b = (j-1)*this%n_e + this%n_e

               M(i_a:i_b,j_a:j_b) = -this%dx*a_ij(i,j)*A(:,:,i)

               if (i == j) then
                  M(i_a:i_b,j_a:j_b) = M(i_a:i_b,j_a:j_b) + identity_matrix(this%n_e)
               endif

            end do

            B(i_a:i_b,:) = A(:,:,i)

         end do

         ! Solve the linear system

         X = linear_solve(M, B)

         ! Extract the K matrices

         do i = 1, this%n_s

            i_a = (i-1)*this%n_e + 1
            i_b = (i-1)*this%n_e + this%n_e

            K(:,:,i) = X(i_a:i_b,:)

         end do

         ! Build the difference equations

         E_a = identity_matrix(this%n_e)

         do i = 1, this%n_s
            E_a = E_a + this%dx*b_i(i)*K(:,:,i)
         enddo

         E_b = -identity_matrix(this%n_e)

         ! Finish

         return

      end subroutine build_irk_${S}$_

   #:endfor

end module colloc_diff_m
