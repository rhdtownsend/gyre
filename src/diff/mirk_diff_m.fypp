! Module  : mirk_diff_m
! Purpose : difference equations (mono-implicit Runge-Kutta)
!
! Copyright 2017 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module mirk_diff_m

   ! Uses

   use forum_m, only: RD

   use diff_m
   use eqns_m
   use ext_m
   use linalg_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   real(RD), parameter :: C_I(3) = [0._RD,0.5_RD,1._RD]

   #:for S in DTYPE_SUFFIXES

      ! Derived-type definitions

      type, extends(diff_${S}$) :: mirk_diff_${S}$
         private
         class(eqns_${S}$), allocatable :: eq
         real(RD)                       :: dx
         logical                        :: origin
      contains
         private
         procedure, public :: build => build_${S}$_
      end type mirk_diff_${S}$

      ! Interfaces

      interface mirk_diff_${S}$
         module procedure mirk_diff_${S}$_
      end interface mirk_diff_${S}$

      ! Access specifiers

      public :: mirk_diff_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function mirk_diff_${S}$_(eq, pt_a, pt_b) result(df)

         class(eqns_${S}$), intent(in) :: eq
         type(point_t), intent(in)     :: pt_a
         type(point_t), intent(in)     :: pt_b
         type(mirk_diff_${S}$)         :: df

         type(point_t), allocatable :: pt(:)

         @:ASSERT_DEBUG(pt_a%s == pt_b%s, 'segment mismatch')

         ! Construct the mirk_diff_t

         df%dx = pt_b%x - pt_a%x

         allocate(pt(SIZE(C_I)))

         pt%s = pt_a%s
         pt%x = pt_a%x + C_I*df%dx

         allocate(df%eq, SOURCE=eq)

         call df%eq%stencil(pt)

         df%origin = pt_a%x == 0._RD

         df%n_e = eq%n_e

         ! Finish

         return

      end function mirk_diff_${S}$_

      !****

      subroutine build_${S}$_(this, st, E_l, E_r, scl)

         class(mirk_diff_${S}$), intent(in) :: this
         class(state_${S}$), intent(in)     :: st
         ${T}$, intent(out)                 :: E_l(:,:)
         ${T}$, intent(out)                 :: E_r(:,:)
         type(ext_${S}$), intent(out)       :: scl

         ${T}$ :: A(this%n_e,this%n_e,3)

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         ! Build the difference equations

         if (this%origin) then

            ! If we're at the origin, fudge things to avoid evaluating A there

            E_l = -identity_matrix(this%n_e)
            E_r =  identity_matrix(this%n_e)

            scl = ext_${S}$(1._RD)

         else

            ! Evaluate the RHS matrices

            A(:,:,1) = this%eq%A(1, st)
            A(:,:,2) = this%eq%A(2, st)
            A(:,:,3) = this%eq%A(3, st)

            ! Build the difference equations

            E_l = -identity_matrix(this%n_e) - this%dx*A(:,:,1)/6._RD - &
               this%dx*A(:,:,2)/3._RD - this%dx**2*MATMUL(A(:,:,2), A(:,:,1))/12._RD
            E_r =  identity_matrix(this%n_e) - this%dx*A(:,:,3)/6._RD - &
               this%dx*A(:,:,2)/3._RD + this%dx**2*MATMUL(A(:,:,2), A(:,:,3))/12._RD

            scl = ext_${S}$(1._RD)

         endif

         ! Finish

      end subroutine build_${S}$_

   #:endfor

end module mirk_diff_m
