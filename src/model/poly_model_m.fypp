! Module  : poly_model_m
! Purpose : stellar polytropic model
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module poly_model_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use cubic_interp_m
   use grid_m
   use interp_m
   use linear_interp_m
   use math_m
   use model_m
   use point_m

   use ISO_FORTRAN_ENV
   use IEEE_ARITHMETIC

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(model_t) :: poly_model_t
      private
      type(grid_t)                  :: gr
      class(interp_rt), allocatable :: in_theta(:)
      class(interp_rt), allocatable :: in_dtheta(:)
      real(RD), allocatable         :: n_poly(:)
      real(RD), allocatable         :: mu_i(:)
      real(RD), allocatable         :: v_i(:)
      real(RD), allocatable         :: t(:)
      real(RD), allocatable         :: B(:)
      real(RD)                      :: mu_s
      real(RD)                      :: z_s
      real(RD)                      :: Gamma_1
      real(RD)                      :: Omega_rot
      integer                       :: s_i
      integer                       :: s_o
   contains
      private
      procedure, public :: coeff
      procedure         :: coeff_V_2_
      procedure         :: coeff_As_
      procedure         :: coeff_U_
      procedure         :: coeff_c_1_
      procedure, public :: coeff_U_D
      procedure, public :: dcoeff
      procedure         :: dcoeff_V_2_
      procedure         :: dcoeff_As_
      procedure         :: dcoeff_U_
      procedure         :: dcoeff_c_1_
      procedure         :: mu_
      procedure, public :: is_defined
      procedure, public :: is_vacuum
      procedure, public :: Delta_p
      procedure, public :: Delta_g
      procedure, public :: grid
   end type poly_model_t

   ! Interfaces

   interface poly_model_t
      module procedure poly_model_t_
   end interface poly_model_t

   ! Access specifiers

   public :: poly_model_t

   ! Default access

   private

contains

   function poly_model_t_(z, theta, dtheta, n_poly, Delta_b, Gamma_1, Omega_rot, interp_type) result(ml)

      real(RD), intent(in)     :: z(:)
      real(RD), intent(in)     :: theta(:)
      real(RD), intent(in)     :: dtheta(:)
      real(RD), intent(in)     :: n_poly(:)
      real(RD), intent(in)     :: Delta_b(:)
      real(RD), intent(in)     :: Gamma_1
      real(RD), intent(in)     :: Omega_rot
      character(*), intent(in) :: interp_type
      type(poly_model_t)       :: ml

      integer  :: n_p
      real(RD) :: x(SIZE(z))
      integer  :: j_i
      integer  :: j_o
      integer  :: j_i_prev
      integer  :: j_o_prev
      integer  :: s
      integer  :: i
      real(RD) :: v_o_prev
      real(RD) :: d2theta(SIZE(z))

      @:CHECK_BOUNDS(SIZE(theta), SIZE(z))
      @:CHECK_BOUNDS(SIZE(dtheta), SIZE(z))

      @:CHECK_BOUNDS(SIZE(Delta_b), SIZE(n_poly)-1)

      ! Construct the poly_model_t from the Lane-Emden solutions theta,
      ! dtheta/dz. Per-segment polytropic indices are supplied in n_poly,
      ! and segment-boundary density jumps in Delta_b

      ! Create the grid

      n_p = SIZE(z)

      ml%z_s = z(n_p)

      x = z/ml%z_s

      ml%gr = grid_t(x)

      ml%s_i = ml%gr%s_i()
      ml%s_o = ml%gr%s_o()

      @:CHECK_BOUNDS(SIZE(n_poly), ml%s_o-ml%s_i+1)

      ! Allocate arrays

      select case(interp_type)
      case('LINEAR')
         allocate(linear_interp_rt::ml%in_theta(ml%s_i:ml%s_o))
         allocate(linear_interp_rt::ml%in_dtheta(ml%s_i:ml%s_o))
      case('CUBIC')
         allocate(cubic_interp_rt::ml%in_theta(ml%s_i:ml%s_o))
         allocate(cubic_interp_rt::ml%in_dtheta(ml%s_i:ml%s_o))
      case default
         @:ABORT('invalid interp_type')
      end select

      allocate(ml%n_poly(ml%s_i:ml%s_o))
      allocate(ml%mu_i(ml%s_i:ml%s_o))
      allocate(ml%v_i(ml%s_i:ml%s_o))
      allocate(ml%t(ml%s_i:ml%s_o))
      allocate(ml%B(ml%s_i:ml%s_o))

      ml%n_poly = n_poly

      ! Set up per-segment mu_i, v_i, t and B data

      ml%mu_i(ml%s_i) = 0._RD
      ml%v_i(ml%s_i) = 0._RD
      ml%t(ml%s_i) = 1._RD
      ml%B(ml%s_i) = 1._RD

      j_i = ml%gr%j_s_i(ml%s_i)
      j_o = ml%gr%j_s_o(ml%s_i)

      seg_data_loop : do s = ml%s_i+1, ml%s_o

         j_i_prev = j_i
         j_o_prev = j_o

         j_i = ml%gr%j_s_i(s)
         j_o = ml%gr%j_s_o(s)

         i = s - ml%s_i + 1

         v_o_prev = z(j_o_prev)**2*dtheta(j_o_prev)

         ml%mu_i(s) = ml%mu_i(s-1) - (v_o_prev - ml%v_i(s-1))*ml%t(s-1)/ml%B(s-1)

         ml%t(s) = ml%t(s-1)*exp(ml%n_poly(s-1)*log(theta(j_o_prev)) + Delta_b(i-1))

         ml%v_i(s) = z(j_i)**2*dtheta(j_i)

         ml%B(s) = (dtheta(j_i)/dtheta(j_o_prev))*(ml%t(s)/ml%t(s-1))*ml%B(s-1)

      end do seg_data_loop

      v_o_prev = z(j_o)**2*dtheta(j_o)

      ml%mu_s = ml%mu_i(s-1) - (v_o_prev - ml%v_i(s-1))*ml%t(s-1)/ml%B(s-1)

      ! Set up per-segment interpolants

      seg_spline_loop : do s = ml%s_i, ml%s_o

         j_i = ml%gr%j_s_i(s)
         j_o = ml%gr%j_s_o(s)

         select type(in => ml%in_theta(s))
         type is (linear_interp_rt)
            in = linear_interp_rt(x(j_i:j_o), theta(j_i:j_o))
         type is (cubic_interp_rt)
            in = cubic_interp_rt(x(j_i:j_o), theta(j_i:j_o), dtheta(j_i:j_o)*ml%z_s)
         end select

         select type(in => ml%in_dtheta(s))
         type is (linear_interp_rt)
            in = linear_interp_rt(x(j_i:j_o), dtheta(j_i:j_o))
         type is (cubic_interp_rt)
            if (ml%n_poly(s) /= 0._RD) then
               where (z(j_i:j_o) /= 0._RD)
                  d2theta(j_i:j_o) = -2._RD*dtheta(j_i:j_o)/z(j_i:j_o) - ml%B(s)*pow(theta(j_i:j_o), ml%n_poly(s))
               elsewhere
                  d2theta(j_i:j_o) = -1._RD/3._RD
               end where
            else
               d2theta(j_i:j_o) = -1._RD/3._RD
            end if
            in = cubic_interp_rt(x(j_i:j_o), dtheta(j_i:j_o), d2theta(j_i:j_o)*ml%z_s)
         end select

      end do seg_spline_loop

      ! Other initializations

      ml%Gamma_1 = Gamma_1
      ml%Omega_rot = Omega_rot

      ! Finish

      return

   end function poly_model_t_

   !****

   function coeff (this, i, pt)

      class(poly_model_t), intent(in) :: this
      integer, intent(in)             :: i
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'Invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'Undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'Invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         coeff = this%coeff_V_2_(pt)
      case (I_AS)
         coeff = this%coeff_As_(pt)
      case (I_U)
         coeff = this%coeff_U_(pt)
      case (I_C_1)
         coeff = this%coeff_c_1_(pt)
      case (I_GAMMA_1)
         coeff = this%Gamma_1
      case (I_UPS_T)
         coeff = 1._RD
      case (I_NABLA_AD)
         coeff = 0.4_RD
      case (I_OMEGA_ROT)
         coeff = this%Omega_rot
      end select

      ! Finish

      return

   end function coeff

   !****

   function coeff_V_2_(this, pt) result(coeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the V_2 coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         call this%in_theta(pt%s)%eval_f(pt%x, theta)
         call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

         if (theta /= 0._RD) then
            coeff = -(this%n_poly(pt%s) + 1._RD)*this%z_s**2*dtheta/(theta*z)
         else
            coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)
         endif

      else

         coeff = (this%n_poly(pt%s) + 1._RD)*this%z_s**2/3._RD

      endif

      ! Finish

      return

   end function coeff_V_2_

   !****

   function coeff_As_(this, pt) result(coeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the As coefficient

      z = pt%x*this%z_s

      call this%in_theta(pt%s)%eval_f(pt%x, theta)
      call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

      if (theta /= 0._RD) then
         coeff = -(this%n_poly(pt%s) + 1._RD)*z*dtheta/theta * &
            (this%n_poly(pt%s)/(this%n_poly(pt%s) + 1._RD) - 1._RD/this%Gamma_1)
      else
         coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)
      endif

      ! Finish

      return

   end function coeff_As_

   !****

   function coeff_U_(this, pt) result(coeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      real(RD) :: z
      real(RD) :: theta

      ! Evaluate the U coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         call this%in_theta(pt%s)%eval_f(pt%x, theta)

         if (this%n_poly(pt%s) /= 0._RD) then
            coeff = z**3*this%t(pt%s)*pow(theta, this%n_poly(pt%s))/this%mu_(pt)
         else
            coeff = z**3*this%t(pt%s)/this%mu_(pt)
         endif

      else

         coeff = 3._RD

      endif

      ! Finish

      return

   end function coeff_U_

   !****

   function coeff_c_1_(this, pt) result(coeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      ! Evaluate the c_1 coefficient

      if (pt%x /= 0._RD) then

         coeff = pt%x**3/(this%mu_(pt)/this%mu_s)

      else

         coeff = 3._RD*this%mu_s/this%z_s**3

      endif

      ! Finish

      return

   end function coeff_c_1_

   !****

   function coeff_U_D(this, pt) result(coeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the U_D = U*dlnrho/dlnr coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         call this%in_theta(pt%s)%eval_f(pt%x, theta)
         call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

         if (this%n_poly(pt%s) == 0._RD) then

            coeff = 0._RD

         elseif(this%n_poly(pt%s) == 1._RD) then

            coeff = this%n_poly(pt%s)*this%t(pt%s)*z**4 * &
               dtheta/this%mu_(pt)

         else

            coeff = this%n_poly(pt%s)*this%t(pt%s)*z**4 * &
               pow(theta, this%n_poly(pt%s)-1._RD)*dtheta/this%mu_(pt)

         end if

      else

         coeff = 0._RD

      end if

      ! Finish

      return

   end function coeff_U_D

   !****

   function dcoeff (this, i, pt)

      class(poly_model_t), intent(in) :: this
      integer, intent(in)             :: i
      type(point_t), intent(in)       :: pt
      real(RD)                        :: dcoeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'Invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'Undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'Invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         dcoeff = this%dcoeff_V_2_(pt)
      case (I_AS)
         dcoeff = this%dcoeff_As_(pt)
      case (I_U)
         dcoeff = this%dcoeff_U_(pt)
      case (I_C_1)
         dcoeff = this%dcoeff_c_1_(pt)
      case (I_GAMMA_1)
         dcoeff = 0._RD
      case (I_UPS_T)
         dcoeff = 0._RD
      case (I_NABLA_AD)
         dcoeff = 0._RD
      case (I_OMEGA_ROT)
         dcoeff = 0._RD
      end select

      ! Finish

      return

   end function dcoeff

   !****

   function dcoeff_V_2_(this, pt) result(dcoeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: dcoeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the logarithmic derivative of the V_2 coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         call this%in_theta(pt%s)%eval_f(pt%x, theta)
         call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

         if (this%n_poly(pt%s) /= 0._RD) then
            if (theta /= 0._RD) then
               dcoeff = -3._RD - z*dtheta/theta - this%B(pt%s)*z*pow(theta, this%n_poly(pt%s))/dtheta
            else
               dcoeff = IEEE_VALUE(dcoeff, IEEE_POSITIVE_INF)
            end if
         else
            if (theta /= 0._RD) then
               dcoeff = -3._RD - z*dtheta/theta - this%B(pt%s)*z/dtheta
            else
               dcoeff = IEEE_VALUE(dcoeff, IEEE_POSITIVE_INF)
            end if
         endif

      else

         dcoeff = 0._RD

      endif

      ! Finish

      return

   end function dcoeff_V_2_

   !****

   function dcoeff_As_(this, pt) result(dcoeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: dcoeff

      ! Evaluate the logarithmic derivative of the As coefficient

      dcoeff = this%dcoeff_V_2_(pt)*pt%x**2 * &
         (this%n_poly(pt%s)/(this%n_poly(pt%s) + 1._RD) - 1._RD/this%Gamma_1)

      ! Finish

      return

   end function dcoeff_As_

   !****

   function dcoeff_U_(this, pt) result(dcoeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: dcoeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the logarithmic derivative of the U coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         call this%in_theta(pt%s)%eval_f(pt%x, theta)
         call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

         if (theta /= 0._RD) then
            dcoeff = 3._RD + this%n_poly(pt%s)*z*dtheta/theta - this%coeff_U_(pt)
         else
            dcoeff = IEEE_VALUE(dcoeff, IEEE_NEGATIVE_INF)
         end if

      else

         dcoeff = 0._RD

      endif

      ! Finish

      return

   end function dcoeff_U_

   !****

   function dcoeff_c_1_(this, pt) result(dcoeff)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: dcoeff

      ! Evaluate the logarithmic derivative of the c_1 coefficient

      dcoeff = 3._RD - this%coeff_U_(pt)

      ! Finish

      return

   end function dcoeff_c_1_

   !****

   function mu_(this, pt) result(mu)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      real(RD)                        :: mu

      real(RD) :: dtheta
      real(RD) :: v

      ! Evaluate the mass coordinate mu

      call this%in_dtheta(pt%s)%eval_f(pt%x, dtheta)

      v = (this%z_s*pt%x)**2*dtheta

      mu = this%mu_i(pt%s) - (v - this%v_i(pt%s))*this%t(pt%s)/this%B(pt%s)

      ! Finish

      return

   end function mu_

   !****

   function is_defined (this, i)

      class(poly_model_t), intent(in) :: this
      integer, intent(in)             :: i
      logical                         :: is_defined

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'Invalid index')

      ! Return the definition status of the i'th coefficient

      select case (i)
      case (I_V_2, I_AS, I_U, I_C_1, I_GAMMA_1, I_UPS_T, I_NABLA_AD, I_OMEGA_ROT)
         is_defined = .TRUE.
      case default
         is_defined = .FALSE.
      end select

      ! Finish

      return

   end function is_defined

   !****

   function is_vacuum (this, pt)

      class(poly_model_t), intent(in) :: this
      type(point_t), intent(in)       :: pt
      logical                         :: is_vacuum

      real(RD) :: theta

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'Invalid segment')

      ! Return whether the point is a vacuum

      call this%in_theta(pt%s)%eval_f(pt%x, theta)

      is_vacuum = theta == 0._RD

      ! Finish

      return

   end function is_vacuum

   !****

   function Delta_p (this, x_i, x_o)

      class(poly_model_t), intent(in) :: this
      real(RD), intent(in)            :: x_i
      real(RD), intent(in)            :: x_o
      real(RD)                        :: Delta_p

      type(grid_t)  :: gr
      real(RD)      :: I
      integer       :: s
      type(point_t) :: pt
      integer       :: j_i
      integer       :: j_o
      integer       :: j
      real(RD)      :: V_2
      real(RD)      :: c_1
      real(RD)      :: Gamma_1

      ! Evaluate the dimensionless g-mode inverse period separation,
      ! using a midpoint quadrature rule since the integrand typically
      ! diverges at the surface

      ! First, create the nested grid

      gr = grid_t(this%gr, x_i, x_o)

      ! Now evaluate the integrand segment by segment

      I = 0._RD

      seg_loop : do s = gr%s_i(), gr%s_o()

         pt%s = s

         j_i = gr%j_s_i(s)
         j_o = gr%j_s_o(s)

         cell_loop : do j = j_i, j_o-1

            pt%x = 0.5_RD*(gr%pt(j)%x + gr%pt(j+1)%x)

            V_2 = this%coeff(I_V_2, pt)
            c_1 = this%coeff(I_C_1, pt)
            Gamma_1 = this%coeff(I_GAMMA_1, pt)

            I = I + sqrt(c_1*V_2/Gamma_1)*(gr%pt(j+1)%x - gr%pt(j)%x)

         end do cell_loop

      end do seg_loop

      Delta_p = 0.5_RD/I

      ! Finish

      return

   end function Delta_p

   !****

   function Delta_g (this, x_i, x_o, lambda)

      class(poly_model_t), intent(in) :: this
      real(RD), intent(in)            :: x_i
      real(RD), intent(in)            :: x_o
      real(RD), intent(in)            :: lambda
      real(RD)                        :: Delta_g

      type(grid_t)  :: gr
      real(RD)      :: I
      integer       :: s
      type(point_t) :: pt
      integer       :: j_i
      integer       :: j_o
      integer       :: j
      real(RD)      :: As
      real(RD)      :: c_1

      ! Evaluate the dimensionless g-mode inverse period separation,
      ! using a midpoint quadrature rule since the integrand typically
      ! diverges at the boundaries

      ! First, create the nested grid

      gr = grid_t(this%gr, x_i, x_o)

      ! Now evaluate the integrand segment by segment

      I = 0._RD

      seg_loop : do s = gr%s_i(), gr%s_o()

         pt%s = s

         j_i = gr%j_s_i(s)
         j_o = gr%j_s_o(s)

         cell_loop : do j = j_i, j_o-1

            pt%x = 0.5_RD*(gr%pt(j)%x + gr%pt(j+1)%x)

            As = this%coeff(I_AS, pt)
            c_1 = this%coeff(I_C_1, pt)

            I = I + (sqrt(MAX(As/c_1, 0._RD))/pt%x)*(gr%pt(j+1)%x - gr%pt(j)%x)

         end do cell_loop

      end do seg_loop

      Delta_g = sqrt(lambda)/(2._RD*PI**2)*I

      ! Finish

      return

   end function Delta_g

   !****

   function grid (this) result(gr)

      class(poly_model_t), intent(in) :: this
      type(grid_t)                    :: gr

      ! Return the model grid

      gr = this%gr

      ! Finish

      return

   end function grid

end module poly_model_m
