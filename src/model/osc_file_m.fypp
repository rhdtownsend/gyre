! Module  : osc_file_m
! Purpose : read OSC files
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module osc_file_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use evol_model_m
   use math_m
   use model_m
   use model_par_m
   use model_util_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   public :: read_osc_model

   ! Default access

   private

contains

   subroutine read_osc_model(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      character(:), allocatable   :: data_format
      integer                     :: unit
      integer                     :: n
      integer                     :: iconst
      integer                     :: ivar
      integer                     :: iabund
      integer                     :: ivers
      real(RD), allocatable       :: global_data(:)
      real(RD), allocatable       :: point_data(:,:)
      integer                     :: i
      real(RD)                    :: M_star
      real(RD)                    :: R_star
      real(RD)                    :: L_star
      real(RD), allocatable       :: r(:)
      real(RD), allocatable       :: m(:)
      real(RD), allocatable       :: L_r(:)
      real(RD), allocatable       :: p(:)
      real(RD), allocatable       :: rho(:)
      real(RD), allocatable       :: T(:)
      real(RD), allocatable       :: Gamma_1(:)
      real(RD), allocatable       :: nabla_ad(:)
      real(RD), allocatable       :: ups_T(:)
      real(RD), allocatable       :: As(:)
      real(RD), allocatable       :: nabla(:)
      real(RD), allocatable       :: nabla_rad(:)
      real(RD), allocatable       :: kap(:)
      real(RD), allocatable       :: kap_rho(:)
      real(RD), allocatable       :: kap_T(:)
      real(RD), allocatable       :: eps(:)
      real(RD), allocatable       :: eps_eps_rho(:)
      real(RD), allocatable       :: eps_eps_T(:)
      real(RD), allocatable       :: Omega_rot(:)
      real(RD), allocatable       :: x(:)
      real(RD), allocatable       :: V_2(:)
      real(RD), allocatable       :: U(:)
      real(RD), allocatable       :: c_1(:)
      real(RD), allocatable       :: beta_rad(:)
      real(RD), allocatable       :: c_P(:)
      real(RD), allocatable       :: c_lum(:)
      real(RD), allocatable       :: c_rad(:)
      real(RD), allocatable       :: c_thn(:)
      real(RD), allocatable       :: c_thk(:)
      real(RD), allocatable       :: c_eps(:)
      real(RD), allocatable       :: c_egv(:)
      real(RD), allocatable       :: eps_rho(:)
      real(RD), allocatable       :: eps_T(:)
      type(evol_model_t), pointer :: em

      ! Open the OSC-format file

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Reading from OSC file'
100      format(A)
         write(OUTPUT_UNIT, 110) 'File name', TRIM(ml_p%file)
110      format(3X,A,1X,A)
      endif

      open(NEWUNIT=unit, FILE=ml_p%file, STATUS='OLD')

      ! Read the header

      read(unit, *)
      read(unit, *)
      read(unit, *)
      read(unit, *)
      read(unit, *)

      read(unit, *) n, iconst, ivar, iabund, ivers

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 120) 'File version', ivers
120      format(3X,A,1X,I0)
      endif

      ! Read the data

      if (ml_p%data_format /= '') then
         data_format = ml_p%data_format
      else
         data_format = '(1P5E19.12)'
      endif

      allocate(global_data(iconst))
      allocate(point_data(ivar+iabund,n))

      read(unit, data_format) global_data

      read_loop : do i = 1,n
         read(unit, data_format) point_data(:,i)
      end do read_loop

      close(unit)

      point_data = point_data(:,n:1:-1)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 130) 'Read', n, 'points'
130      format(3X,A,1X,I0,1X,A)
      endif

      ! Extract structure data

      M_star = global_data(1)
      R_star = global_data(2)
      L_star = global_data(3)

      r = point_data(1,:)
      m = exp(point_data(2,:))*M_star
      L_r = point_data(7,:)

      T = point_data(3,:)
      P = point_data(4,:)
      rho = point_data(5,:)

      Gamma_1 = point_data(10,:)
      nabla_ad = point_data(11,:)
      ups_T = point_data(12,:)

      As = point_data(15,:)

      nabla = point_data(6,:)
      nabla_rad = point_data(22,:)

      kap = point_data(8,:)
      kap_rho = point_data(18,:)
      kap_T = point_data(17,:)

      eps = point_data(9,:)
      eps_eps_rho = point_data(20,:)
      eps_eps_T = point_data(19,:)

      Omega_rot = point_data(16,:)

      ! Snap grid points

      x = r/R_star

      call snap_points(MAX(ml_p%dx_snap, EPSILON(0._RD)), x, m)

      ! Calculate dimensionless structure data

      allocate(V_2(n))
      allocate(U(n))
      allocate(c_1(n))
      allocate(c_lum(n))

      where (x /= 0._RD)
         V_2 = G_GRAVITY*m*rho/(P*r*x**2)
         U = 4._RD*PI*rho*r**3/m
         c_1 = (r/R_star)**3/(m/M_star)
         c_lum = (L_r/L_star)/x**3
      elsewhere
         V_2 = 4._RD*PI*G_GRAVITY*rho(1)**2*R_star**2/(3._RD*P(1))
         U = 3._RD
         c_1 = 3._RD*(M_star/R_star**3)/(4._RD*PI*rho)
         c_lum = 4._RD*PI*rho(1)*eps(1)*R_star**3/L_star
      end where

      beta_rad = A_RADIATION*T**4/(3._RD*P)

      c_P = P*ups_T/(rho*T*nabla_ad)

      if (ml_p%use_nabla_rad) then
         c_rad = 16._RD*PI*A_RADIATION*C_LIGHT*T**4*R_star*MAX(nabla, nabla_rad)*V_2/(3._RD*kap*rho*L_star)
      else
         c_rad = 16._RD*PI*A_RADIATION*C_LIGHT*T**4*R_star*nabla*V_2/(3._RD*kap*rho*L_star)
      end if

      c_thn = c_P*sqrt(G_GRAVITY*M_star/R_star**3)/(A_RADIATION*C_LIGHT*kap*T**3)
      c_thk = 4._RD*PI*rho*T*c_P*sqrt(G_GRAVITY*M_star/R_star**3)*R_star**3/L_star
      c_eps = 4._RD*PI*rho*eps*R_star**3/L_star

      allocate(c_egv(n))
      c_egv = 0._RD

      allocate(eps_rho(n))
      allocate(eps_T(n))

      where (eps /= 0._RD)
         eps_rho = eps_eps_rho/eps
         eps_T = eps_eps_T/eps
      elsewhere
         eps_rho = 0._RD
         eps_T = 0._RD
      end where

      Omega_rot = Omega_rot*sqrt(R_star**3/(G_GRAVITY*M_star))

      ! Initialize the evol_model_t

      allocate(em, SOURCE=evol_model_t(x, M_star, R_star, L_star, ml_p))

      call em%define(I_V_2, V_2)
      call em%define(I_AS, As)
      call em%define(I_U, U)
      call em%define(I_C_1, c_1)

      call em%define(I_GAMMA_1, Gamma_1)
      call em%define(I_UPS_T, ups_T)
      call em%define(I_NABLA_AD, nabla_ad)
      call em%define(I_NABLA, nabla)
      call em%define(I_BETA_RAD, beta_rad)

      call em%define(I_C_LUM, c_lum)
      call em%define(I_C_RAD, c_rad)
      call em%define(I_C_THN, c_thn)
      call em%define(I_C_THK, c_thk)
      call em%define(I_C_EPS, c_eps)
      call em%define(I_C_EGV, c_egv)

      call em%define(I_EPS_RHO, eps_rho)
      call em%define(I_EPS_T, eps_T)

      call em%define(I_KAP_RHO, kap_rho)
      call em%define(I_KAP_T, kap_T)

      call em%define(I_OMEGA_ROT, Omega_rot)

      call em%commit()

      ! Return a pointer

      ml => em

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, *)
      endif

      ! Finish

      return

   end subroutine read_osc_model

end module osc_file_m
