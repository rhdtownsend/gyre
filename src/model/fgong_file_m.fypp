! Module  : fgong_file_m
! Purpose : read FGONG files
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module fgong_file_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use evol_model_m
   use math_m
   use model_m
   use model_par_m
   use model_util_m
   use util_m

   use ISO_FORTRAN_ENV
   use IEEE_ARITHMETIC

   ! No implicit typing

   implicit none

   ! Access specifiers

   public :: read_fgong_model

   ! Default access

   private

contains

   subroutine read_fgong_model(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      integer                     :: unit
      integer                     :: n
      integer                     :: iconst
      integer                     :: ivar
      integer                     :: ivers
      character(:), allocatable   :: data_format
      real(RD), allocatable       :: glob(:)
      real(RD), allocatable       :: var(:,:)
      integer                     :: i
      real(RD)                    :: M_star
      real(RD)                    :: R_star
      real(RD)                    :: L_star
      real(RD), allocatable       :: x(:)
      real(RD), allocatable       :: m(:)
      real(RD), allocatable       :: P(:)
      real(RD), allocatable       :: rho(:)
      real(RD), allocatable       :: T(:)
      real(RD), allocatable       :: Gamma_1(:)
      real(RD), allocatable       :: nabla_ad(:)
      real(RD), allocatable       :: ups_T(:)
      real(RD), allocatable       :: beta_rad(:)
      real(RD), allocatable       :: V_2(:)
      real(RD), allocatable       :: As(:)
      real(RD), allocatable       :: U(:)
      real(RD), allocatable       :: c_1(:)
      real(RD), allocatable       :: Omega_rot(:)
      type(evol_model_t), pointer :: em

      ! Open the FGONG-format file

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Reading from FGONG file'
100      format(A)
         write(OUTPUT_UNIT, 110) 'File name', TRIM(ml_p%file)
110      format(3X,A,1X,A)
      endif

      open(NEWUNIT=unit, FILE=ml_p%file, STATUS='OLD')

      ! Read the header

      read(unit, *)
      read(unit, *)
      read(unit, *)
      read(unit, *)

      read(unit, *) n, iconst, ivar, ivers

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 120) 'File version', ivers
120      format(3X,A,1X,I0)
      endif

      ! Read the data

      if (ml_p%data_format /= '') then
         data_format = ml_p%data_format
      else
         if (ivers < 1000) then
            data_format = '(1P5E16.9)'
         else
            data_format = '(1P,5(X,E26.18E3))'
         endif
      endif

      allocate(glob(iconst))
      allocate(var(ivar,n))

      read(unit, data_format) glob

      read_loop : do i = 1, n
         read(unit, data_format) var(:,i)
      end do read_loop

      close(unit)

      if (ALL(var(1,2:) <= var(1,:SIZE(var, dim=2)-1))) var = var(:,n:1:-1)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 130) 'Read', n, 'points'
130      format(3X,A,1X,I0,1X,A)
      endif

      ! Extract structure data

      M_star = glob(1)
      R_star = glob(2)
      L_star = glob(3)

      x = var(1,:)/R_star

      m = exp(var(2,:))
      T = var(3,:)
      P = var(4,:)
      rho = var(5,:)

      Gamma_1 = var(10,:)
      nabla_ad = var(11,:)
      ups_T = var(12,:)

      As = var(15,:)

      ! Snap grid points

      call snap_points(MAX(ml_p%dx_snap, EPSILON(0._RD)), x, m)

      ! Calculate dimensionless structure data

      allocate(V_2(n))
      allocate(U(n))
      allocate(c_1(n))

      where (x /= 0._RD)
         where (P /= 0._RD)
            V_2 = G_GRAVITY*(m*M_star)*rho/(P*x**3*R_star)
         elsewhere
            V_2 = IEEE_VALUE(V_2, IEEE_POSITIVE_INF)
         end where
         U = 4._RD*PI*rho*(x*R_star)**3/(m*M_star)
         c_1 = x**3/m
      elsewhere
         V_2 = 4._RD*PI*G_GRAVITY*rho(1)**2*R_star**2/(3._RD*P(1))
         U = 3._RD
         c_1 = 3._RD*(M_star/R_star**3)/(4._RD*PI*rho)
      end where

      allocate(Omega_rot(n))

      Omega_rot = 0._RD

      allocate(beta_rad(n))

      where (P /= 0._RD)
         beta_rad = A_RADIATION*T**4/(3._RD*P)
      elsewhere
         beta_rad = IEEE_VALUE(beta_rad, IEEE_POSITIVE_INF)
      end where

      ! Initialize the evol_model_t

      allocate(em, SOURCE=evol_model_t(x, M_star, R_star, L_star, ml_p))

      call em%define(I_V_2, V_2)
      call em%define(I_AS, As)
      call em%define(I_U, U)
      call em%define(I_C_1, c_1)

      call em%define(I_GAMMA_1, Gamma_1)
      call em%define(I_UPS_T, ups_T)
      call em%define(I_NABLA_AD, nabla_ad)

      call em%define(I_BETA_RAD, beta_rad)

      call em%define(I_OMEGA_ROT, Omega_rot)

      call em%commit()

      ! Return a pointer

      ml => em

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, *)
      endif

      ! Finish

      return

   end subroutine read_fgong_model

end module fgong_file_m
