! Module  : anapoly_5_1_model_m
! Purpose : stellar analytic n_poly=5,1 polytrope model
!
! Copyright 2024-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module anapoly_5_1_model_m

   ! Uses

   use forum_m, only: RD, sort_indices

   use constants_m
   use grid_m
   use math_m
   use model_m
   use model_par_m
   use num_par_m
   use point_m
   use root_m
   use status_m
   use util_m

   use ISO_FORTRAN_ENV
   use IEEE_ARITHMETIC

   use F95_LAPACK

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(model_t) :: anapoly_5_1_model_t
      private
      type(grid_t) :: gr
      real(RD)     :: theta_m
      real(RD)     :: C(2)
      real(RD)     :: B_e
      real(RD)     :: z_m
      real(RD)     :: z_s
      real(RD)     :: v_c
      real(RD)     :: v_e
      real(RD)     :: mu_s
      real(RD)     :: Gamma_1
      real(RD)     :: Omega_rot
      integer      :: s_i
      integer      :: s_o
      logical      :: resolve_m
   contains
      private
      procedure         :: theta_
      procedure         :: dtheta_
      procedure, public :: coeff
      procedure         :: coeff_V_2_
      procedure         :: coeff_As_
      procedure         :: coeff_U_
      procedure         :: coeff_c_1_
      procedure, public :: coeff_U_D
      procedure, public :: dcoeff
      procedure         :: dcoeff_V_2_
      procedure         :: dcoeff_As_
      procedure         :: dcoeff_U_
      procedure         :: dcoeff_c_1_
      procedure         :: mu_
      procedure, public :: is_defined
      procedure, public :: is_vacuum
      procedure, public :: Delta_p
      procedure, public :: Delta_g
      procedure, public :: grid
   end type anapoly_5_1_model_t

   ! Interfaces

   interface anapoly_5_1_model_t
      module procedure anapoly_5_1_model_t_
   end interface anapoly_5_1_model_t

   ! Access specifiers

   public :: anapoly_5_1_model_t

   ! Default access

   private

contains

   function anapoly_5_1_model_t_(ml_p) result(ml)

      use grid_weights_m

      type(model_par_t), intent(in) :: ml_p
      type(anapoly_5_1_model_t)     :: ml

      real(RD), allocatable :: w(:)
      real(RD), allocatable :: x(:)

      ! Construct the anapoly_5_1_model_t

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Constructing analytic n_poly=5,1 polytrope model'
100      format(A)
      endif

      select case (ml_p%grid_type)
      case ('UNI')
         w = uni_weights(ml_p%n)
      case ('GEO')
         w = geo_weights(ml_p%n, ml_p%s)
      case ('LOG')
         w = log_weights(ml_p%n, ml_p%s)
      case default
         @:ABORT('Invalid grid_type')
      end select

      ml%gr = grid_t(w, ml_p%x_i, ml_p%x_o)

      ! Solve for the polytrope structure

      call solve_struct_(ml_p%x_match, ml%theta_m, ml%C, ml%B_e, ml%z_m, ml%z_s, ml%v_c, ml%v_e, ml%mu_s)

      ! Store other data

      ml%Gamma_1 = ml_p%Gamma_1

      ml%Omega_rot = 0._RD

      ! If necessary, re-create the grid with the transition point

      if (ml_p%resolve_match) then

         x = [ml%gr%pt%x, ml%z_m/ml%z_s, ml%z_m/ml%z_s]

         x = x(sort_indices(x))

         ml%gr = grid_t(x)

      end if

      ml%resolve_m = ml_p%resolve_match

      ml%s_i = ml%gr%s_i()
      ml%s_o = ml%gr%s_o()

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 110) 'Created', ml_p%n, 'points'
110      format(3X,A,1X,I0,1X,A)
         write(OUTPUT_UNIT, 120) 'Distribution', ml_p%grid_type
120      format(3X,A,1X,A)
      endif

      ! Finish

      return

   end function anapoly_5_1_model_t_

   !****

   subroutine solve_struct_(x_m, theta_m, C, B_e, z_m, z_s, v_c, v_e, mu_s)

      real(RD), intent(in)  :: x_m
      real(RD), intent(out) :: theta_m
      real(RD), intent(out) :: C(:)
      real(RD), intent(out) :: B_e
      real(RD), intent(out) :: z_m
      real(RD), intent(out) :: z_s
      real(RD), intent(out) :: v_c
      real(RD), intent(out) :: v_e
      real(RD), intent(out) :: mu_s

      real(RD) :: z_m_a
      real(RD) :: z_m_b
      real(RD) :: D_a
      real(RD) :: D_b
      real(RD) :: D
      real(RD) :: tol
      real(RD) :: dtheta_m
      real(RD) :: alpha
      real(RD) :: A(2,2)
      real(RD) :: dtheta_s
      integer  :: status

      @:CHECK_BOUNDS(SIZE(C), 2)

      @:ASSERT(x_m > 0._RD .AND. x_m < 2._RD/3._RD, 'invalid x_m')

      ! Given x_m, solve for the mixed polytrope structure

      ! First, initialize brackets on z_m

      z_m_a = 0._RD
      z_m_b = 1/sqrt(EPSILON(0._RD))

      D_a = x_m
      D_b = x_m - 2._RD/3._RD

      ! Now refine brackets until convergence

      refine_loop : do

         ! Try a new matching point at the midpoint between z_m_a and
         ! z_m_b

         z_m = 0.5_RD*(z_m_a + z_m_b)

         ! Evaluate quantities at this matching point

         theta_m = 1._RD/sqrt(1._RD + z_m**2/3._RD)
         dtheta_m = -z_m/(3._RD*sqrt(1._RD + z_m**2/3._RD)**3)

         B_e = 3._RD*theta_m**4

         ! Solve for coefficients in the outer (n_poly=1) region by
         ! ensuring continuity in theta and (n+1) theta'

         alpha = sqrt(B_e)

         A(1,1) = sin(alpha*z_m)/(alpha*z_m)
         A(1,2) = cos(alpha*z_m)/(alpha*z_m)

         A(2,1) = cos(alpha*z_m)/z_m - sin(alpha*z_m)/(alpha*z_m**2)
         A(2,2) = -sin(alpha*z_m)/z_m - cos(alpha*z_m)/(alpha*z_m**2)

         C(1) = theta_m
         C(2) = 3._RD*dtheta_m

         call LA_GESV(A, C)

         ! Determine the surface point, where theta drops to zero

         z_s = atan(-C(2)/C(1))/alpha

         do
            if (z_s > z_m) exit
            z_s = z_s + PI/alpha
         end do

         ! Calculate the discriminant

         D = x_m - z_m/z_s

         ! Update the bracket

         if (D*D_a <= 0._RD) then
            z_m_b = z_m
            D_b = D
         elseif (D*D_b <= 0._RD) then
            z_m_a = z_m
            D_a = D
         else
            @:ABORT('root is no longer bracketed')
         end if

         ! Check for convergence

         tol = 4._RD*EPSILON(0._RD)*abs(z_m)

         if (ABS(z_m_b - z_m_a) < tol) exit refine_loop

      end do refine_loop

      ! Set up mass values

      v_c = z_m**2*dtheta_m
      v_e = 3._RD*z_m**2*dtheta_m

      dtheta_s = C(1)*( cos(alpha*z_s)/z_s - sin(alpha*z_s)/(alpha*z_s**2)) + &
                 C(2)*(-sin(alpha*z_s)/z_s - cos(alpha*z_s)/(alpha*z_s**2))

      mu_s = - v_c - (z_s**2*dtheta_s - v_e)*theta_m**4/B_e

      ! Finish

   end subroutine solve_struct_

   !****

   function theta_(this, pt) result(theta)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: theta

      real(RD) :: z
      real(RD) :: alpha

      ! Evaluate the polytropic dependent variable

      z = pt%x*this%z_s

      if (z == this%z_s) then

         theta = 0._RD

      else

         if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
             (.NOT. this%resolve_m .AND. z < this%z_m)) then

            theta = 1._RD/sqrt(1._RD + z**2/3._RD)

         else

            alpha = sqrt(this%B_e)

            theta = this%C(1)*sin(alpha*z)/(alpha*z) + &
                    this%C(2)*cos(alpha*z)/(alpha*z)

         end if

      end if

      ! Finish

      return

   end function theta_

   !****

   function dtheta_(this, pt) result(dtheta)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dtheta

      real(RD) :: z
      real(RD) :: alpha

      ! Evaluate the derivative of the polytropic dependent variable

      z = pt%x*this%z_s

      if (z /= 0._RD) then

         if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
             (.NOT. this%resolve_m .AND. z < this%z_m)) then

            dtheta = -z/(3._RD*sqrt(1._RD + z**2/3._RD)**3)

         else

            alpha = sqrt(this%B_e)

            dtheta = this%C(1)*( cos(alpha*z)/z - sin(alpha*z)/(alpha*z**2)) + &
                     this%C(2)*(-sin(alpha*z)/z - cos(alpha*z)/(alpha*z**2))

         end if

      else

         dtheta = 0._RD

      end if

      ! Finish

      return

   end function dtheta_

   !****

   function coeff(this, i, pt)

      class(anapoly_5_1_model_t), intent(in) :: this
      integer, intent(in)                    :: i
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         coeff = this%coeff_V_2_(pt)
      case (I_AS)
         coeff = this%coeff_As_(pt)
      case (I_U)
         coeff = this%coeff_U_(pt)
      case (I_C_1)
         coeff = this%coeff_c_1_(pt)
      case (I_GAMMA_1)
         coeff = this%Gamma_1
      case (I_UPS_T)
         coeff = 1._RD
      case (I_NABLA_AD)
         coeff = 0.4_RD
      case (I_OMEGA_ROT)
         coeff = this%Omega_rot
      end select

      ! Finish

      return

   end function coeff

   !****

   function coeff_V_2_(this, pt) result(coeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the V_2 coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if (theta /= 0._RD) then

            if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
                (.NOT. this%resolve_m .AND. z < this%z_m)) then

               coeff = -6._RD*this%z_s**2*dtheta/(theta*z)

            else

               coeff = -2._RD*this%z_s**2*dtheta/(theta*z)

            end if

         else

            coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)

         endif

      else

         coeff = 6._RD*this%z_s**2/3._RD

      endif

      ! Finish

      return

   end function coeff_V_2_

   !****

   function coeff_As_(this, pt) result(coeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the As coefficient

      z = pt%x*this%z_s

      theta = this%theta_(pt)
      dtheta = this%dtheta_(pt)

      if (theta /= 0._RD) then

         if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
             (.NOT. this%resolve_m .AND. z < this%z_m)) then

            coeff = -6._RD*z*dtheta/theta * &
               (5._RD/6._RD - 1._RD/this%Gamma_1)

         else

            coeff = -2._RD*z*dtheta/theta * &
               (1._RD/2._RD - 1._RD/this%Gamma_1)

         end if

      else

         coeff = IEEE_VALUE(coeff, IEEE_NEGATIVE_INF)

      endif

      ! Finish

      return

   end function coeff_As_

   !****

   function coeff_U_(this, pt) result(coeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      real(RD) :: z
      real(RD) :: theta

      ! Evaluate the U coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)

         if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
             (.NOT. this%resolve_m .AND. z < this%z_m)) then

            coeff = z**3*theta**5/this%mu_(pt)

         else

            coeff = z**3*this%theta_m**4*theta/this%mu_(pt)

         end if

      else

         coeff = 3._RD

      endif

      ! Finish

      return

   end function coeff_U_

   !****

   function coeff_c_1_(this, pt) result(coeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      real(RD) :: z

      ! Evaluate the c_1 coefficient

      if (pt%x /= 0._RD) then

         coeff = pt%x**3/(this%mu_(pt)/this%mu_s)

      else

         coeff = 3._RD*this%mu_s/this%z_s**3

      endif

      ! Finish

      return

   end function coeff_c_1_

   !****

   function coeff_U_D(this, pt) result(coeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the U_D = U*dlnrho/dlnr coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
             (.NOT. this%resolve_m .AND. z < this%z_m)) then

            coeff = z**4*theta**4*dtheta/this%mu_(pt)

         else

            coeff = z**4*this%theta_m**4*dtheta/this%mu_(pt)

         end if

      else

         coeff = 0._RD

      end if

      ! Finish

      return

   end function coeff_U_D

   !****

   function dcoeff(this, i, pt)

      class(anapoly_5_1_model_t), intent(in) :: this
      integer, intent(in)                    :: i
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dcoeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         dcoeff = this%dcoeff_V_2_(pt)
      case (I_AS)
         dcoeff = this%dcoeff_As_(pt)
      case (I_U)
         dcoeff = this%dcoeff_U_(pt)
      case (I_C_1)
         dcoeff = this%dcoeff_c_1_(pt)
      case (I_GAMMA_1)
         dcoeff = 0._RD
      case (I_UPS_T)
         dcoeff = 0._RD
      case (I_NABLA_AD)
         dcoeff = 0._RD
      case (I_OMEGA_ROT)
         dcoeff = 0._RD
      end select

      ! Finish

      return

   end function dcoeff

   !****

   function dcoeff_V_2_(this, pt) result(dcoeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dcoeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the logarithmic derivative of the V_2 coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if (theta /= 0._RD) then

            if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
                (.NOT. this%resolve_m .AND. z < this%z_m)) then

               dcoeff = -3._RD - z*dtheta/theta - z*theta**5/dtheta

            else

               dcoeff = -3._RD - z*dtheta/theta - this%B_e*z*theta/dtheta

            end if

         else

            dcoeff = IEEE_VALUE(dcoeff, IEEE_POSITIVE_INF)

         end if

      else

         dcoeff = 0._RD

      endif

      ! Finish

      return

   end function dcoeff_V_2_

   !****

   function dcoeff_As_(this, pt) result(dcoeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dcoeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the logarithmic derivative of the As coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if (theta /= 0._RD) then

            if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
                (.NOT. this%resolve_m .AND. z < this%z_m)) then

               dcoeff = -1._RD - z*dtheta/theta - z*theta**5/dtheta

            else

               dcoeff = -1._RD - z*dtheta/theta - this%B_e*z*theta/dtheta

            end if

         else

            dcoeff = IEEE_VALUE(dcoeff, IEEE_POSITIVE_INF)

         end if

      else

         dcoeff = 2._RD

      endif

      ! Finish

      return

   end function dcoeff_As_

   !****

   function dcoeff_U_(this, pt) result(dcoeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dcoeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the logarithmic derivative of the U coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if (theta /= 0._RD) then

            if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
                (.NOT. this%resolve_m .AND. z < this%z_m)) then

               dcoeff = 3._RD + 5._RD*z*dtheta/theta - this%coeff_U_(pt)

            else

               dcoeff = 3._RD + z*dtheta/theta - this%coeff_U_(pt)

            end if

         else

            dcoeff = IEEE_VALUE(dcoeff, IEEE_NEGATIVE_INF)

         end if

      else

         dcoeff = 0._RD

      endif

      ! Finish

      return

   end function dcoeff_U_

   !****

   function dcoeff_c_1_(this, pt) result(dcoeff)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: dcoeff

      ! Evaluate the logarithmic derivative of the c_1 coefficient

      dcoeff = 3._RD - this%coeff_U_(pt)

      ! Finish

      return

   end function dcoeff_c_1_

   !****

   function mu_(this, pt) result(mu)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      real(RD)                               :: mu

      real(RD) :: z
      real(RD) :: dtheta

      ! Evaluate the mass coordinate mu

      z = pt%x*this%z_s

      dtheta = this%dtheta_(pt)

      if ((this%resolve_m .AND. pt%s == this%s_i) .OR. &
          (.NOT. this%resolve_m .AND. z < this%z_m)) then

         mu = -z**2*dtheta

      else

         mu = - this%v_c - (z**2*dtheta - this%v_e)*this%theta_m**4/this%B_e

      end if

      ! Finish

      return

   end function mu_

   !****

   function is_defined(this, i)

      class(anapoly_5_1_model_t), intent(in) :: this
      integer, intent(in)                    :: i
      logical                                :: is_defined

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')

      ! Return the definition status of the i'th coefficient

      select case (i)
      case (I_V_2, I_AS, I_U, I_C_1, I_GAMMA_1, I_UPS_T, I_NABLA_AD, I_OMEGA_ROT)
         is_defined = .TRUE.
      case default
         is_defined = .FALSE.
      end select

      ! Finish

      return

   end function is_defined

   !****

   function is_vacuum(this, pt)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(point_t), intent(in)              :: pt
      logical                                :: is_vacuum

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Return whether the point is a vacuum

      is_vacuum = this%theta_(pt) == 0._RD

      ! Finish

      return

   end function is_vacuum

   !****

   function Delta_p (this, x_i, x_o)

      class(anapoly_5_1_model_t), intent(in) :: this
      real(RD), intent(in)                   :: x_i
      real(RD), intent(in)                   :: x_o
      real(RD)                               :: Delta_p

      @:ABORT('not yet implemented')

   end function Delta_p

   !****

   function Delta_g (this, x_i, x_o, lambda)

      class(anapoly_5_1_model_t), intent(in) :: this
      real(RD), intent(in)                   :: x_i
      real(RD), intent(in)                   :: x_o
      real(RD), intent(in)                   :: lambda
      real(RD)                               :: Delta_g

      @:ABORT('not yet implemented')

   end function Delta_g

   !****

   function grid(this) result(gr)

      class(anapoly_5_1_model_t), intent(in) :: this
      type(grid_t)                           :: gr

      ! Return the grid

      gr = this%gr

      ! Finish

      return

   end function grid

end module anapoly_5_1_model_m
