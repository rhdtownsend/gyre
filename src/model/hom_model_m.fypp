! Module  : hom_model_m
! Purpose : stellar homogeneous compressible model
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module hom_model_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use grid_m
   use math_m
   use model_m
   use model_par_m
   use point_m
   use util_m

   use ISO_FORTRAN_ENV
   use IEEE_ARITHMETIC

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(model_t) :: hom_model_t
      private
      type(grid_t) :: gr
      real(RD)     :: Gamma_1
      real(RD)     :: Omega_rot
      integer      :: s_i
      integer      :: s_o
   contains
      private
      procedure, public :: coeff
      procedure         :: coeff_V_2_
      procedure         :: coeff_As_
      procedure, public :: coeff_U_D
      procedure, public :: dcoeff
      procedure         :: dcoeff_V_2_
      procedure         :: dcoeff_As_
      procedure, public :: is_defined
      procedure, public :: is_vacuum
      procedure, public :: Delta_p
      procedure, public :: Delta_g
      procedure, public :: grid
   end type hom_model_t

   ! Interfaces

   interface hom_model_t
      module procedure hom_model_t_
   end interface hom_model_t

   ! Access specifiers

   public :: hom_model_t

   ! Default access

   private

contains

   function hom_model_t_(ml_p) result(ml)

      use grid_weights_m

      type(model_par_t), intent(in) :: ml_p
      type(hom_model_t)             :: ml

      real(RD), allocatable :: w(:)

      ! Construct the hom_model_t

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Constructing homogeneous model'
100      format(A)
      endif

      select case (ml_p%grid_type)
      case ('UNI')
         w = uni_weights(ml_p%n)
      case ('GEO')
         w = geo_weights(ml_p%n, ml_p%s)
      case ('LOG')
         w = log_weights(ml_p%n, ml_p%s)
      case default
         @:ABORT('Invalid grid_type')
      end select

      ml%gr = grid_t(w, ml_p%x_i, ml_p%x_o)

      ml%Gamma_1 = ml_p%Gamma_1

      ml%Omega_rot = 0._RD

      ml%s_i = ml%gr%s_i()
      ml%s_o = ml%gr%s_o()

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 110) 'Created', ml_p%n, 'points'
110      format(3X,A,1X,I0,1X,A)
         write(OUTPUT_UNIT, 120) 'Distribution', ml_p%grid_type
120      format(3X,A,1X,A)
      endif

      ! Finish

      return

   end function hom_model_t_

   !****

   function coeff(this, i, pt)

      class(hom_model_t), intent(in) :: this
      integer, intent(in)            :: i
      type(point_t), intent(in)      :: pt
      real(RD)                       :: coeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         coeff = this%coeff_V_2_(pt)
      case (I_AS)
         coeff = this%coeff_As_(pt)
      case (I_U)
         coeff = 3._RD
      case (I_C_1)
         coeff = 1._RD
      case (I_GAMMA_1)
         coeff = this%Gamma_1
      case (I_UPS_T)
         coeff = 1._RD
      case (I_NABLA_AD)
         coeff = 0.4_RD
      case (I_OMEGA_ROT)
         coeff = this%Omega_rot
      end select

      ! Finish

      return

   end function coeff

   !****

   function coeff_V_2_(this, pt) result(coeff)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      real(RD)                       :: coeff

      ! Evaluate the V_2 coefficient

      if (1._RD - pt%x**2 /= 0._RD) then
         coeff = 2._RD/(1._RD - pt%x**2)
      else
         coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)
      end if

      ! Finish

      return

   end function coeff_V_2_

   !****

   function coeff_As_(this, pt) result(coeff)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      real(RD)                       :: coeff

      ! Evaluate the As coefficient

      coeff = -this%coeff_V_2_(pt)*pt%x**2/this%Gamma_1

      ! Finish

      return

   end function coeff_As_

   !****

   function coeff_U_D(this, pt) result(coeff)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      real(RD)                       :: coeff

      ! Evaluate the U_D = U*dlnrho/dlnr coefficient

      coeff = 0._RD

      ! Finish

      return

   end function coeff_U_D

   !****

   function dcoeff(this, i, pt)

      class(hom_model_t), intent(in) :: this
      integer, intent(in)            :: i
      type(point_t), intent(in)      :: pt
      real(RD)                       :: dcoeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         dcoeff = this%dcoeff_V_2_(pt)
      case (I_AS)
         dcoeff = this%dcoeff_As_(pt)
      case (I_U)
         dcoeff = 0._RD
      case (I_C_1)
         dcoeff = 0._RD
      case (I_GAMMA_1)
         dcoeff = 0._RD
      case (I_UPS_T)
         dcoeff = 0._RD
      case (I_NABLA_AD)
         dcoeff = 0._RD
      case (I_OMEGA_ROT)
         dcoeff = 0._RD
      end select

      ! Finish

      return

   end function dcoeff

   !****

   function dcoeff_V_2_(this, pt) result(dcoeff)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      real(RD)                       :: dcoeff

      ! Evaluate the logarithmic derivative of the V_2 coefficient

      if (1._RD - pt%x**2 /= 0._RD) then
         dcoeff = 2._RD*pt%x**2/(1._RD - pt%x**2)
      else
         dcoeff = IEEE_VALUE(dcoeff, IEEE_POSITIVE_INF)
      end if

      ! Finish

      return

   end function dcoeff_V_2_

   !****

   function dcoeff_As_(this, pt) result(dcoeff)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      real(RD)                       :: dcoeff

      ! Evaluate the logarithmic derivative of the As coefficient

      dcoeff = -(this%dcoeff_V_2_(pt)*pt%x**2 + 2._RD*this%coeff_V_2_(pt)*pt%x)/this%Gamma_1

      ! Finish

      return

   end function dcoeff_As_

   !****

   function is_defined(this, i)

      class(hom_model_t), intent(in) :: this
      integer, intent(in)            :: i
      logical                        :: is_defined

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')

      ! Return the definition status of the i'th coefficient

      select case (i)
      case (I_V_2, I_AS, I_U, I_C_1, I_GAMMA_1, I_UPS_T, I_NABLA_AD, I_OMEGA_ROT)
         is_defined = .TRUE.
      case default
         is_defined = .FALSE.
      end select

      ! Finish

      return

   end function is_defined

   !****

   function is_vacuum(this, pt)

      class(hom_model_t), intent(in) :: this
      type(point_t), intent(in)      :: pt
      logical                        :: is_vacuum

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Return whether the point is a vacuum

      is_vacuum = (1._RD - pt%x**2) == 0._RD

      ! Finish

      return

   end function is_vacuum

   !****

   function Delta_p(this, x_i, x_o)

      class(hom_model_t), intent(in) :: this
      real(RD), intent(in)           :: x_i
      real(RD), intent(in)           :: x_o
      real(RD)                       :: Delta_p

      ! Evaluate the dimensionless p-mode frequency separation

      Delta_p = 0.5_RD/(sqrt(2._RD/this%Gamma_1)*(asin(x_o)-asin(x_i)))

      ! Finish

      return

   end function Delta_p

   !****

   function Delta_g(this, x_i, x_o, lambda)

      class(hom_model_t), intent(in) :: this
      real(RD), intent(in)           :: x_i
      real(RD), intent(in)           :: x_o
      real(RD), intent(in)           :: lambda
      real(RD)                       :: Delta_g

      ! Evaluate the dimensionless g-mode inverse period separation

      Delta_g = 0._RD

      ! Finish

      return

   end function Delta_g

   !****

   function grid(this) result(gr)

      class(hom_model_t), intent(in) :: this
      type(grid_t)                   :: gr

      ! Return the grid

      gr = this%gr

      ! Finish

      return

   end function grid

end module hom_model_m
