! Module  : rad_bound_m
! Purpose : adiabatic radial boundary conditions
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module rad_bound_m

   ! Uses

   use forum_m, only: RD

   use atmos_m
   use bound_m
   use context_m
   use model_m
   use model_util_m
   use mode_par_m
   use osc_par_m
   use point_m
   use rad_trans_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: REGULAR_TYPE = 1
   integer, parameter :: ZERO_R_TYPE = 2
   integer, parameter :: VACUUM_TYPE = 3
   integer, parameter :: DZIEM_TYPE = 4
   integer, parameter :: ISOTHRM_TYPE = 5
   integer, parameter :: UNNO_TYPE = 6
   integer, parameter :: JCD_TYPE = 7

   integer, parameter :: J_V = 1
   integer, parameter :: J_AS = 2
   integer, parameter :: J_U = 3
   integer, parameter :: J_C_1 = 4
   integer, parameter :: J_GAMMA_1 = 5

   integer, parameter :: J_LAST = J_GAMMA_1

   ! Derived-type definitions

   type, extends(bound_rt) :: rad_bound_t
      private
      type(context_t), pointer :: cx => null()
      type(rad_trans_t)        :: tr
      real(RD), allocatable    :: coeff(:,:)
      real(RD)                 :: alpha_omg
      integer                  :: type_i
      integer                  :: type_o
   contains
      private
      procedure         :: stencil_
      procedure, public :: build_i
      procedure         :: build_regular_i_
      procedure         :: build_zero_r_i_
      procedure, public :: build_o
      procedure         :: build_vacuum_o_
      procedure         :: build_dziem_o_
      procedure         :: build_decomp_o_
      procedure         :: build_jcd_o_
   end type rad_bound_t

   ! Interfaces

   interface rad_bound_t
      module procedure rad_bound_t_
   end interface rad_bound_t

   ! Access specifiers

   public :: rad_bound_t

   ! Default access

   private

contains

   function rad_bound_t_(cx, md_p, os_p) result(bd)

      type(context_t), pointer, intent(in) :: cx
      type(mode_par_t), intent(in)         :: md_p
      type(osc_par_t), intent(in)          :: os_p
      type(rad_bound_t)                    :: bd

      class(model_t), pointer :: ml
      type(point_t)           :: pt_i
      type(point_t)           :: pt_o

      ! Construct the rad_bound_t

      bd%cx => cx

      bd%tr = rad_trans_t(cx, md_p, os_p)

      ml => cx%model()
      pt_i = cx%point_i()
      pt_o = cx%point_o()

      select case (os_p%inner_bound)
      case ('REGULAR')
         @:ASSERT(pt_i%x == 0._RD, 'boundary condition invalid for x /= 0')
         bd%type_i = REGULAR_TYPE
      case ('ZERO_R')
         @:ASSERT(pt_i%x /= 0._RD, 'boundary condition invalid for x == 0')
         bd%type_i = ZERO_R_TYPE
      case default
         @:ABORT('invalid inner_bound')
      end select

      select case (os_p%outer_bound)
      case ('VACUUM')
         bd%type_o = VACUUM_TYPE
      case ('DZIEM')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = DZIEM_TYPE
         endif
      case ('ISOTHERMAL')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = ISOTHRM_TYPE
         endif
      case ('UNNO')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = UNNO_TYPE
         endif
      case ('JCD')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = JCD_TYPE
         endif
      case default
         @:ABORT('invalid outer_bound')
      end select

      select case (os_p%time_factor)
      case ('OSC')
         bd%alpha_omg = 1._RD
      case ('EXP')
         bd%alpha_omg = -1._RD
      case default
         @:ABORT('invalid time_factor')
      end select

      call bd%stencil_(pt_i, pt_o)

      bd%n_i = 1
      bd%n_o = 1

      bd%n_e = 2

      ! Finish

      return

   end function rad_bound_t_

   !****

   subroutine stencil_(this, pt_i, pt_o)

      class(rad_bound_t), intent(inout) :: this
      type(point_t), intent(in)         :: pt_i
      type(point_t), intent(in)         :: pt_o

      class(model_t), pointer :: ml

      ! Calculate coefficients at the stencil points

      ml => this%cx%model()

      call check_model(ml, [I_V_2,I_U,I_C_1,I_GAMMA_1])

      allocate(this%coeff(2,J_LAST))

      ! Inner boundary

      select case (this%type_i)
      case (REGULAR_TYPE)
         this%coeff(1,J_C_1) = ml%coeff(I_C_1, pt_i)
      case (ZERO_R_TYPE)
      case default
         @:ABORT('invalid type_i')
      end select

      ! Outer boundary

      select case (this%type_o)
      case (VACUUM_TYPE)
         this%coeff(2, J_U) = ml%coeff(I_U, pt_o)
      case (DZIEM_TYPE)
         this%coeff(2,J_V) = ml%coeff(I_V_2, pt_o)*pt_o%x**2
         this%coeff(2,J_C_1) = ml%coeff(I_C_1, pt_o)
      case (ISOTHRM_TYPE)
         call eval_atmos_coeffs_isothrm(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
      case (UNNO_TYPE)
         call eval_atmos_coeffs_unno(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
      case (JCD_TYPE)
         call eval_atmos_coeffs_isothrm(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
      case default
         @:ABORT('invalid type_o')
      end select

      ! Set up stencil for the tr component

      call this%tr%stencil([pt_i,pt_o])

      ! Finish

      return

   end subroutine stencil_

   !****

   subroutine build_i(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions

      select case (this%type_i)
      case (REGULAR_TYPE)
         call this%build_regular_i_(st, B, scl)
      case (ZERO_R_TYPE)
         call this%build_zero_r_i_(st, B, scl)
      case default
         @:ABORT('invalid type_i')
      end select

      ! Apply the variables transformation

      call this%tr%trans_cond(B, 1, st)

      ! Finish

      return

   end subroutine build_i

   !****

   subroutine build_regular_i_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      real(RD) :: omega_c

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions (regular-enforcing)

      associate( &
         omega => st%omega, &
         c_1 => this%coeff(1,J_C_1), &
         alpha_omg => this%alpha_omg)

         omega_c = omega

         ! Set up the boundary conditions

         B(1,1) = c_1*alpha_omg*omega_c**2
         B(1,2) = 0._RD

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_regular_i_

   !****

   subroutine build_zero_r_i_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions (zero radial
      ! displacement)

      ! Set up the boundary conditions

      B(1,1) = 1._RD
      B(1,2) = 0._RD

      scl = 1._RD

      ! Finish

      return

   end subroutine build_zero_r_i_

   !****

   subroutine build_o (this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions

      select case (this%type_o)
      case (VACUUM_TYPE)
         call this%build_vacuum_o_(st, B, scl)
      case (DZIEM_TYPE)
         call this%build_dziem_o_(st, B, scl)
      case (ISOTHRM_TYPE)
         call this%build_decomp_o_(st, B, scl)
      case (UNNO_TYPE)
         call this%build_decomp_o_(st, B, scl)
      case (JCD_TYPE)
         call this%build_jcd_o_(st, B, scl)
      case default
         @:ABORT('invalid type_o')
      end select

      ! Apply the variables transformation

      call this%tr%trans_cond(B, 2, st)

      ! Finish

      return

   end subroutine build_o

   !****

   subroutine build_vacuum_o_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions (vacuum)

      ! Set up the boundary conditions

      B(1,1) = 1._RD
      B(1,2) = -1._RD

      scl = 1._RD

      ! Finish

      return

   end subroutine build_vacuum_o_

   !****

   subroutine build_dziem_o_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      real(RD) :: omega_c

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions ([Dzi1971] formulation)

      associate( &
         omega => st%omega, &
         V => this%coeff(2,J_V), &
         c_1 => this%coeff(2,J_C_1), &
         alpha_omg => this%alpha_omg)

         omega_c = omega

         ! Set up the boundary conditions

         B(1,1) = 1 - (4._RD + c_1*alpha_omg*omega_c**2)/V
         B(1,2) = -1._RD

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_dziem_o_

   !****

   subroutine build_decomp_o_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      real(RD) :: omega_c
      real(RD) :: a_11
      real(RD) :: a_12
      real(RD) :: chi

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions, based on a local
      ! eigendecomposition

      associate( &
         omega => st%omega, &
         V => this%coeff(2,J_V), &
         As => this%coeff(2,J_AS), &
         c_1 => this%coeff(2,J_C_1), &
         Gamma_1 => this%coeff(2,J_GAMMA_1), &
         alpha_omg => this%alpha_omg)

         omega_c = omega

         ! Evaluate selected elements of the Jacobian matrix

         a_11 = V/Gamma_1 - 3._RD
         a_12 = -V/Gamma_1

         ! Evaluate the eigenvalue for the wave we want to keep

         chi = atmos_chi(V, As, c_1, Gamma_1, alpha_omg, omega_c, 0._RD)

         ! Set up the boundary conditions

         B(1,1) = -(chi - a_11)
         B(1,2) = a_12

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_decomp_o_

   !****

   subroutine build_jcd_o_(this, st, B, scl)

      class(rad_bound_t), intent(in) :: this
      class(state_rt), intent(in)    :: st
      real(RD), intent(out)          :: B(:,:)
      real(RD), intent(out)          :: scl(:)

      real(RD) :: omega_c
      real(RD) :: chi
      real(RD) :: b_11
      real(RD) :: b_12

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions ([Chr2008] formulation)

      ! Calculate coefficients

      associate( &
         omega => st%omega, &
         V => this%coeff(2,J_V), &
         As => this%coeff(2,J_AS), &
         c_1 => this%coeff(2,J_C_1), &
         Gamma_1 => this%coeff(2,J_GAMMA_1), &
         alpha_omg => this%alpha_omg)

         omega_c = omega

         chi = atmos_chi(V, As, c_1, Gamma_1, alpha_omg, omega_c, 0._RD)

         b_11 = V/Gamma_1 - 3._RD
         b_12 = -V/Gamma_1

         ! Set up the boundary conditions

         B(1,1) = chi - b_11
         B(1,2) = -b_12

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_jcd_o_

end module rad_bound_m
