! Module  : tar_rot_m
! Purpose : rotational effects (traditional approximation of rotation)
!
! Copyright 2013-2016 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tar_rot_m

   ! Uses

   use forum_m, only: RD, hdf5io_t, OPEN_FILE_RO

   use constants_m
   use math_m
   use mode_par_m
   use tar_fit_m
   use rot_m
   use rot_par_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   #:for S in DTYPE_SUFFIXES

      ! Derived-type definitions

      type, extends(rot_${S}$) :: tar_rot_${S}$
         private
         type(tar_fit_t) :: tf
         integer         :: l
         integer         :: m
         logical         :: rossby
      contains
         private
         procedure, public :: l_e => l_e_${S}$_
         procedure, public :: lambda => lambda_${S}$_
      end type tar_rot_${S}$

      ! Interfaces

      interface tar_rot_${S}$
         module procedure tar_rot_${S}$_
      end interface tar_rot_${S}$

      ! Access specifiers

      public :: tar_rot_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function tar_rot_${S}$_(md_p, rt_p) result(rt)

         type(mode_par_t), intent(in) :: md_p
         type(rot_par_t), intent(in)  :: rt_p
         type(tar_rot_${S}$)          :: rt

         integer                 :: k
         character(FILENAME_LEN) :: filename
         type(hdf5io_t)          :: hi

         ! Construct the tar_rot_t

         if (rt_p%rossby) then
            k = -(md_p%l - ABS(md_p%m) + 1)
         else
            k = md_p%l - ABS(md_p%m)
         endif

         !$OMP CRITICAL

         write(filename, 100) md_p%m, k
100      format(SP,'tar_fit.m',I0,'.k',I0,'.h5')

         hi = hdf5io_t(TRIM(GYRE_DIR)//'/data/tar/'//TRIM(filename), OPEN_FILE_RO)
         call read(hi, rt%tf)
         call hi%final()

         !$OMP END CRITICAL

         rt%l = md_p%l
         rt%m = md_p%m

         rt%rossby = rt_p%rossby

         ! Finish

         return

      end function tar_rot_${S}$_

      !****

      function l_e_${S}$_(this, Omega_rot, omega) result(l_e)

         class(tar_rot_${S}$), intent(in) :: this
         real(RD), intent(in)             :: Omega_rot
         ${T}$, intent(in)                :: omega
         ${T}$                            :: l_e

         ! Evaluate the effective harmonic degree

         l_e = 0.5_RD*(-1._RD + sqrt(1._RD + 4._RD*this%lambda(Omega_rot, omega)))

         ! Finish

         return

      end function l_e_${S}$_

      !****

      function lambda_${S}$_(this, Omega_rot, omega) result(lambda)

         class(tar_rot_${S}$), intent(in) :: this
         real(RD), intent(in)             :: Omega_rot
         ${T}$, intent(in)                :: omega
         ${T}$                            :: lambda

         ${T}$ :: nu

         ! Evaluate the angular eigenvalue

         nu = 2._RD*Omega_rot/(omega - this%m*Omega_rot)

         lambda = this%tf%lambda(nu)

         ! Finish

         return

      end function lambda_${S}$_

   #:endfor

end module tar_rot_m
