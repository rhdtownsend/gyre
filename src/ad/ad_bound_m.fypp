! Module  : ad_bound_m
! Purpose : adiabatic boundary conditions
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module ad_bound_m

   ! Uses

   use forum_m, only: RD

   use ad_trans_m
   use atmos_m
   use bound_m
   use context_m
   use model_m
   use model_util_m
   use mode_par_m
   use osc_par_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: REGULAR_TYPE = 1
   integer, parameter :: ZERO_R_TYPE = 2
   integer, parameter :: ZERO_H_TYPE = 3
   integer, parameter :: VACUUM_TYPE = 4
   integer, parameter :: DZIEM_TYPE = 5
   integer, parameter :: ISOTHRM_TYPE = 6
   integer, parameter :: UNNO_TYPE = 7
   integer, parameter :: JCD_TYPE = 8
   integer, parameter :: GAMMA1_TYPE = 9
   integer, parameter :: GAMMA2_TYPE = 10

   integer, parameter :: J_V = 1
   integer, parameter :: J_AS = 2
   integer, parameter :: J_U = 3
   integer, parameter :: J_C_1 = 4
   integer, parameter :: J_GAMMA_1 = 5

   integer, parameter :: J_LAST = J_GAMMA_1

   ! Derived-type definitions

   type, extends(bound_rt) :: ad_bound_t
      private
      type(context_t), pointer :: cx => null()
      type(point_t)            :: pt(2)
      type(ad_trans_t)         :: tr
      real(RD), allocatable    :: coeff(:,:)
      real(RD)                 :: alpha_grv
      real(RD)                 :: alpha_omg
      integer                  :: type_i
      integer                  :: type_o
      logical                  :: U_term
   contains
      private
      procedure         :: stencil_
      procedure, public :: build_i
      procedure         :: build_regular_i_
      procedure         :: build_zero_r_i_
      procedure         :: build_zero_h_i_
      procedure, public :: build_o
      procedure         :: build_vacuum_o_
      procedure         :: build_dziem_o_
      procedure         :: build_decomp_o_
      procedure         :: build_jcd_o_
      procedure         :: build_gamma1_o_
      procedure         :: build_gamma2_o_
   end type ad_bound_t

   ! Interfaces

   interface ad_bound_t
      module procedure ad_bound_t_
   end interface ad_bound_t

   ! Access specifiers

   public :: ad_bound_t

   ! Default access

   private

contains

   function ad_bound_t_(cx, md_p, os_p) result(bd)

      type(context_t), pointer, intent(in) :: cx
      type(mode_par_t), intent(in)         :: md_p
      type(osc_par_t), intent(in)          :: os_p
      type(ad_bound_t)                     :: bd

      class(model_t), pointer :: ml
      type(point_t)           :: pt_i
      type(point_t)           :: pt_o

      ! Construct the ad_bound type

      bd%cx => cx

      bd%tr = ad_trans_t(cx, md_p, os_p)

      ml => cx%model()
      pt_i = cx%point_i()
      pt_o = cx%point_o()

      select case (os_p%inner_bound)
      case ('REGULAR')
         @:ASSERT(pt_i%x == 0._RD, 'boundary condition invalid for x /= 0')
         bd%type_i = REGULAR_TYPE
      case ('ZERO_R')
         @:ASSERT(pt_i%x /= 0._RD, 'boundary condition invalid for x == 0')
         bd%type_i = ZERO_R_TYPE
      case ('ZERO_H')
         @:ASSERT(pt_i%x /= 0._RD, 'boundary condition invalid for x == 0')
         bd%type_i = ZERO_H_TYPE
      case default
         @:ABORT('invalid inner_bound')
      end select

      select case (os_p%outer_bound)
      case ('VACUUM')
         bd%type_o = VACUUM_TYPE
      case ('DZIEM')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = DZIEM_TYPE
         end if
      case ('ISOTHERMAL')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = ISOTHRM_TYPE
         end if
      case ('UNNO')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = UNNO_TYPE
         end if
      case ('JCD')
         if (ml%is_vacuum(pt_o)) then
            bd%type_o = VACUUM_TYPE
         else
            bd%type_o = JCD_TYPE
         end if
      case ('GAMMA1')
         bd%type_o = GAMMA1_TYPE
      case ('GAMMA2')
         bd%type_o = GAMMA2_TYPE
      case default
         @:ABORT('invalid outer_bound')
      end select

      bd%alpha_grv = os_p%alpha_grv

      select case (os_p%time_factor)
      case ('OSC')
         bd%alpha_omg = 1._RD
      case ('EXP')
         bd%alpha_omg = -1._RD
      case default
         @:ABORT('invalid time_factor')
      end select

      call bd%stencil_(pt_i, pt_o)

      bd%n_i = 2
      bd%n_o = 2

      bd%n_e = 4

      ! Finish

      return

   end function ad_bound_t_

   !****

   subroutine stencil_(this, pt_i, pt_o)

      class(ad_bound_t), intent(inout) :: this
      type(point_t), intent(in)        :: pt_i
      type(point_t), intent(in)        :: pt_o

      class(model_t), pointer :: ml

      ! Calculate coefficients at the stencil points

      ml => this%cx%model()

      call check_model(ml, [I_V_2,I_U,I_C_1,I_GAMMA_1])

      allocate(this%coeff(2,J_LAST))

      ! Inner boundary

      select case (this%type_i)
      case (REGULAR_TYPE)
         this%coeff(1,J_C_1) = ml%coeff(I_C_1, pt_i)
      case (ZERO_R_TYPE)
      case (ZERO_H_TYPE)
      case default
         @:ABORT('invalid type_i')
      end select

      ! Outer boundary

      select case (this%type_o)
      case (VACUUM_TYPE)
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
      case (DZIEM_TYPE)
         this%coeff(2,J_V) = ml%coeff(I_V_2, pt_o)*pt_o%x**2
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
         this%coeff(2,J_C_1) = ml%coeff(I_C_1, pt_o)
      case (ISOTHRM_TYPE)
         call eval_atmos_coeffs_isothrm(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
      case (UNNO_TYPE)
         call eval_atmos_coeffs_unno(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
      case (JCD_TYPE)
         call eval_atmos_coeffs_isothrm(ml, pt_o, this%coeff(2,J_V), &
            this%coeff(2,J_AS), this%coeff(2,J_C_1), this%coeff(2,J_GAMMA_1))
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
      case (GAMMA1_TYPE)
      case (GAMMA2_TYPE)
         this%coeff(2,J_C_1) = ml%coeff(I_C_1, pt_o)
         this%coeff(2,J_GAMMA_1) = ml%coeff(I_GAMMA_1, pt_o)
         this%coeff(2,J_V) = ml%coeff(I_V_2, pt_o)
         this%coeff(2,J_U) = ml%coeff(I_U, pt_o)
      case default
         @:ABORT('invalid type_o')
      end select

      ! Set up stencil for the tr component

      call this%tr%stencil([pt_i,pt_o])

      ! Store the stencil points for on-the-fly evaluations

      this%pt = [pt_i,pt_o]

      ! Finish

      return

   end subroutine stencil_

   !****

   subroutine build_i(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      ! Evaluate the inner boundary conditions

      select case (this%type_i)
      case (REGULAR_TYPE)
         call this%build_regular_i_(st, B, scl)
      case (ZERO_R_TYPE)
         call this%build_zero_r_i_(st, B, scl)
      case (ZERO_H_TYPE)
         call this%build_zero_h_i_(st, B, scl)
      case default
         @:ABORT('invalid type_i')
      end select

      ! Apply the variables transformation

      call this%tr%trans_cond(B, 1, st)

      ! Finish

      return

   end subroutine build_i

   !****

   subroutine build_regular_i_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: l_i

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions (regular-enforcing)

      associate( &
         c_1 => this%coeff(1,J_C_1), &
         pt => this%pt(1), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         l_i = this%cx%l_e(Omega_rot, st)

         ! Set up the boundary conditions

         B(1,1) = c_1*alpha_omg*omega_c**2
         B(1,2) = -l_i
         B(1,3) = alpha_grv*(-l_i)
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(0._RD)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_i)
         B(2,4) = alpha_grv*(-1._RD) + (1._RD - alpha_grv)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_regular_i_

   !****

   subroutine build_zero_r_i_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions (zero radial
      ! displacement/gravity)

      associate( &
         alpha_grv => this%alpha_grv)

         ! Set up the boundary conditions

         B(1,1) = 1._RD
         B(1,2) = 0._RD
         B(1,3) = alpha_grv*(0._RD)
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(0._RD)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(0._RD)
         B(2,4) = alpha_grv*(1._RD) + (1._RD - alpha_grv)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_zero_r_i_

   !****

   subroutine build_zero_h_i_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_i)

      ! Evaluate the inner boundary conditions (zero
      ! horizontal displacement/gravity)

      associate( &
         alpha_grv => this%alpha_grv)

         ! Set up the boundary conditions

         B(1,1) = 0._RD
         B(1,2) = 1._RD
         B(1,3) = alpha_grv*(1._RD)
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(0._RD)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(0._RD)
         B(2,4) = alpha_grv*(1._RD) + (1._RD - alpha_grv)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_zero_h_i_

   !****

   subroutine build_o(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      ! Evaluate the outer boundary conditions

      select case (this%type_o)
      case (VACUUM_TYPE)
         call this%build_vacuum_o_(st, B, scl)
      case (DZIEM_TYPE)
         call this%build_dziem_o_(st, B, scl)
      case (ISOTHRM_TYPE)
         call this%build_decomp_o_(st, B, scl)
      case (UNNO_TYPE)
         call this%build_decomp_o_(st, B, scl)
      case (JCD_TYPE)
         call this%build_jcd_o_(st, B, scl)
      case (GAMMA1_TYPE)
         call this%build_gamma1_o_(st, B, scl)
      case (GAMMA2_TYPE)
         call this%build_gamma2_o_(st, B, scl)
      case default
         @:ABORT('invalid type_o')
      end select

      ! Apply the variables transformation

      call this%tr%trans_cond(B, 2, st)

      ! Finish

      return

   end subroutine build_o

   !****

   subroutine build_vacuum_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: l_e

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions (vacuum)

      associate( &
         U => this%coeff(2,J_U), &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv)

         Omega_rot = this%cx%Omega_rot(pt)

         l_e = this%cx%l_e(Omega_rot, st)

         ! Set up the boundary conditions

         B(1,1) = 1._RD
         B(1,2) = -1._RD
         B(1,3) = alpha_grv*(0._RD)
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(U)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_e + 1._RD) + (1._RD - alpha_grv)
         B(2,4) = alpha_grv*(1._RD)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_vacuum_o_

   !****

   subroutine build_dziem_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: lambda
      real(RD) :: l_e

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions ([Dzi1971] formulation)

      associate( &
         V => this%coeff(2,J_V), &
         U => this%coeff(2,J_U), &
         c_1 => this%coeff(2,J_C_1), &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         lambda = this%cx%lambda(Omega_rot, st)
         l_e = this%cx%l_e(Omega_rot, st)

         ! Set up the boundary conditions

         B(1,1) = 1._RD + (lambda/(c_1*alpha_omg*omega_c**2) - 4._RD - c_1*alpha_omg*omega_c**2)/V
         B(1,2) = -1._RD
         B(1,3) = alpha_grv*((lambda/(c_1*alpha_omg*omega_c**2) - l_e - 1._RD)/V)
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(U)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_e + 1._RD) + (1._RD - alpha_grv)
         B(2,4) = alpha_grv*(1._RD)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_dziem_o_

   !****

   subroutine build_decomp_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: lambda
      real(RD) :: l_e
      real(RD) :: a_11
      real(RD) :: a_12
      real(RD) :: a_13
      real(RD) :: a_14
      real(RD) :: a_21
      real(RD) :: a_22
      real(RD) :: a_23
      real(RD) :: a_24
      real(RD) :: chi
      real(RD) :: G_1
      real(RD) :: G_2

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions, based on a local
      ! eigendecomposition

      associate( &
         V => this%coeff(2,J_V), &
         As => this%coeff(2,J_AS), &
         U => this%coeff(2,J_U), &
         c_1 => this%coeff(2,J_C_1), &
         Gamma_1 => this%coeff(2,J_GAMMA_1), &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         lambda = this%cx%lambda(Omega_rot, st)
         l_e = this%cx%l_e(Omega_rot, st)

         ! Evaluate selected elements of the Jacobian matrix

         a_11 = V/Gamma_1 - 3._RD
         a_12 = lambda/(c_1*alpha_omg*omega_c**2) - V/Gamma_1
         a_13 = alpha_grv*(lambda/(c_1*alpha_omg*omega_c**2))
         a_14 = alpha_grv*(0._RD)

         a_21 = c_1*alpha_omg*omega_c**2 - As
         a_22 = As + 1._RD
         a_23 = alpha_grv*(0._RD)
         a_24 = alpha_grv*(-1._RD)

         ! Evaluate the eigenvalue for the wave we want to keep

         chi = atmos_chi(V, As, c_1, Gamma_1, alpha_omg, omega_c, lambda)

         ! Evaluate selected elements of the left eigenvectors

         G_1 = (l_e*H_(-l_e, chi) + (l_e+1._RD)*H_(l_e+1._RD, chi))/(2._RD*l_e + 1._RD)
         G_2 = (H_(-l_e, chi) - H_(l_e+1._RD, chi))/(2._RD*l_e + 1._RD)

         ! Set up the boundary conditions

         B(1,1) = -(chi - a_11)
         B(1,2) = a_12
         B(1,3) = -alpha_grv*G_1
         B(1,4) = alpha_grv*G_2

         B(2,1) = alpha_grv*(U)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_e + 1._RD) + (1._RD - alpha_grv)
         B(2,4) = alpha_grv*(1._RD)

         scl = 1._RD

      end associate

      ! Finish

      return

   contains

      function H_(l, chi) result(H)

         real(RD), intent(in) :: l
         real(RD), intent(in) :: chi
         real(RD)             :: H

         ! Evaluate the H function defined in leaky boundary condition
         ! notes

         H = ((a_11 - chi)*(a_13 - a_14*(1._RD-l)) + a_12*(a_23 - a_24*(1._RD-l))) / &
            (chi + l - a_11 - a_12)

         ! Finish

         return

      end function H_

   end subroutine build_decomp_o_

   !****

   subroutine build_jcd_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: lambda
      real(RD) :: l_e
      real(RD) :: chi
      real(RD) :: b_11
      real(RD) :: b_12

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions ([Chr2008] formulation)

      associate( &
         V => this%coeff(2,J_V), &
         As => this%coeff(2,J_AS), &
         U => this%coeff(2,J_U), &
         c_1 => this%coeff(2,J_C_1), &
         Gamma_1 => this%coeff(2,J_GAMMA_1), &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         lambda = this%cx%lambda(Omega_rot, st)
         l_e = this%cx%l_e(Omega_rot, st)

         chi = atmos_chi(V, As, c_1, Gamma_1, alpha_omg, omega_c, lambda)

         b_11 = V/Gamma_1 - 3._RD
         b_12 = lambda/(c_1*alpha_omg*omega_c**2) - V/Gamma_1

         ! Set up the boundary conditions

         B(1,1) = chi - b_11
         B(1,2) = -b_12
         B(1,3) = alpha_grv*((lambda/(c_1*alpha_omg*omega_c**2) - l_e - 1._RD)*b_12/(V/Gamma_1 + As))
         B(1,4) = alpha_grv*(0._RD)

         B(2,1) = alpha_grv*(U)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_e + 1._RD) + (1._RD - alpha_grv)
         B(2,4) = alpha_grv*(1._RD)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_jcd_o_

   !****

   subroutine build_gamma1_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: l_e
      real(RD) :: lambda

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions (zero xi_r)

      associate( &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         l_e = this%cx%l_e(Omega_rot, st)
         lambda = this%cx%lambda(Omega_rot, st)

         ! Set up the boundary conditions

         B(1,1) = 1._RD
         B(1,2) = 0._RD
         B(1,3) = 0._RD
         B(1,4) = 0._RD

         B(2,1) = 0._RD
         B(2,2) = 1._RD
         B(2,3) = alpha_grv * 1._RD
         B(2,4) = 0._RD

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_gamma1_o_

   !****

   subroutine build_gamma2_o_(this, st, B, scl)

      class(ad_bound_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: B(:,:)
      real(RD), intent(out)         :: scl(:)

      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: l_e
      real(RD) :: lambda

      @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
      @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(scl), this%n_o)

      ! Evaluate the outer boundary conditions (consistent with mixed modes)

      associate( &
         U => this%coeff(2,J_U), &
         V => this%coeff(2,J_V), &
         c_1 => this%coeff(2,J_C_1), &
         Gamma_1 => this%coeff(2,J_GAMMA_1), &
         pt => this%pt(2), &
         alpha_grv => this%alpha_grv, &
         alpha_omg => this%alpha_omg)

         Omega_rot = this%cx%Omega_rot(pt)

         omega_c = this%cx%omega_c(Omega_rot, st)

         l_e = this%cx%l_e(Omega_rot, st)
         lambda = this%cx%lambda(Omega_rot, st)

         ! Set up the boundary conditions
         ! ξr ~ r^-(l+2)

         B(1,1) = V / Gamma_1 + l_e
         B(1,2) = lambda / c_1 / omega_c**2
         B(1,3) = lambda / c_1 / omega_c**2
         B(1,4) = 0._RD

         ! vanishing lagrangian pressure perturbation
         !B(1,1) = 1._RD
         !B(1,2) = 1._RD
         !B(1,3) = 0._RD
         !B(1,4) = 0._RD

         B(2,1) = alpha_grv*(0._RD)
         B(2,2) = alpha_grv*(0._RD)
         B(2,3) = alpha_grv*(l_e + 1._RD) + (1._RD - alpha_grv)
         B(2,4) = alpha_grv*(1._RD)

         scl = 1._RD

      end associate

      ! Finish

      return

   end subroutine build_gamma2_o_

end module ad_bound_m
