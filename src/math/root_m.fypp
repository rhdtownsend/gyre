! Module  : root_m
! Purpose : root finding algorithms
!
! Copyright 2013-2015 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module root_m

   ! Uses

   use forum_m, only: RD

   use ext_m
   use math_m
   use num_par_m
   use status_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Interfaces

   #:for S in FLOAT_SUFFIXES+EXT_FLOAT_SUFFIXES

      interface solve_root
         module procedure solve_root_${S}$_
      end interface solve_root

      interface narrow_bracket
         module procedure narrow_bracket_${S}$_
      end interface narrow_bracket

      interface expand_bracket
         module procedure expand_bracket_${S}$_
      end interface expand_bracket

   #:endfor

   ! Access specifiers

   public :: solve_root
   public :: narrow_bracket
   public :: expand_bracket

   ! Default access

   private

contains

   #:for T, S in zip(REAL_TYPES+EXT_REAL_TYPES, REAL_SUFFIXES+EXT_REAL_SUFFIXES)

      subroutine solve_root_${S}$_(eval_func, x_a, x_b, x_tol, nm_p, x_root, status, &
         n_iter, n_iter_max, relative_tol, f_x_a, f_x_b)

         interface
            subroutine eval_func(x, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)    :: x
               ${T}$, intent(out)   :: func
               integer, intent(out) :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(in)              :: x_a
         ${T}$, intent(in)              :: x_b
         ${T}$, intent(in)              :: x_tol
         class(num_par_t), intent(in)   :: nm_p
         ${T}$, intent(out)             :: x_root
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(in)    :: f_x_a
         ${T}$, optional, intent(in)    :: f_x_b

         ${T}$ :: a
         ${T}$ :: b
         ${T}$ :: f_a
         ${T}$ :: f_b

         ! Starting from the bracket [x_a,x_b], solve for a root of the
         ! function

         a = x_a
         b = x_b

         if (PRESENT(f_x_a)) then
            f_a = f_x_a
         else
            call eval_func(a, f_a, status)
            if (status /= STATUS_OK) return
         endif

         if (PRESENT(f_x_b)) then
            f_b = f_x_b
         else
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) return
         endif

         call narrow_bracket_${S}$_(eval_func, a, b, x_tol, nm_p, status, &
            n_iter, n_iter_max, relative_tol, f_a, f_b)

         x_root = b

         ! Finish

         return

      end subroutine solve_root_${S}$_

   #:endfor

   !****

   #:for T, T_R, S in zip(COMPLEX_TYPES+EXT_COMPLEX_TYPES, REAL_TYPES+EXT_REAL_TYPES, COMPLEX_SUFFIXES+EXT_COMPLEX_SUFFIXES)

      subroutine solve_root_${S}$_(eval_func, z_a, z_b, z_tol, nm_p, z_root, status, &
         n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)

         interface
            subroutine eval_func(x, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)  :: x
               ${T}$, intent(out) :: func
               integer, intent(out)  :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(in)              :: z_a
         ${T}$, intent(in)              :: z_b
         ${T_R}$, intent(in)            :: z_tol
         class(num_par_t), intent(in)   :: nm_p
         ${T}$, intent(out)             :: z_root
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(in)    :: f_z_a
         ${T}$, optional, intent(in)    :: f_z_b

         ${T}$ :: a
         ${T}$ :: b
         ${T}$ :: f_a
         ${T}$ :: f_b

         ! Starting from the bracket [z_a,z_b], solve for a root of the
         ! function

         a = z_a
         b = z_b

         if (PRESENT(f_z_a)) then
            f_a = f_z_a
         else
            call eval_func(a, f_a, status)
            if (status /= STATUS_OK) return
         endif

         if (PRESENT(f_z_b)) then
            f_b = f_z_b
         else
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) return
         endif

         call narrow_bracket_${S}$_(eval_func, a, b, z_tol, nm_p, status, &
            n_iter, n_iter_max, relative_tol, f_a, f_b)

         z_root = b

         ! Finish

         return

      end subroutine solve_root_${S}$_

   #:endfor

   !****

   #:for T, S in zip(REAL_TYPES+EXT_REAL_TYPES, REAL_SUFFIXES+EXT_REAL_SUFFIXES)

      subroutine narrow_bracket_${S}$_(eval_func, x_a, x_b, x_tol, nm_p, status, &
         n_iter, n_iter_max, relative_tol, f_x_a, f_x_b)

         interface
            subroutine eval_func (x, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
              ${T}$, intent(in)    :: x
               ${T}$, intent(out)   :: func
               integer, intent(out) :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)           :: x_a
         ${T}$, intent(inout)           :: x_b
         ${T}$, intent(in)              :: x_tol
         class(num_par_t), intent(in)   :: nm_p
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(inout) :: f_x_a
         ${T}$, optional, intent(inout) :: f_x_b

         ! Narrow the bracket [x_a,x_b] on a root of the function

         select case (nm_p%r_root_solver)
         case ('BRENT')
            call narrow_brent_${S}$_(eval_func, x_a, x_b, x_tol, status, n_iter, n_iter_max, relative_tol, f_x_a, f_x_b)
         case default
            @:ABORT('invalid r_root_solver')
         end select

         ! Finish

         return

      end subroutine narrow_bracket_${S}$_

      !****

      subroutine narrow_brent_${S}$_(eval_func, x_a, x_b, x_tol, status, &
         n_iter, n_iter_max, relative_tol, f_x_a, f_x_b)

         interface
            subroutine eval_func(x, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)  :: x
               ${T}$, intent(out) :: func
               integer, intent(out)  :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)           :: x_a
         ${T}$, intent(inout)           :: x_b
         ${T}$, intent(in)              :: x_tol
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(inout) :: f_x_a
         ${T}$, optional, intent(inout) :: f_x_b

         logical  :: relative_tol_
         ${T}$    :: a
         ${T}$    :: b
         ${T}$    :: c
         ${T}$    :: d
         ${T}$    :: e
         ${T}$    :: f_a
         ${T}$    :: f_b
         ${T}$    :: f_c
         ${T}$    :: tol
         ${T}$    :: m
         ${T}$    :: p
         ${T}$    :: q
         ${T}$    :: r
         ${T}$    :: s
         integer  :: i_iter

         if (PRESENT(relative_tol)) then
            relative_tol_ = relative_tol
         else
            relative_tol_ = .FALSE.
         endif

         ! Narrow the bracket [x_a,x_b] on a root of the function
         ! using Brent's method [based on the ALGOL 60 routine 'zero'
         ! published in [Bre1973]

         ! Set up the initial state

         a = x_a
         b = x_b

         if (PRESENT(f_x_a)) then
            f_a = f_x_a
         else
            call eval_func(a, f_a, status)
            if (status /= STATUS_OK) return
         endif

         if (PRESENT(f_x_b)) then
            f_b = f_x_b
         else
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) return
         endif

         c = b
         f_c = f_b

         ! Confirm that the bracket contains a root

         @:ASSERT((f_a >= 0._RD .AND. f_b <= 0._RD) .OR. (f_a <= 0._RD .AND. f_b >= 0._RD), 'root is not bracketed')

         ! Iterate until convergence to the desired tolerance, or the
         ! maximum number of iterations is exceeded

         i_iter = 0

         status = STATUS_OK

         iterate_loop : do

            i_iter = i_iter + 1

            if (PRESENT(n_iter_max)) then
               if (i_iter > n_iter_max) then
                  status = STATUS_ITER_MAX
                  exit iterate_loop
               endif
            endif

            ! Reorder c so that it has the opposite sign to b

            if (f_b > 0._RD .EQV. f_c > 0._RD) then
               c = a
               f_c = f_a
               d = b - a
               e = d
            endif

            ! Make sure that the function is smallest in magnitude
            ! at b

            if (abs(f_c) < abs(f_b)) then
               a = b
               b = c
               c = a
               f_a = f_b
               f_b = f_c
               f_c = f_a
            endif

            if (relative_tol_) then
               tol = (2._RD*EPSILON(0._RD) + x_tol)*abs(b)
            else
               tol = 2._RD*EPSILON(0._RD)*abs(b) + x_tol
            endif

            m = 0.5_RD*(c - b)

            ! Check for convergence

            if (abs(m) <= tol .OR. f_b == 0._RD) then
               exit iterate_loop
            endif

            ! See if bisection is forced

            if (abs(e) <  tol .OR. abs(f_a) < abs(f_b)) then

               d = m
               e = d

            else

               s = f_b/f_a

               if (a == c) then

                  ! Linear interpolation

                  p = 2._RD*m*s
                  q = 1._RD - s

               else

                  ! Inverse quadratic interpolation

                  q = f_a/f_c
                  r = f_b/f_c

                  p = s*(2._RD*m*q*(q - r) - (b - a)*(r - 1._RD))
                  q = (q - 1._RD)*(r - 1._RD)*(s - 1._RD)

               endif

               if (p > 0._RD) then
                  q = -q
               else
                  p = -p
               endif

               s = e
               e = d

               if (2._RD*p < 3._RD*m*q - abs(tol*q) .AND. p < abs(0.5_RD*s*q)) then
                  d = p/q
               else
                  d = m
                  e = d
               endif

            endif

            ! Store the old value of b in a

            a = b
            f_a = f_b

            ! Update b

            if (abs(d) > tol) then
               b = b + d
            else
               if(m > 0._RD) then
                  b = b + tol
               else
                  b = b - tol
               endif
            endif

            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) exit iterate_loop

         end do iterate_loop

         ! Store the results

         x_a = a
         x_b = b

         if (PRESENT(n_iter)) then
            n_iter = i_iter
         end if

         if (PRESENT(f_x_a)) f_x_a = f_a
         if (PRESENT(f_x_b)) f_x_b = f_b

         ! Finish

         return

      end subroutine narrow_brent_${S}$_

      !****

      subroutine expand_bracket_${S}$_(eval_func, x_a, x_b, status, clamp_a, clamp_b, f_x_a, f_x_b)

         interface
            subroutine eval_func(x, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)  :: x
               ${T}$, intent(out) :: func
               integer, intent(out)  :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)          :: x_a
         ${T}$, intent(inout)          :: x_b
         integer, intent(out)          :: status
         logical, optional, intent(in) :: clamp_a
         logical, optional, intent(in) :: clamp_b
         ${T}$, optional, intent(out)  :: f_x_a
         ${T}$, optional, intent(out)  :: f_x_b

         logical  :: clamp_a_
         logical  :: clamp_b_
         ${T}$ :: f_a
         ${T}$ :: f_b
         logical  :: move_a

         if (PRESENT(clamp_a)) then
            clamp_a_ = clamp_a
         else
            clamp_a_ = .FALSE.
         endif

         if (PRESENT(clamp_b)) then
            clamp_b_ = clamp_b
         else
            clamp_b_ = .FALSE.
         endif

         @:ASSERT(.NOT. (clamp_a_ .AND. clamp_b_), 'cannot clamp both points')

         @:ASSERT(x_a /= x_b, 'invalid initial bracket')

         ! Expand the bracket [x_a,x_b] until it contains a root of the
         ! function

         call eval_func(x_a, f_a, status)
         if (status /= STATUS_OK) return

         call eval_func(x_b, f_b, status)
         if (status /= STATUS_OK) return

         status = STATUS_OK

         expand_loop : do

            if ((f_a > 0._RD .AND. f_b < 0._RD) .OR. &
               (f_a < 0._RD .AND. f_b > 0._RD)) exit expand_loop

            if (clamp_a_) then
               move_a = .FALSE.
            elseif (clamp_b_) then
               move_a = .TRUE.
            else
               move_a = abs(f_b) > abs(f_a)
            endif

            if (move_a) then

               x_a = x_a + GOLDEN_R*(x_a - x_b)

               call eval_func(x_a, f_a, status)
               if (status /= STATUS_OK) exit expand_loop

            else

               x_b = x_b + GOLDEN_R*(x_b - x_a)

               call eval_func(x_b, f_b, status)
               if (status /= STATUS_OK) exit expand_loop

            endif

         end do expand_loop

         ! Store the results

         if (PRESENT(f_x_a)) f_x_a = f_a
         if (PRESENT(f_x_b)) f_x_b = f_b

         ! Finish

         return

      end subroutine expand_bracket_${S}$_

   #:endfor

   !****

   #:for T, T_R, S in zip(COMPLEX_TYPES+EXT_COMPLEX_TYPES, REAL_TYPES+EXT_REAL_TYPES, COMPLEX_SUFFIXES+EXT_COMPLEX_SUFFIXES)

      subroutine narrow_bracket_${S}$_(eval_func, z_a, z_b, z_tol, nm_p, status, &
         n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)

         interface
            subroutine eval_func (z, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)  :: z
               ${T}$, intent(out) :: func
               integer, intent(out)    :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)           :: z_a
         ${T}$, intent(inout)           :: z_b
         ${T_R}$, intent(in)            :: z_tol
         class(num_par_t), intent(in)   :: nm_p
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(inout) :: f_z_a
         ${T}$, optional, intent(inout) :: f_z_b

         ! Narrow the bracket [z_a,z_b] toward a root of the function

         select case (nm_p%c_root_solver)
         case ('SECANT')
            call narrow_secant_${S}$_(eval_func, z_a, z_b, z_tol, status, &
               n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)
         case ('RIDDERS')
            call narrow_ridders_${S}$_(eval_func, z_a, z_b, z_tol, status, &
               n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)
         case default
            @:ABORT('invalid c_root_solver')
         end select

         ! Finish

         return

      end subroutine narrow_bracket_${S}$_

      !****

      subroutine narrow_secant_${S}$_(eval_func, z_a, z_b, z_tol, status, &
         n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)

         interface
            subroutine eval_func(z, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)    :: z
               ${T}$, intent(out)   :: func
               integer, intent(out) :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)           :: z_a
         ${T}$, intent(inout)           :: z_b
         ${T_R}$, intent(in)            :: z_tol
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(inout) :: f_z_a
         ${T}$, optional, intent(inout) :: f_z_b

         logical :: relative_tol_
         ${T}$   :: a
         ${T}$   :: b
         ${T}$   :: c
         ${T}$   :: f_a
         ${T}$   :: f_b
         ${T}$   :: f_c
         integer :: i_iter
         ${T}$   :: f_dz
         ${T}$   :: rho
         ${T_R}$ :: tol

         if (PRESENT(relative_tol)) then
            relative_tol_ = relative_tol
         else
            relative_tol_ = .FALSE.
         endif

         ! Narrow the bracket [z_a,z_b] toward a root of the function !
         ! using the secant method

         ! Set up the initial state

         a = z_a
         b = z_b

         if (PRESENT(f_z_a)) then
            f_a = f_z_a
         else
            call eval_func(a, f_a, status)
            if (status /= STATUS_OK) return
         endif

         if (PRESENT(f_z_b)) then
            f_b = f_z_b
         else
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) return
         endif

         if (abs(f_a) < abs(f_b)) then

            c = a
            a = b
            b = c

            f_c = f_a
            f_a = f_b
            f_b = f_c

         endif

         ! Iterate until convergence to the desired tolerance, or the
         ! maximum number of iterations is exceeded

         i_iter = 0

         status = STATUS_OK

         iterate_loop : do

            if (f_b == 0._RD) exit iterate_loop

            i_iter = i_iter + 1

            if (PRESENT(n_iter_max)) then
               if (i_iter > n_iter_max) then
                  status = STATUS_ITER_MAX
                  exit iterate_loop
               endif
            endif

            ! Calculate the correction

            f_dz = f_b*(b - a)

            rho = f_b - f_a

            ! Check for a singular correction

            if (abs(b*rho) < 8._RD*EPSILON(0._RD)*abs(f_dz)) then
               @:ABORT('singular correction in secant')
            endif

            ! Update the root

            a = b
            f_a = f_b

            b = b - f_dz/rho
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) exit iterate_loop

            ! Check for convergence

            if (relative_tol_) then
               tol = (4._RD*EPSILON(0._RD) + z_tol)*abs(b)
            else
               tol = 4._RD*EPSILON(0._RD)*abs(b) + z_tol
            endif

            if (abs(b - a) <= tol) exit iterate_loop

         end do iterate_loop

         ! Store the results

         z_a = a
         z_b = b

         if (PRESENT(n_iter)) n_iter = i_iter

         if (PRESENT(f_z_a)) f_z_a = f_a
         if (PRESENT(f_z_b)) f_z_b = f_b

         ! Finish

      end subroutine narrow_secant_${S}$_

      !****

      subroutine narrow_ridders_${S}$_(eval_func, z_a, z_b, z_tol, status, &
         n_iter, n_iter_max, relative_tol, f_z_a, f_z_b)

         interface
            subroutine eval_func (z, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)    :: z
               ${T}$, intent(out)   :: func
               integer, intent(out) :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)           :: z_a
         ${T}$, intent(inout)           :: z_b
         ${T_R}$, intent(in)            :: z_tol
         integer, intent(out)           :: status
         integer, optional, intent(out) :: n_iter
         integer, optional, intent(in)  :: n_iter_max
         logical, optional, intent(in)  :: relative_tol
         ${T}$, optional, intent(inout) :: f_z_a
         ${T}$, optional, intent(inout) :: f_z_b

         logical :: relative_tol_
         ${T}$   :: a
         ${T}$   :: b
         ${T}$   :: c
         ${T}$   :: f_a
         ${T}$   :: f_b
         ${T}$   :: f_c
         integer :: i_iter
         ${T}$   :: exp_Q_p
         ${T}$   :: exp_Q_m
         ${T}$   :: exp_Q
         ${T}$   :: f_dz
         ${T}$   :: rho
         ${T_R}$ :: tol

         if (PRESENT(relative_tol)) then
            relative_tol_ = relative_tol
         else
            relative_tol_ = .FALSE.
         endif

         @:ASSERT(z_a /= z_b, 'invalid initial bracket')

         ! Narrow the bracket [z_a,z_b] toward a root of the function using
         ! a complex Ridders' method (with secant updates, rather than
         ! regula falsi)

         ! Set up the initial state

         a = z_a
         b = z_b

         if (PRESENT(f_z_a)) then
            f_a = f_z_a
         else
            call eval_func(a, f_a, status)
            if (status /= STATUS_OK) return
         endif

         if (PRESENT(f_z_b)) then
            f_b = f_z_b
         else
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) return
         endif

         if (abs(f_a) < abs(f_b)) then

            c = a
            a = b
            b = c

            f_c = f_a
            f_a = f_b
            f_b = f_c

         endif

         ! Iterate until convergence to the desired tolerance, or the
         ! maximum number of iterations is exceeded

         i_iter = 0

         status = STATUS_OK

         iterate_loop : do

            if (f_b == 0._RD) exit iterate_loop

            i_iter = i_iter + 1

            if (PRESENT(n_iter_max)) then
               if (i_iter > n_iter_max) then
                  status = STATUS_ITER_MAX
                  exit iterate_loop
               end if
            endif

            ! Calculate the mid-point values

            c =  0.5_RD*(a + b)

            call eval_func(c, f_c, status)
            if (status /= STATUS_OK) exit iterate_loop

            ! Solve for the re-scaling exponential

            exp_Q_p = (f_c + sqrt(f_c*f_c - f_a*f_b))/f_b
            exp_Q_m = (f_c - sqrt(f_c*f_c - f_a*f_b))/f_b

            if (abs(exp_Q_p-1._RD) < abs(exp_Q_m-1._RD)) then
               exp_Q = exp_Q_p
            else
               exp_Q = exp_Q_m
            endif

            ! Apply the secant method to the re-scaled problem

            f_dz = f_b*(exp_Q*exp_Q)*(b - a)

            rho = f_b*(exp_Q*exp_Q) - f_a

            ! Check for a singular correction

            if (abs(b*rho) < 8._RD*EPSILON(0._RD)*abs(f_dz)) then
               @:ABORT('singular correction in secant')
            endif

            ! Update the root

            a = b
            f_a = f_b

            b = b - f_dz/rho
            call eval_func(b, f_b, status)
            if (status /= STATUS_OK) exit iterate_loop

            ! Check for convergence

            if (relative_tol_) then
               tol = (4._RD*EPSILON(0._RD) + z_tol)*abs(b)
            else
               tol = 4._RD*EPSILON(0._RD)*abs(b) + z_tol
            endif

            if (abs(b - a) <= tol) exit iterate_loop

         end do iterate_loop

         ! Store the results

         z_a = a
         z_b = b

         if (PRESENT(n_iter)) n_iter = i_iter

         if (PRESENT(f_z_a)) f_z_a = f_a
         if (PRESENT(f_z_b)) f_z_b = f_b

         ! Finish

         return

      end subroutine narrow_ridders_${S}$_

      !****

      subroutine expand_bracket_${S}$_(eval_func, z_a, z_b, f_z_tol, status, &
         clamp_a, clamp_b, relative_tol, f_z_a, f_z_b)

         interface
            subroutine eval_func(z, func, status)
               use forum_m, only: RD
               use ext_m
               implicit none
               ${T}$, intent(in)  :: z
               ${T}$, intent(out) :: func
               integer, intent(out)    :: status
            end subroutine eval_func
         end interface
         ${T}$, intent(inout)          :: z_a
         ${T}$, intent(inout)          :: z_b
         ${T_R}$, intent(in)           :: f_z_tol
         integer, intent(out)          :: status
         ${T}$, optional, intent(out)  :: f_z_a
         ${T}$, optional, intent(out)  :: f_z_b
         logical, optional, intent(in) :: clamp_a
         logical, optional, intent(in) :: clamp_b
         logical, optional, intent(in) :: relative_tol

         logical :: relative_tol_
         logical :: clamp_a_
         logical :: clamp_b_
         ${T}$   :: f_a
         ${T}$   :: f_b
         ${T_R}$ :: tol
         logical :: move_a

         if (PRESENT(clamp_a)) then
            clamp_a_ = clamp_a
         else
            clamp_a_ = .FALSE.
         endif

         if (PRESENT(clamp_b)) then
            clamp_b_ = clamp_b
         else
            clamp_b_ = .FALSE.
         endif

         @:ASSERT(.NOT. (clamp_a_ .AND. clamp_b_), 'cannot clamp both points')

         if (PRESENT(relative_tol)) then
            relative_tol_ = relative_tol
         else
            relative_tol_ = .FALSE.
         endif

         @:ASSERT(z_a /= z_b, 'invalid initial bracket')

         ! Expand the bracket [z_a,z_b] until the difference between f(z_a)
         ! and f(z_b) exceeds the tolerance

         call eval_func(z_a, f_a, status)
         if (status /= STATUS_OK) return

         call eval_func(z_b, f_b, status)
         if (status /= STATUS_OK) return

         status = STATUS_OK

         expand_loop : do

            if (relative_tol_) then
               tol = (4._RD*EPSILON(0._RD) + f_z_tol)*max(abs(f_a), abs(f_b))
            else
               tol = 4._RD*EPSILON(0._RD)*max(abs(f_a), abs(f_b)) + f_z_tol
            endif

            if (abs(f_a - f_b) > tol) exit expand_loop

            if (clamp_a_) then
               move_a = .FALSE.
            elseif (clamp_b_) then
               move_a = .TRUE.
            else
               move_a = abs(f_b) > abs(f_a)
            endif

            if (move_a) then
               z_a = z_a + GOLDEN_R*(z_a - z_b)
               call eval_func(z_a, f_a, status)
               if (status /= STATUS_OK) exit expand_loop
            else
               z_b = z_b + GOLDEN_R*(z_b - z_a)
               call eval_func(z_b, f_b, status)
               if (status /= STATUS_OK) exit expand_loop
            endif

         end do expand_loop

         ! Store f_a and f_b

         if (PRESENT(f_z_a)) f_z_a = f_a
         if (PRESENT(f_z_b)) f_z_b = f_b

         ! Finish

         return

      end subroutine expand_bracket_${S}$_

   #:endfor

end module root_m
