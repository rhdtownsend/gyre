! Module  : interp_m
! Purpose : piecewise interpolators
!
! Copyright 2015-2024 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module interp_m

   ! Uses

   ! No implicit typing

   implicit none

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      ! Derived-type definitions

      type, abstract :: interp_${S}$
      contains
         private
         procedure(get_x_min_${S}$_), deferred, public  :: get_x_min
         procedure(get_x_max_${S}$_), deferred, public  :: get_x_max
         procedure(eval_f_${S}$_), deferred, public     :: eval_f
         procedure(eval_df_dx_${S}$_), deferred, public :: eval_df_dx
      end type interp_${S}$

      ! Interfaces

      abstract interface

         subroutine get_x_min_${S}$_(this, x_min)
            use forum_m, only: RD
            import interp_${S}$
            implicit none
            class(interp_${S}$), intent(in) :: this
            real(RD), intent(out)           :: x_min
         end subroutine get_x_min_${S}$_

         subroutine get_x_max_${S}$_(this, x_max)
            use forum_m, only: RD
            import interp_${S}$
            implicit none
            class(interp_${S}$), intent(in) :: this
            real(RD), intent(out)           :: x_max
         end subroutine get_x_max_${S}$_

         subroutine eval_f_${S}$_(this, x, f)
            use forum_m, only: RD
            import interp_${S}$
            implicit none
            class(interp_${S}$), intent(in) :: this
            real(RD), intent(in)            :: x
            ${T}$, intent(out)              :: f
         end subroutine eval_f_${S}$_

         subroutine eval_df_dx_${S}$_(this, x, df_dx)
            use forum_m, only: RD
            import interp_${S}$
            implicit none
            class(interp_${S}$), intent(in) :: this
            real(RD), intent(in)            :: x
            ${T}$, intent(out)              :: df_dx
         end subroutine eval_df_dx_${S}$_

      end interface

      ! Access specifiers

      public :: interp_${S}$

   #:endfor

   ! Default access

   private

end module interp_m
