! Module  : contour_search_m
! Purpose : mode searching (complex, contour)
!
! Copyright 2013-2021 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module contour_search_m

   ! Uses

   use forum_m, only: RD, reallocate

   use bvp_m
   use contour_map_m
   use discrim_m
   use ext_m
   use num_par_m
   use prox_search_m
   use state_m
   use status_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Module variables

   integer, save :: id_m = 0

   ! Access specifiers

   public :: contour_search

   ! Default access

   private

contains

   subroutine contour_search (bp, omega_re, omega_im, omega_min, omega_max, i, nm_p, process_mode)

      class(bvp_ct), intent(inout) :: bp
      real(RD), intent(in)         :: omega_re(:)
      real(RD), intent(in)         :: omega_im(:)
      real(RD), intent(in)         :: omega_min
      real(RD), intent(in)         :: omega_max
      integer, intent(in)          :: i
      type(num_par_t), intent(in)  :: nm_p
      interface
         subroutine process_mode (md, n_iter, chi)
            use ext_m
            use mode_m
            implicit none
            type(mode_t), intent(in) :: md
            integer, intent(in)      :: n_iter
            type(ext_rt), intent(in) :: chi
         end subroutine process_mode
      end interface

      complex(RD), allocatable :: omega_in_a(:)
      complex(RD), allocatable :: omega_in_b(:)
      integer, allocatable     :: id_in(:)

      ! Find contour intersections

      call find_isects_(bp, omega_re, omega_im, i, nm_p, omega_in_a, omega_in_b, id_in)

      ! Search for modes

      call prox_search(bp, omega_in_a, omega_in_b, id_in, omega_min, omega_max, nm_p, process_mode)

      ! Finish

      return

   end subroutine contour_search

   !****

   subroutine find_isects_(bp, omega_re, omega_im, i, nm_p, omega_in_a, omega_in_b, id_in)

      class(bvp_ct), intent(inout)          :: bp
      real(RD), intent(in)                  :: omega_re(:)
      real(RD), intent(in)                  :: omega_im(:)
      integer, intent(in)                   :: i
      type(num_par_t), intent(in)           :: nm_p
      complex(RD), allocatable, intent(out) :: omega_in_a(:)
      complex(RD), allocatable, intent(out) :: omega_in_b(:)
      integer, allocatable, intent(out)     :: id_in(:)

      integer                   :: n_omega_re
      integer                   :: n_omega_im
      integer                   :: n_percent
      integer                   :: c_beg
      integer                   :: c_end
      integer                   :: c_rate
      integer                   :: j_re
      integer                   :: j_im
      complex(RD)               :: omega
      type(ext_ct)              :: discrim
      integer                   :: i_percent
      type(ext_ct), allocatable :: discrim_map(:,:)
      type(contour_map_t)       :: cm
      integer                   :: n_in
      integer                   :: d_in

      ! Calculate the discriminant on the omega grid

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Evaluating discriminant'
100      format(A)
      endif

      n_omega_re = SIZE(omega_re)
      n_omega_im = SIZE(omega_im)

      allocate(discrim_map(n_omega_re,n_omega_im))

      n_percent = 0

      call SYSTEM_CLOCK(c_beg, c_rate)

      discrim_im_loop: do j_im = 1, n_omega_im
         discrim_re_loop: do j_re = 1, n_omega_re

            omega = CMPLX(omega_re(j_re), omega_im(j_im), KIND=RD)

            call eval_discrim(bp, state_ct(omega, omega_r=omega_re(j_re)), discrim_map(j_re,j_im))

            if (check_log_level('DEBUG')) then
               i_percent = FLOOR(100._RD*((j_im-1)*n_omega_re+j_re)/(n_omega_re*n_omega_im))
               if (i_percent > n_percent) then
                  write(OUTPUT_UNIT, 110) 'Percent complete: ', i_percent
110               format(A,1X,I0)
                  n_percent = i_percent
               end if
            endif

         end do discrim_re_loop
      end do discrim_im_loop

      call SYSTEM_CLOCK(c_end)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 120) 'Time elapsed :', REAL(c_end-c_beg, RD)/c_rate, 's'
120      format(2X,A,F10.3,1X,A/)
      endif

      ! Create the contour map

      d_in = 128
      n_in = 0

      allocate(omega_in_a(d_in))
      allocate(omega_in_b(d_in))
      allocate(id_in(d_in))

      cm = contour_map_t(omega_re, omega_im, discrim_map, process_isect_)

      omega_in_a = omega_in_a(:n_in)
      omega_in_b = omega_in_b(:n_in)
      id_in = id_in(:n_in)

      ! Dump the map

      call cm%dump(nm_p, i)

      ! Finish

      return

   contains

      subroutine process_isect_(omega_a_re, omega_b_re, omega_a_im, omega_b_im)

         complex(RD), intent(in) :: omega_a_re
         complex(RD), intent(in) :: omega_b_re
         complex(RD), intent(in) :: omega_a_im
         complex(RD), intent(in) :: omega_b_im

         ! Process the intersection

         n_in = n_in + 1

         if (n_in > d_in) then
            d_in = 2*d_in
            call reallocate(omega_in_a, [d_in])
            call reallocate(omega_in_b, [d_in])
            call reallocate(id_in, [d_in])
         endif

         id_m = id_m + 1

         omega_in_a(n_in) = omega_init_(omega_a_re, omega_b_re, 'im')
         omega_in_b(n_in) = omega_init_(omega_a_im, omega_b_im, 're')

         id_in(n_in) = id_m

         ! Finish

         return

      end subroutine process_isect_

      !****

      function omega_init_(omega_a, omega_b, part) result(omega_init)

         complex(RD), intent(in)  :: omega_a
         complex(RD), intent(in)  :: omega_b
         character(*), intent(in) :: part
         complex(RD)              :: omega_init

         type(ext_ct) :: discrim_a
         type(ext_ct) :: discrim_b
         real(RD)     :: w

         ! Evaluate the discriminant at the segment endpoints

         call eval_discrim(bp, state_ct(omega_a, omega_r=REAL(omega_a)), discrim_a)
         call eval_discrim(bp, state_ct(omega_b, omega_r=REAL(omega_b)), discrim_b)

         ! Look for the point on the segment where the real/imaginary
         ! part of the discriminant changes sign

         select case (part)
         case ('re')
            w = real(-real_part(discrim_a)/(real_part(discrim_b) - real_part(discrim_a)))
         case ('im')
            w = real(-imag_part(discrim_a)/(imag_part(discrim_b) - imag_part(discrim_a)))
         case default
            @:ABORT('Invalid part')
         end select

         omega_init = (1._RD-w)*omega_a + w*omega_b

         ! Finish

         return

      end function omega_init_

   end subroutine find_isects_

end module contour_search_m
