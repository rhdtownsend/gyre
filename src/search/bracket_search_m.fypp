! Module  : bracket_search_m
! Purpose : mode searching (real, bracketing)
!
! Copyright 2013-2021 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module bracket_search_m

   ! Uses

   use forum_m, only: RD

   use ad_bvp_m
   use bvp_m
   use discrim_m
   use ext_m
   use mode_m
   use num_par_m
   use rad_bvp_m
   use root_m
   use state_m
   use status_m
   use util_m
   use wave_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Module variables

   integer, save :: id_m = 0

   ! Access specifiers

   public :: bracket_search

   ! Default access

   private

contains

   subroutine bracket_search(bp, omega, omega_min, omega_max, nm_p, process_mode)

      class(bvp_rt), intent(inout) :: bp
      real(RD), intent(in)         :: omega(:)
      real(RD), intent(in)         :: omega_min
      real(RD), intent(in)         :: omega_max
      type(num_par_t), intent(in)  :: nm_p
      interface
         subroutine process_mode (md, n_iter, chi)
            use ext_m
            use mode_m
            implicit none
            type(mode_t), intent(in)  :: md
            integer, intent(in)       :: n_iter
            type(ext_rt), intent(in)  :: chi
         end subroutine process_mode
      end interface

      real(RD), allocatable     :: omega_a(:)
      real(RD), allocatable     :: omega_b(:)
      type(ext_rt), allocatable :: discrim_a(:)
      type(ext_rt), allocatable :: discrim_b(:)
      integer                   :: c_beg
      integer                   :: c_end
      integer                   :: c_rate
      integer                   :: n_iter
      integer                   :: i
      type(ext_rt)              :: x_a
      type(ext_rt)              :: x_b
      type(ext_rt)              :: f_x_a
      type(ext_rt)              :: f_x_b
      type(ext_rt)              :: x_root
      integer                   :: status
      type(wave_t)              :: wv
      type(mode_t)              :: md
      type(ext_rt)              :: chi

      ! Find discriminant root brackets

      call find_brackets_(bp, omega, omega_a, omega_b, discrim_a, discrim_b)

      ! Process each bracket to find modes

      if (check_log_level('INFO')) then

         write(OUTPUT_UNIT, 100) 'Root Solving'
100      format(A)

         write(OUTPUT_UNIT, 110) 'l', 'm', 'n_pg', 'n_p', 'n_g', 'Re(omega)', 'Im(omega)', 'chi', 'n_iter'
110      format(1X,A3,1X,A4,1X,A7,1X,A6,1X,A6,1X,A15,1X,A15,1X,A10,1X,A6)

      endif

      call SYSTEM_CLOCK(c_beg, c_rate)

      mode_loop : do i = 1, SIZE(omega_a)

         ! Find the discriminant root

         n_iter = 0

         x_a = ext_rt(omega_a(i))
         x_b = ext_rt(omega_b(i))
         f_x_a = discrim_a(i)
         f_x_b = discrim_b(i)

         call solve_root(eval_discrim_x_, x_a, x_b, ext_rt(0._RD), nm_p, &
            x_root, status, n_iter=n_iter, n_iter_max=nm_p%n_iter_max, &
            f_x_a=f_x_a, f_x_b=f_x_b)
         if (status /= STATUS_OK) then
            call report_status_(status, 'solve')
            cycle mode_loop
         endif

         ! Construct the mode_t

         id_m = id_m + 1

         select type (bp)
         type is (ad_bvp_t)
            wv = wave_t(bp, state_rt(real(x_root)), id_m)
         type is (rad_bvp_t)
            wv = wave_t(bp, state_rt(real(x_root)), id_m)
         class default
            @:ABORT('invalid bp class')
         end select

         md = mode_t(wv)

         ! Process it

         chi = abs(md%discrim)/max(abs(discrim_a(i)), abs(discrim_b(i)))

         call process_mode(md, n_iter, chi)

      end do mode_loop

      call SYSTEM_CLOCK(c_end)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 130) 'Time elapsed :', REAL(c_end-c_beg, RD)/c_rate, 's'
130      format(2X,A,1X,F10.3,1X,A/)
      endif

      ! Finish

      return

   contains

      subroutine eval_discrim_x_(x, discrim, status)

         type(ext_rt), intent(in)  :: x
         type(ext_rt), intent(out) :: discrim
         integer, intent(out)       :: status

         real(RD) :: omega

         ! Evaluate the frequency from x

         omega = real(x)

         ! Evaluate the discriminant

         if (omega >= omega_min .AND. omega <= omega_max) then

            call eval_discrim(bp, state_rt(omega), discrim)

            status = STATUS_OK

         else

            status = STATUS_OMEGA_DOMAIN

         end if

         ! Finish

         return

      end subroutine eval_discrim_x_

      !****

      subroutine report_status_(status, stage_str)

         integer, intent(in)      :: status
         character(*), intent(in) :: stage_str

         ! Report the status

         if (check_log_level('WARN')) then

            write(OUTPUT_UNIT, 100) 'Failed during ', stage_str, ' : ', status_str(status)
100         format(4A)

         endif

         if (check_log_level('INFO')) then

            write(OUTPUT_UNIT, 110) 'n_iter  :', n_iter
110         format(3X,A,1X,I0)

            write(OUTPUT_UNIT, 120) 'omega_a :', omega_a(i)
            write(OUTPUT_UNIT, 120) 'omega_b :', omega_b(i)
120         format(3X,A,1X,E24.16)

         end if

         ! Finish

         return

      end subroutine report_status_

   end subroutine bracket_search

   !****

   subroutine find_brackets_(bp, omega, omega_a, omega_b, discrim_a, discrim_b)

      class(bvp_rt), intent(inout)           :: bp
      real(RD), intent(in)                   :: omega(:)
      real(RD), allocatable, intent(out)     :: omega_a(:)
      real(RD), allocatable, intent(out)     :: omega_b(:)
      type(ext_rt), allocatable, intent(out) :: discrim_a(:)
      type(ext_rt), allocatable, intent(out) :: discrim_b(:)

      integer      :: n_omega
      integer      :: c_beg
      integer      :: c_end
      integer      :: c_rate
      integer      :: i
      type(ext_rt) :: discrim_i
      real(RD)     :: discrim_f(SIZE(omega))
      integer      :: discrim_e(SIZE(omega))
      type(ext_rt) :: discrim(SIZE(omega))
      integer      :: n_brack
      integer      :: i_brack(SIZE(omega))

      ! Calculate the discriminant on the omega abscissa

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Evaluating discriminant'
100      format(A)
      endif

      n_omega = SIZE(omega)

      call SYSTEM_CLOCK(c_beg, c_rate)

      discrim_loop: do i = 1, n_omega

         call eval_discrim(bp, state_rt(omega(i)), discrim_i)

         discrim_f(i) = FRACTION(discrim_i)
         discrim_e(i) = EXPONENT(discrim_i)

         if (check_log_level('DEBUG')) then
            write(OUTPUT_UNIT, 110) omega(i), discrim_f(i), discrim_e(i)
110         format(2X,E24.16,2X,F19.16,2X,I7)
         endif

      end do discrim_loop

      discrim = scale(ext_rt(discrim_f), discrim_e)

      call SYSTEM_CLOCK(c_end)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 120) 'Time elapsed :', REAL(c_end-c_beg, RD)/c_rate, 's'
120      format(2X,A,F10.3,1X,A/)
      endif

      ! Find root brackets

      n_brack = 0

      bracket_loop : do i = 1, n_omega-1

         if (discrim(i)*discrim(i+1) <= ext_rt(0._RD)) then
            n_brack = n_brack + 1
            i_brack(n_brack) = i
         end if

      end do bracket_loop

      ! Set up the bracket frequencies

      omega_a = omega(i_brack(:n_brack))
      omega_b = omega(i_brack(:n_brack)+1)

      discrim_a = discrim(i_brack(:n_brack))
      discrim_b = discrim(i_brack(:n_brack)+1)

      ! Finish

      return

   end subroutine find_brackets_

end module bracket_search_m
