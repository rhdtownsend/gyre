! Module  : sad_bvp_m
! Purpose : static adiabatic bounary value problem solver
!
! Copyright 2019-2022 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module sad_bvp_m

   ! Uses

   use forum_m, only: RD

   use bvp_m
   use context_m
   use ext_m
   use grid_m
   use interp_m
   use model_m
   use mode_par_m
   use num_par_m
   use osc_par_m
   use point_m
   use sad_bound_m
   use sad_diff_m
   use sad_trans_m
   use state_m
   use util_m
   use wave_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(bvp_rt) :: sad_bvp_t
      private
      type(context_t), pointer :: cx => null()
      type(grid_t)             :: gr
      type(sad_trans_t)        :: tr
      type(mode_par_t)         :: md_p
      type(num_par_t)          :: nm_p
      type(osc_par_t)          :: os_p
   end type sad_bvp_t

   ! Interfaces

   interface sad_bvp_t
      module procedure sad_bvp_t_
   end interface sad_bvp_t

   interface wave_t
      module procedure wave_t_inhom_
   end interface wave_t

   ! Access specifiers

   public :: sad_bvp_t
   public :: wave_t

   ! Default access

   private

contains

   function sad_bvp_t_(cx, gr, md_p, nm_p, os_p) result(bp)

      type(context_t), pointer, intent(in) :: cx
      type(grid_t), intent(in)             :: gr
      type(mode_par_t), intent(in)         :: md_p
      type(num_par_t), intent(in)          :: nm_p
      type(osc_par_t), intent(in)          :: os_p
      type(sad_bvp_t)                      :: bp

      type(point_t)                 :: pt_i
      type(point_t)                 :: pt_o
      type(sad_bound_t)             :: bd
      integer                       :: j
      type(sad_diff_t), allocatable :: df(:)

      ! Construct the sad_bvp_t

      if (os_p%alpha_grv /= 1._RD) then
         @:WARN('alpha_grv is ignored in static equations')
      endif

      pt_i = gr%pt_i()
      pt_o = gr%pt_o()

      ! Initialize the boundary conditions

      bd = sad_bound_t(cx, md_p, os_p)

      ! Initialize the difference equations

      allocate(df(gr%n-1))

      !$OMP PARALLEL DO
      do j = 1, gr%n-1
         df(j) = sad_diff_t(cx, gr%pt(j), gr%pt(j+1), md_p, nm_p, os_p)
      end do

      ! Initialize the bvp_t

      bp%bvp_rt = bvp_rt(bd, df, nm_p)

      ! Other initializations

      bp%cx => cx
      bp%gr = gr

      bp%tr = sad_trans_t(cx, md_p, os_p)
      call bp%tr%stencil(gr%pt)

      bp%md_p = md_p
      bp%nm_p = nm_p
      bp%os_p = os_p

      ! Finish

      return

   end function sad_bvp_t_

   !****

   function wave_t_inhom_(bp, st, z_i, z_o, id) result(wv)

      class(sad_bvp_t), intent(inout) :: bp
      type(state_rt), intent(in)      :: st
      real(RD), intent(in)            :: z_i(:)
      real(RD), intent(in)            :: z_o(:)
      integer, intent(in)             :: id
      type(wave_t)                    :: wv

      real(RD) :: y(2,bp%n)
      integer  :: j

      @:CHECK_BOUNDS(SIZE(z_i), bp%n_i)
      @:CHECK_BOUNDS(SIZE(z_o), bp%n_o)

      ! Calculate the solution vector

      call bp%build(st)
      call bp%factor()

      y = bp%soln_vec_inhom(z_i, z_o)

      ! Convert to canonical form

      !$OMP PARALLEL DO
      do j = 1, bp%n
         call bp%tr%trans_vars(y(:,j), j, st, from=.FALSE.)
      end do

      ! Construct the wave_t

      wv = wave_t_y_(bp, st, y, id)

      ! Finish

      return

   end function wave_t_inhom_

   !****

   function wave_t_y_(bp, st, y, id) result(wv)

      class(sad_bvp_t), intent(inout) :: bp
      type(state_rt), intent(in)      :: st
      real(RD), intent(in)            :: y(:,:)
      integer, intent(in)             :: id
      type(wave_t)                    :: wv

      complex(RD)    :: y_c(6,bp%n)
      type(state_ct) :: st_c
      type(ext_ct)   :: discrim

      ! Set up complex eigenfunctions

      st_c = state_ct(CMPLX(st%omega, KIND=RD), st%omega)

      y_c(1,:) = -y(1,:)
      y_c(2,:) = -y(1,:)
      y_c(3,:) = y(1,:)
      y_c(4,:) = y(2,:)
      y_c(5,:) = 0._RD
      y_c(6,:) = 0._RD

      ! Construct the wave_t

      discrim = ext_ct(bp%det())

      wv = wave_t(st_c, y_c, discrim, bp%cx, bp%gr, bp%md_p, bp%nm_p, bp%os_p, id, static=.TRUE.)

      ! Finish

      return

   end function wave_t_y_

end module sad_bvp_m
