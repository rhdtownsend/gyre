! Module  : block_sysmtx_m
! Purpose : system matrix (block storage)
!
! Copyright 2013-215 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module block_sysmtx_m

   ! Uses

   use forum_m, only: RD, hdf5io_t

   use blas_lapack_m
   use ext_m
   use linalg_m
   use math_m
   use sysmtx_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      ! Derived-type definitions

      type, extends(sysmtx_${S}$) :: block_sysmtx_${S}$
         private
         ${T}$, allocatable           :: B_i(:,:)   ! Inner boundary conditions
         ${T}$, allocatable           :: B_o(:,:)   ! Outer boundary conditions
         ${T}$, allocatable           :: E_l(:,:,:) ! Left equation blocks
         ${T}$, allocatable           :: E_r(:,:,:) ! Right equation blocks
         ${T}$, allocatable           :: scl_i(:)   ! Inner boundary scales
         ${T}$, allocatable           :: scl_o(:)   ! Outer boundary scales
         type(ext_${S}$), allocatable :: scl(:)     ! Block scales
      contains
         private
         procedure, public :: set_B_i => set_B_i_${S}$_
         procedure, public :: set_B_o => set_B_o_${S}$_
         procedure, public :: set_E => set_E_${S}$_
         procedure, public :: factor => factor_${S}$_
         procedure         :: scale_rows_ => scale_rows_${S}$_
         procedure, public :: det => det_${S}$_
         procedure, public :: soln_vec_hom => soln_vec_hom_${S}$_
         procedure, public :: soln_vec_inhom => soln_vec_inhom_${S}$_
         procedure         :: backsub_ => backsub_${S}$_
         procedure, public :: resd_vec_hom => resd_vec_hom_${S}$_
         procedure, public :: resd_vec_inhom => resd_vec_inhom_${S}$_
         procedure, public :: dump => dump_${S}$_
      end type block_sysmtx_${S}$

      ! Interfaces

      interface block_sysmtx_${S}$
         module procedure block_sysmtx_${S}$_
      end interface block_sysmtx_${S}$

      ! Access specifiers

      public :: block_sysmtx_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function block_sysmtx_${S}$_(n, n_e, n_i, n_o) result(sm)

         integer, intent(in)      :: n
         integer, intent(in)      :: n_e
         integer, intent(in)      :: n_i
         integer, intent(in)      :: n_o
         type(block_sysmtx_${S}$) :: sm

         @:CHECK_BOUNDS(n_i+n_o, n_e)

         ! Construct the block_sysmtx_t

         allocate(sm%E_l(n_e,n_e,n))
         allocate(sm%E_r(n_e,n_e,n))

         allocate(sm%B_i(n_i,n_e))
         allocate(sm%B_o(n_o,n_e))

         allocate(sm%scl_i(n_i))
         allocate(sm%scl_o(n_o))

         allocate(sm%scl(n))

         sm%n = n
         sm%n_e = n_e
         sm%n_i = n_i
         sm%n_o = n_o

         ! Finish

         return

      end function block_sysmtx_${S}$_

      !****

      subroutine set_B_i_${S}$_(this, B, scl)

         class(block_sysmtx_${S}$), intent(inout) :: this
         ${T}$, intent(in)                        :: B(:,:)
         ${T}$, intent(in)                        :: scl(:)

         @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
         @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(scl), this%n_i)

         ! Set the inner boundary conditions

         this%B_i = B
         this%scl_i = scl

         ! Finish

         return

      end subroutine set_B_i_${S}$_

      !****

      subroutine set_B_o_${S}$_(this, B, scl)

         class(block_sysmtx_${S}$), intent(inout) :: this
         ${T}$, intent(in)                        :: B(:,:)
         ${T}$, intent(in)                        :: scl(:)

         @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
         @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(scl), this%n_o)

         ! Set the outer boundary conditions

         this%B_o = B
         this%scl_o = scl

         ! Finish

         return

      end subroutine set_B_o_${S}$_

      !****

      subroutine set_E_${S}$_(this, k, E_l, E_r, scl)

         class(block_sysmtx_${S}$), intent(inout) :: this
         integer, intent(in)                      :: k
         ${T}$, intent(in)                        :: E_l(:,:)
         ${T}$, intent(in)                        :: E_r(:,:)
         type(ext_${S}$), intent(in)              :: scl

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         @:ASSERT(k >= 1, 'invalid block index')
         @:ASSERT(k <= this%n, 'invalid block index')

         ! Set the block

         this%E_l(:,:,k) = E_l
         this%E_r(:,:,k) = E_r

         this%scl(k) = scl

         ! Finish

         return

      end subroutine set_E_${S}$_

      !****

      subroutine factor_${S}$_(this)

         class(block_sysmtx_${S}$), intent(inout) :: this

         ${T}$, parameter :: ONE = 1._RD

         integer :: l
         integer :: k
         ${T}$   :: M_G(2*this%n_e,this%n_e)
         ${T}$   :: M_U(2*this%n_e,this%n_e)
         ${T}$   :: M_E(2*this%n_e,this%n_e)
         integer :: ipiv(this%n_e)
         integer :: info
         integer :: i

         ! Factorize the sysmtx using the cyclic structured (SLU) algorithm
         ! by [Wri1994]. The factorization is done in place: E_l(:,:,1) and
         ! E_r(:,:,1) contain the final reduced blocks, the other blocks of
         ! E_l and E_r contain the U^-1 G and U^-1 E matrices needed to
         ! reconstruct solutions, and S is scaled by the factorization
         ! determinants

         call this%scale_rows_()

         associate (n => this%n, n_e => this%n_e)

            ! Loop through factorization levels

            l = 1

            factor_loop : do

               if (l >= n) exit factor_loop

               ! Reduce pairs of blocks to single blocks

               !$OMP PARALLEL DO SCHEDULE (DYNAMIC) PRIVATE (M_G, M_U, M_E, ipiv, info, i)
               reduce_loop : do k = 1, n-l, 2*l

                  ! Set up matrices (see expressions following eqn. 2.5 of
                  ! Wright 1994)

                  M_G(:n_e,:) = this%E_l(:,:,k)
                  M_G(n_e+1:,:) = 0._RD

                  M_U(:n_e,:) = this%E_r(:,:,k)
                  M_U(n_e+1:,:) = this%E_l(:,:,k+l)

                  M_E(:n_e,:) = 0._RD
                  M_E(n_e+1:,:) = this%E_r(:,:,k+l)

                  ! Calculate the LU factorization of M_U, and use it to reduce
                  ! M_E and M_G

                  call XGETRF(2*n_e, n_e, M_U, 2*n_e, ipiv, info)
                  @:ASSERT(info >= 0, 'negative return from XGETRF')

                  call XLASWP_inplace(n_e, M_E(1,1), 2*n_e, 1, n_e, ipiv, 1)
                  call XTRSM_inplace('L', 'L', 'N', 'U', n_e, n_e, &
                     ONE, M_U(1,1), 2*n_e, M_E(1,1), 2*n_e)
                  call XGEMM_inplace('N', 'N', n_e, n_e, n_e, -ONE, &
                     M_U(n_e+1,1), 2*n_e, M_E(1,1), 2*n_e, ONE, &
                     M_E(n_e+1,1), 2*n_e)

                  call XTRSM_inplace('L', 'U', 'N', 'N', n_e, n_e, &
                     ONE, M_U(1,1), 2*n_e, M_E(1,1), 2*n_e)

                  call XLASWP_inplace(n_e, M_G(1,1), 2*n_e, 1, n_e, ipiv, 1)
                  call XTRSM_inplace('L', 'L', 'N', 'U', n_e, n_e, &
                     ONE, M_U(1,1), 2*n_e, M_G(1,1), 2*n_e)
                  call XGEMM_inplace('N', 'N', n_e, n_e, n_e, -ONE, &
                     M_U(n_e+1,1), 2*n_e, M_G(1,1), 2*n_e, ONE, &
                     M_G(n_e+1,1), 2*n_e)

                  call XTRSM_inplace('L', 'U', 'N', 'N', n_e, n_e, &
                     ONE, M_U(1,1), 2*n_e, M_G(1,1), 2*n_e)

                  ! Store results

                  this%E_l(:,:,k) = M_G(n_e+1:,:)
                  this%E_r(:,:,k) = M_E(n_e+1:,:)

                  this%E_l(:,:,k+l) = M_G(:n_e,:)
                  this%E_r(:,:,k+l) = M_E(:n_e,:)

                  ! Fold the factorization determinant into the scale

                  this%scl(k) = this%scl(k)*PRODUCT(diagonal(M_U))

                  do i = 1,n_e
                     if (ipiv(i) /= i) this%scl(k) = -this%scl(k)
                  end do

               end do reduce_loop

               ! Loop around

               l = 2*l

            end do factor_loop

         end associate

         ! Finish

         return

      end subroutine factor_${S}$_

      !****

      subroutine scale_rows_${S}$_(this)

         class(block_sysmtx_${S}$), intent(inout) :: this

         real(RD) :: scl
         integer  :: i
         integer  :: k

         ! Scale the rows of the sysmtx to have maximum absolute value of
         ! unity

         do i = 1, this%n_i
            scl = MAXVAL(abs(this%B_i(i,:)))
            this%B_i(i,:) = this%B_i(i,:)/scl
            this%scl_i(i) = this%scl_i(i)*scl
         end do

         !$OMP PARALLEL DO PRIVATE (i, scl)
         do k = 1, this%n
            do i = 1, this%n_e
               scl = MAX(MAXVAL(abs(this%E_l(i,:,k))), MAXVAL(abs(this%E_r(i,:,k))))
               this%E_l(i,:,k) = this%E_l(i,:,k)/scl
               this%E_r(i,:,k) = this%E_r(i,:,k)/scl
               this%scl(k) = this%scl(k)*scl
            end do
         end do

         do i = 1, this%n_o
            scl = MAXVAL(abs(this%B_o(i,:)))
            this%B_o(i,:) = this%B_o(i,:)/scl
            this%scl_o(i) = this%scl_o(i)*scl
         end do

         ! Finish

         return

      end subroutine scale_rows_${S}$_

      !****

      function det_${S}$_(this) result(det)

         class(block_sysmtx_${S}$), intent(in) :: this
         type(ext_${S}$)                       :: det

         ${T}$   :: M(2*this%n_e,2*this%n_e)
         integer :: ipiv(2*this%n_e)
         integer :: info
         integer :: i

         ! Evaluate the determinant

         associate (n_e => this%n_e, n_i => this%n_i)

            ! Set up the reduced 2x2-block matrix

            M(:n_i,:n_e) = this%B_i
            M(n_i+1:n_i+n_e,:n_e) = this%E_l(:,:,1)
            M(n_i+n_e+1:,:n_e) = 0._RD

            M(:n_i,n_e+1:) = 0._RD
            M(n_i+1:n_i+n_e,n_e+1:) = this%E_r(:,:,1)
            M(n_i+n_e+1:,n_e+1:) = this%B_o

            ! Factorize it

            call XGETRF(2*n_e, 2*n_e, M, 2*n_e, ipiv, info)
            @:ASSERT(info >= 0, 'negative return from XGETRF')

            ! Add together all the contributions to the determinant

            det = product([ext_${S}$(diagonal(M)),ext_${S}$(this%scl_i),this%scl,ext_${S}$(this%scl_o)])

            do i = 1,2*n_e
               if(ipiv(i) /= i) det = -det
            end do

         end associate

         ! Finish

         return

      end function det_${S}$_

      !****

      function soln_vec_hom_${S}$_(this) result(u)

         class(block_sysmtx_${S}$), intent(in) :: this
         ${T}$                                 :: u(this%n_e*(this%n+1))

         logical, parameter :: USE_SVD = .TRUE.
         ${T}$, parameter   :: ZERO = 0._RD
         ${T}$, parameter   :: ONE = 1._RD

         ${T}$    :: M(2*this%n_e,2*this%n_e)
         real(RD) :: sigma(2*this%n_e)
         ${T}$    :: sU(2*this%n_e,2*this%n_e)
         ${T}$    :: sV_H(2*this%n_e,2*this%n_e)
         integer  :: ipiv(2*this%n_e)
         integer  :: info
         integer  :: i_s
         real(RD) :: M_s
         integer  :: i
         ${T}$    :: u_bound(2*this%n_e)

         ! Evaluate the solution vector u of the homogeneous linear system
         ! S u = 0. It is assumed that the nullity nul(S) >= 1; if nul(S) =
         ! 0, then this routine will return the vector which minimizes the
         ! norm of S u. When nul(S) > 1, the routine returns the null
         ! vector associated with the smallest eigenvalue.

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            ! Set up the reduced 2x2-block matrix

            M(:n_i,:n_e) = this%B_i
            M(n_i+1:n_i+n_e,:n_e) = this%E_l(:,:,1)
            M(n_i+n_e+1:,:n_e) = 0._RD

            M(:n_i,n_e+1:) = 0._RD
            M(n_i+1:n_i+n_e,n_e+1:) = this%E_r(:,:,1)
            M(n_i+n_e+1:,n_e+1:) = this%B_o

            ! Solve for the solution at the two boundaries

            if (USE_SVD) then

               ! Use singular value decomposition

               call sing_decompose(M, sigma, sU, sV_H)

               #:if T == 'real(RD)'
                  u_bound = sV_H(2*n_e,:)
               #:elif T == 'complex(RD)'
                  u_bound = CONJG(sV_H(2*n_e,:))
               #:else
                  #:stop f'invalid type {T}'
               #:endif

            else

               ! Use LU decomposition

               call XGETRF(2*n_e, 2*n_e, M, 2*n_e, ipiv, info)
               @:ASSERT(info >= 0, 'negative return from XGETRF')

               ! Locate the smallest element on the diagonal of the outer
               ! block (this will be taken to be the singular element)

               i_s = 0
               M_s = HUGE(0._RD)

               sing_loop : do i = n_e+1, 2*n_e
                  if (abs(M(i,i)) < M_s) then
                     M_s = abs(M(i,i))
                     i_s = i
                  end if
               end do sing_loop

               u_bound(:i_s-1) = -M(:i_s-1,i_s)

               call XTRSM_inplace('L', 'U', 'N', 'N', i_s-1, 1, &
                  ONE, M(1,1), 2*n_e, u_bound(1), 2*n_e)

               u_bound(i_s) = 1._RD
               u_bound(i_s+1:) = 0._RD

            endif

         end associate

         ! Backsubstitute to reconstruct the full solution vector

         call this%backsub_(u_bound, u)

         ! Finish

         return

      end function soln_vec_hom_${S}$_

      !****

      function soln_vec_inhom_${S}$_(this, v_i, v_o) result(u)

         class(block_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                     :: v_i(:)
         ${T}$, intent(in)                     :: v_o(:)
         ${T}$                                 :: u(this%n_e*(this%n+1))

         ${T}$   :: M(2*this%n_e,2*this%n_e)
         integer :: ipiv(2*this%n_e)
         integer :: info
         ${T}$   :: B(2*this%n_e, 1)
         ${T}$   :: u_bound(2*this%n_e)

         @:CHECK_BOUNDS(SIZE(v_i), this%n_i)
         @:CHECK_BOUNDS(SIZE(v_o), this%n_o)

         ! Evaluate the solution vector v of the inhomogeneous linear
         ! system S u = v. It is assumed that the right-hand side vector v
         ! has non-zero components in only the n_i first and n_o last rows
         ! (corresponding to the inner and outer boundary
         ! conditions). These components are supplied in v_i and v_o,
         ! respectively.

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            ! Set up the reduced 2x2-block matrix and rhs matrix

            M(:n_i,:n_e) = this%B_i
            M(n_i+1:n_i+n_e,:n_e) = this%E_l(:,:,1)
            M(n_i+n_e+1:,:n_e) = 0._RD

            M(:n_i,n_e+1:) = 0._RD
            M(n_i+1:n_i+n_e,n_e+1:) = this%E_r(:,:,1)
            M(n_i+n_e+1:,n_e+1:) = this%B_o

            B(:n_i,1) = v_i/this%scl_i
            B(n_i+1:n_i+n_e,1) = 0._RD
            B(n_i+n_e+1:,1) = v_o/this%scl_o

            ! Solve for the solution at the two boundaries using LU
            ! decomposition

            call XGETRF(2*n_e, 2*n_e, M, 2*n_e, ipiv, info)
            @:ASSERT(info >= 0, 'negative return from XGETRF')

            call XGETRS('N', 2*n_e, 1, M, 2*n_e, ipiv, B, 2*n_e, info)
            @:ASSERT(info >= 0, 'negative return from XGETRS')

            u_bound = B(:,1)

         end associate

         ! Backsubstitute to reconstruct the full solution vector

         call this%backsub_(u_bound, u)

         ! Finish

         return

      end function soln_vec_inhom_${S}$_

      !****

      subroutine backsub_${S}$_(this, u_bound, u)

         class(block_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                     :: u_bound(:)
         ${T}$, intent(out)                    :: u(:)

         ${T}$, parameter :: ZERO = 0._RD
         ${T}$, parameter :: ONE = 1._RD

         integer :: l
         integer :: k
         integer :: i_a
         integer :: i_b
         integer :: i_c

         @:CHECK_BOUNDS(SIZE(u_bound), 2*this%n_e)
         @:CHECK_BOUNDS(SIZE(u), this%n_e*(this%n+1))

         ! Given the solution vector u_bound at the boundaries,
         ! backsubstitute to reconstruct the full solution vector u

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            u(:n_e) = u_bound(:n_e)
            u(n_e*n+1:) = u_bound(n_e+1:)

            l = 1

            do
               if(l >= n) exit
               l = 2*l
            end do

            recon_loop : do

               l = l/2

               if (l == 0) exit recon_loop

               !$OMP PARALLEL DO SCHEDULE (DYNAMIC) PRIVATE (i_a, i_b, i_c)
               backsub_loop : do k = 1, n-l, 2*l

                  i_a = (k-1)*n_e + 1
                  i_b = i_a + l*n_e
                  i_c = MIN(i_b + l*n_e, n_e*n+1)

                  u(i_b:i_b+n_e-1) = ZERO

                  call XGEMV_inplace('N', n_e, n_e, -ONE, this%E_l(1,1,k+l), n_e, u(i_a), 1, ZERO, u(i_b), 1)
                  call XGEMV_inplace('N', n_e, n_e, -ONE, this%E_r(1,1,k+l), n_e, u(i_c), 1, ONE, u(i_b), 1)

               end do backsub_loop

            end do recon_loop

         end associate

         ! Finish

         return

      end subroutine backsub_${S}$_

      !****

      function resd_vec_hom_${S}$_(this, u) result(dv)

         class(block_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                     :: u(:)
         ${T}$                                 :: dv(this%n_e*(this%n+1))

         integer :: k
         integer :: i_a
         integer :: i_b

         @:CHECK_BOUNDS(SIZE(u), this%n_e*(this%n+1))

         ! Evaluate the residual vector dv = S u of the homogeneous linear
         ! system S u = 0.

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            dv(:n_i) = MATMUL(this%B_i, u(:n_e))*this%scl_i

            !$OMP PARALLEL DO PRIVATE (i_a, i_b)
            multiply_loop : do k = 1, n

               i_a = (k-1)*n_e + 1
               i_b = i_a + n_i

               dv(i_b:i_b+n_e-1) = MATMUL(this%E_l(:,:,k), u(i_a:i_a+n_e-1)) + MATMUL(this%E_r(:,:,k), u(i_a+n_e:i_a+2*n_e-1))

            end do multiply_loop

            dv(n_e*n+n_i+1:) = MATMUL(this%B_o, u(n_e*n+1:))*this%scl_o

         end associate

         ! Finish

         return

      end function resd_vec_hom_${S}$_

      !****

      function resd_vec_inhom_${S}$_(this, u, v_i, v_o)result(dv)

         class(block_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                     :: u(:)
         ${T}$, intent(in)                     :: v_i(:)
         ${T}$, intent(in)                     :: v_o(:)
         ${T}$                                 :: dv(this%n_e*(this%n+1))

         @:CHECK_BOUNDS(SIZE(u),this%n_e*(this%n+1))

         @:CHECK_BOUNDS(SIZE(v_i),this%n_i)
         @:CHECK_BOUNDS(SIZE(v_o),this%n_o)

         ! Evaluate the residual vector dv = S u - v of the inhomogeneous
         ! linear system S u = v. It is assumed that the right-hand side
         ! vector w has non-zero components in only the n_i first and n_o
         ! last rows (corresponding to the inner and outer boundary
         ! conditions). These components are supplied in v_i and v_o,
         ! respectively.

         ! First evaluate dv for the homogeneous case

         dv = this%resd_vec_hom(u)

         ! Subtract v

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            dv(:n_i) = dv(:n_i) - v_i
            dv(n_e*n+1:) = dv(n_e*n+1:) - v_o

         end associate

         ! Finish

         return

      end function resd_vec_inhom_${S}$_

      !****

      subroutine dump_${S}$_(this, hi)

         class(block_sysmtx_${S}$), intent(in) :: this
         type(hdf5io_t), intent(inout)         :: hi

         ! Dump the block_sysmtx_t to the hgroup

         call hi%write_attr('n', this%n)
         call hi%write_attr('n_e', this%n_e)
         call hi%write_attr('n_i', this%n_i)
         call hi%write_attr('n_o', this%n_o)

         call hi%write_dset('B_i', this%B_i)
         call hi%write_dset('scl_i', this%scl_i)

         call hi%write_dset('B_o', this%B_o)
         call hi%write_dset('scl_o', this%scl_o)

         call hi%write_dset('E_l', this%E_l)
         call hi%write_dset('E_r', this%E_r)

         call hi%write_dset('scl_f', FRACTION(this%scl))
         call hi%write_dset('scl_e', EXPONENT(this%scl))

         ! Finish

         return

      end subroutine dump_${S}$_

   #:endfor

end module block_sysmtx_m

