! Module  : linalg_m
! Purpose : linear algebra
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module linalg_m

   ! Uses

   use forum_m, only: RD, sort_indices

   use blas_lapack_m
   use math_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   #:for S in FLOAT_SUFFIXES

      ! Interfaces

      interface eigen_decompose
         module procedure eigen_decompose_${S}$_
      end interface eigen_decompose

      interface sing_decompose
         module procedure sing_decompose_${S}$_
      end interface sing_decompose

      interface linear_solve
         module procedure linear_solve_vec_${S}$_
         module procedure linear_solve_mat_${S}$_
      end interface linear_solve

      interface commutator
         module procedure commutator_${S}$_
      end interface commutator

      interface measure_bandwidth
         module procedure measure_bandwidth_full_${S}$_
      end interface measure_bandwidth

      interface diagonal
         module procedure diagonal_${S}$_
      end interface diagonal

      interface diagonal_matrix
         module procedure diagonal_matrix_${S}$_
      end interface diagonal_matrix

      interface matrix_exp
         module procedure matrix_exp_${S}$_
      end interface matrix_exp

      interface outer_product
         module procedure outer_product_${S}$_
      end interface outer_product

      interface partition
         module procedure partition_${S}$_
      end interface partition

   #:endfor

   interface outer_product
      module procedure outer_product_l_
   end interface outer_product

   interface matrix_exp
      module procedure matrix_exp_eigen_
   end interface matrix_exp

   ! Access specifiers

   public :: eigen_decompose
   public :: sing_decompose
   public :: linear_solve
   public :: commutator
   public :: measure_bandwidth
   public :: diagonal
   public :: diagonal_matrix
   public :: identity_matrix
   public :: permutation_matrix
   public :: matrix_exp
   public :: outer_product
   public :: partition

   ! Default access

   private

contains

   subroutine eigen_decompose_r_(A, lambda, V_l, V_r, sort)

      real(RD), intent(inout)       :: A(:,:)
      complex(RD), intent(out)      :: lambda(:)
      complex(RD), intent(out)      :: V_l(:,:)
      complex(RD), intent(out)      :: V_r(:,:)
      logical, optional, intent(in) :: sort

      logical     :: sort_
      integer     :: n
      real(RD)    :: lambda_re(SIZE(lambda))
      real(RD)    :: lambda_im(SIZE(lambda))
      real(RD)    :: V_l_r(SIZE(A, 1),SIZE(A, 2))
      real(RD)    :: V_r_r(SIZE(A, 1),SIZE(A, 2))
      real(RD)    :: work(4*SIZE(A, 1))
      integer     :: info
      integer     :: i
      complex(RD) :: norm
      integer     :: ind(SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))
      @:CHECK_BOUNDS(SIZE(lambda), SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(V_l, 1), SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(V_l, 2), SIZE(A, 2))

      @:CHECK_BOUNDS(SIZE(V_r, 1), SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(V_r, 2), SIZE(A, 2))

      if(PRESENT(sort)) then
         sort_ = sort
      else
         sort_ = .FALSE.
      end if

      ! Perform the eigendecomposition of A

      n = SIZE(A, 1)

      if(n == 2) then

         ! Special case: n == 2

         call eigen_decompose_2_r_(A, lambda, V_l, V_r)

      else

         call XGEEV('V', 'V', n, A, n, lambda_re, lambda_im, &
            V_l_r, n, V_r_r, n, work, SIZE(work), info)
         @:ASSERT(info == 0, 'non-zero return from XGEEV')

         lambda = CMPLX(lambda_re, lambda_im, RD)

         call reconstruct_eigenvector_(lambda_re, lambda_im, V_l_r, V_l)
         call reconstruct_eigenvector_(lambda_re, lambda_im, V_r_r, V_r)

         V_l = CONJG(TRANSPOSE(V_l))

         ! Renormalize the left eigenvectors so they are orthonormal to
         ! the right eigenvectors

         do i = 1, n
            norm = SUM(V_l(i,:)*V_r(:,i))
            !@:ASSERT(abs(norm) > n*EPSILON(0._RD), 'near-defective matrix')
            V_l(i,:) = V_l(i,:)/norm
         enddo

      endif

      ! (Possibly) sort

      if(sort_) then

         ind = sort_indices(lambda_re)

         lambda = lambda(ind)

         V_l = V_l(ind,:)
         V_r = V_r(:,ind)

      endif

      ! Finish

      return

   contains

      subroutine reconstruct_eigenvector_(lambda_re, lambda_im, V_r, V)

         real(RD), intent(in)     :: lambda_re(:)
         real(RD), intent(in)     :: lambda_im(:)
         real(RD), intent(in)     :: V_r(:,:)
         complex(RD), intent(out) :: V(:,:)

         integer :: i

         ! Reconstruct the complex eigenvector

         i = 1

         recon_loop : do

            if(lambda_im(i) == 0._RD) then

               V(:,i) = V_r(:,i)

               i = i + 1

            elseif(lambda_re(i) == lambda_re(i+1) .AND. &
               &   lambda_im(i) == -lambda_im(i+1)) then

               V(:,i) = CMPLX(V_r(:,i), V_r(:,i+1), KIND=RD)
               V(:,i+1) = CONJG(V(:,i))

               i = i + 2

            else

               @:ABORT('Complex eigenvalue does not have conjugate pair')

            endif

            if(i > SIZE(V_r, 2)) exit recon_loop

         end do recon_loop

         ! Finish

         return

      end subroutine reconstruct_eigenvector_

   end subroutine eigen_decompose_r_

   !****

   subroutine eigen_decompose_c_(A, lambda, V_l, V_r, sort)

      complex(RD), intent(inout)    :: A(:,:)
      complex(RD), intent(out)      :: lambda(:)
      complex(RD), intent(out)      :: V_l(:,:)
      complex(RD), intent(out)      :: V_r(:,:)
      logical, optional, intent(in) :: sort

      logical     :: sort_
      integer     :: n
      complex(RD) :: work(2*SIZE(A, 1))
      real(RD)    :: rwork(2*SIZE(A, 1))
      integer     :: info
      integer     :: i
      complex(RD) :: norm
      integer     :: ind(SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))
      @:CHECK_BOUNDS(SIZE(lambda), SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(V_l, 1), SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(V_l, 2), SIZE(A, 2))

      @:CHECK_BOUNDS(SIZE(V_r, 1), SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(V_r, 2), SIZE(A, 2))

      if(PRESENT(sort)) then
         sort_ = sort
      else
         sort_ = .FALSE.
      end if

      ! Perform the eigendecomposition of A

      n = SIZE(A, 1)

      if(n == 2) then

         ! Special case: n == 2

         call eigen_decompose_2_c_(A, lambda, V_l, V_r)

      else

         call XGEEV('V', 'V', n, A, n, lambda, &
            V_l, n, V_r, n, work, SIZE(work, 1), rwork, info)
         @:ASSERT(info == 0, 'non-zero return from XGEEV')

         V_l = CONJG(TRANSPOSE(V_l))

         ! Renormalize the left eigenvectors so they are orthonormal to
         ! the right eigenvectors

         do i = 1,n
            norm = SUM(V_l(i,:)*V_r(:,i))
            !@:ASSERT(abs(norm) > n*EPSILON(0._RD), 'near-defective matrix')
            V_l(i,:) = V_l(i,:)/norm
         enddo

      end if

      ! (Possibly) sort

      if(sort_) then

         ind = sort_indices(REAL(lambda))

         lambda = lambda(ind)

         V_l = V_l(ind,:)
         V_r = V_r(:,ind)

      endif

      ! Finish

      return

   end subroutine eigen_decompose_c_

   !****

   #:for T, S in zip(FLOAT_TYPES, FLOAT_SUFFIXES)

      subroutine eigen_decompose_2_${S}$_(A, lambda, V_l, V_r)

         ${T}$, intent(in)                  :: A(:,:)
         complex(RD), intent(out)           :: lambda(:)
         complex(RD), intent(out), optional :: V_l(:,:)
         complex(RD), intent(out), optional :: V_r(:,:)

         ${T}$       :: b
         ${T}$       :: c
         complex(RD) :: s
         complex(RD) :: q
         complex(RD) :: V_l_(2,2)
         complex(RD) :: V_r_(2,2)
         integer     :: i

         @:CHECK_BOUNDS(SIZE(A, 1), 2)
         @:CHECK_BOUNDS(SIZE(A, 2), 2)

         @:CHECK_BOUNDS(SIZE(lambda), SIZE(A, 1))

         if(PRESENT(V_l)) then
            @:CHECK_BOUNDS(SIZE(V_l, 1), SIZE(A, 1))
            @:CHECK_BOUNDS(SIZE(V_l, 2), SIZE(A, 2))
         endif

         if(PRESENT(V_r)) then
            @:CHECK_BOUNDS(SIZE(V_r, 1), SIZE(A, 1))
            @:CHECK_BOUNDS(SIZE(V_r, 2), SIZE(A, 2))
         endif

         ! Perform the eigendecomposition of the 2x2 matrix A

         ! Solve the quadratic for the eigenvalues

         b = -A(1,1) - A(2,2)
         c = A(1,1)*A(2,2) - A(1,2)*A(2,1)

         #:if T == 'real(RD)'
            s = sqrt(CMPLX(b**2 - 4._RD*c, KIND=RD))
            q = -0.5_RD*(b + SIGN(1._RD, b)*s)
         #:elif T == 'complex(RD)'
            s = sqrt(b**2 - 4._RD*c)
            q = -0.5_RD*(b + SIGN(1._RD, REAL(CONJG(b)*s))*s)
         #:else
            #:stop f'invalid type {T}'
         #:endif

         lambda(1) = q
         lambda(2) = c/q

         ! Calculate eigenvectors

         if(PRESENT(V_l) .OR. PRESENT(V_r)) then

            V_l_(1,1) = A(2,1)
            V_l_(1,2) = lambda(1) - A(1,1)

            V_l_(2,1) = A(2,1)
            V_l_(2,2) = lambda(2) - A(1,1)

            V_r_(1,1) = A(1,2)
            V_r_(2,1) = lambda(1) - A(1,1)

            V_r_(1,2) = A(1,2)
            V_r_(2,2) = lambda(2) - A(1,1)

            do i = 1,SIZE(A, 1)
               V_l_(i,:) = V_l_(i,:)/SUM(V_l_(i,:)*V_r_(:,i))
            enddo

            if(PRESENT(V_l)) then
               V_l = V_l_
            endif

            if(PRESENT(V_r)) then
               V_r = V_r_
            endif

         end if

         ! Finish

         return

      end subroutine eigen_decompose_2_${S}$_

      !****

      function linear_solve_vec_${S}$_(A, b) result(x)

         ${T}$, intent(in) :: A(:,:)
         ${T}$, intent(in) :: b(:)
         ${T}$             :: x(SIZE(A, 2))

         ${T}$ :: Mx(SIZE(x), 1)
         ${T}$ :: Mb(SIZE(b), 1)

         @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))
         @:CHECK_BOUNDS(SIZE(b), SIZE(A, 1))

         ! Solve the linear system A x = b

         Mb(:,1) = b

         Mx = linear_solve(A, Mb)

         x = Mx(:,1)

         ! Finish

         return

      end function linear_solve_vec_${S}$_

      !*****

      function linear_solve_mat_${S}$_(A, B) result(X)

         ${T}$, intent(in) :: A(:,:)
         ${T}$, intent(in) :: B(:,:)
         ${T}$             :: X(SIZE(A, 2), SIZE(B, 2))

         ${T}$        :: A_(SIZE(A, 1),SIZE(A, 2))
         ${T}$        :: B_(SIZE(B, 1),SIZE(B, 2))
         integer      :: ipiv(SIZE(A, 1))
         integer      :: info
         ${T}$        :: Af(SIZE(A, 1),SIZE(A, 2))
         real(RD)     :: R(SIZE(A, 1))
         real(RD)     :: C(SIZE(A, 1))
         real(RD)     :: rcond
         real(RD)     :: ferr(SIZE(B, 2))
         real(RD)     :: berr(SIZE(B, 2))
         character(1) :: equed

         #:if T == 'real(RD)'
            real(RD)    :: work(4*SIZE(A, 1))
            integer     :: xwork(SIZE(A, 1))
         #:elif T == 'complex(RD)'
            complex(RD) :: work(2*SIZE(A, 1))
            real(RD)    :: xwork(2*SIZE(A, 1))
         #:else
            #:stop f'invalid type {T}'
         #:endif

         @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))
         @:CHECK_BOUNDS(SIZE(B, 1), SIZE(A, 1))

         ! Solve the linear system A X = B

         A_ = A
         B_ = B

         call XGESVX('E', 'N', SIZE(A_, 1), SIZE(B_, 2), A_, SIZE(A_, 1), AF, SIZE(AF, 1), ipiv, &
            equed, R, C, B_, SIZE(B_, 1), X, SIZE(X, 1), rcond, ferr, berr, work, &
            xwork, info)
         @:ASSERT(info == 0, 'non-zero return from XGESVX')

         ! Finish

         return

      end function linear_solve_mat_${S}$_

      !****

      function commutator_${S}$_(A, B) result(C)

         ${T}$, intent(in) :: A(:,:)
         ${T}$, intent(in) :: B(:,:)
         ${T}$             :: C(SIZE(A, 1),SIZE(A, 2))

         @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))

         @:CHECK_BOUNDS(SIZE(B, 1), SIZE(B, 2))
         @:CHECK_BOUNDS(SIZE(B, 1), SIZE(A, 1))

         ! Calculate the commutator [A,B]

         C = MATMUL(A, B) - MATMUL(B, A)

         ! Finish

         return

      end function commutator_${S}$_

      !****

      subroutine measure_bandwidth_full_${S}$_(A, n_l, n_u)

         ${T}$, intent(in) :: A(:,:)
         integer, intent(out)  :: n_l
         integer, intent(out)  :: n_u

         integer :: n
         integer :: i
         integer :: j
         integer :: i_min
         integer :: i_max
         integer :: k

         @:CHECK_BOUNDS(SIZE(A, 1), SIZE(A, 2))

         ! Measure the lower bandwidth

         n = SIZE(A, 1)

         lower_loop : do k = -(n-1), -1

            i_min = MAX(1, 1-k)
            i_max = MIN(SIZE(A, 1), SIZE(A, 1)-k)

            do i = i_min, i_max
               j = i + k
               if(A(i,j) /= 0) exit lower_loop
            end do

         end do lower_loop

         n_l = -k

         ! Measure the upper bandwidth

         upper_loop : do k = n-1, 1, -1

            i_min = MAX(1, 1-k)
            i_max = MIN(SIZE(A, 1), SIZE(A, 1)-k)

            do i = i_min, i_max
               j = i + k
               if(A(i,j) /= 0) exit upper_loop
            end do

         end do upper_loop

         n_u = k

         ! Finish

         return

      end subroutine measure_bandwidth_full_${S}$_

      !****

      pure function diagonal_${S}$_(A) result(D)

         ${T}$, intent(in) :: A(:,:)
         ${T}$             :: d(MIN(SIZE(A, 1),SIZE(A, 2)))

         integer :: i

         ! Extract the diagonal elements of matrix A

         do i = 1,SIZE(d)
            d(i) = A(i,i)
         end do

         ! Finish

         return

      end function diagonal_${S}$_

      !****

      pure function diagonal_matrix_${S}$_(x) result(D)

         ${T}$, intent(in) :: x(:)
         ${T}$             :: D(SIZE(x), SIZE(x))

         integer :: i

         ! Set up the diagonal matrix with elements x

         D = 0._RD

         do i = 1,SIZE(x)
            D(i,i) = x(i)
         end do

         ! Finish

         return

      end function diagonal_matrix_${S}$_

      !****

      function matrix_exp_${S}$_(A, t) result(exp_At)

         ${T}$, intent(in)    :: A(:,:)
         real(RD), intent(in) :: t
         ${T}$                :: exp_At(SIZE(A, 1),SIZE(A, 2))

         integer, parameter :: IDEG = 6

         ${T}$       :: A_(SIZE(A, 1),SIZE(A, 2))
         complex(RD) :: lambda(SIZE(A, 1))
         complex(RD) :: V_l(SIZE(A, 1),SIZE(A, 2))
         complex(RD) :: V_r(SIZE(A, 1),SIZE(A, 2))

         @:CHECK_BOUNDS(SIZE(A, 1),SIZE(A, 2))

         ! Calculate the matrix exponential exp(A*t)

         A_ = A

         call eigen_decompose_${S}$_(A_, lambda, V_l=V_l, V_r=V_r)

         #:if T == 'real(RD)'
            exp_At = REAL(matrix_exp_eigen_(lambda, V_l, V_r, t))
         #:elif T == 'complex(RD)'
            exp_At = matrix_exp_eigen_(lambda, V_l, V_r, t)
         #:else
            #:stop f'invalid type {T}'
         #:endif

         ! Finish

         return

      end function matrix_exp_${S}$_

      !****

      function outer_product_${S}$_(v, w) result(A)

         ${T}$, intent(in) :: v(:)
         ${T}$, intent(in) :: w(:)
         ${T}$             :: A(SIZE(v), SIZE(w))

         ! Calculate the outer product v w^T

         A = SPREAD(v, 2, SIZE(w))*SPREAD(w, 1, SIZE(v))

         ! Finish

         return

      end function outer_product_${S}$_

      !****

      subroutine partition_${S}$_(A, mask_r, mask_c, A_part)

         ${T}$, intent(in)   :: A(:,:)
         logical, intent(in) :: mask_r(:)
         logical, intent(in) :: mask_c(:)
         ${T}$, intent(out)  :: A_part(:,:)

         @:CHECK_BOUNDS(SIZE(mask_r), SIZE(A, 1))
         @:CHECK_BOUNDS(SIZE(mask_c), SIZE(A, 2))

         @:CHECK_BOUNDS(COUNT(mask_r), SIZE(A_part, 1))
         @:CHECK_BOUNDS(COUNT(mask_c), SIZE(A_part, 2))

         ! Partition A according to the row and column masks

         A_part = RESHAPE(PACK(A, outer_product(mask_r, mask_c)), SHAPE(A_part))

         ! Finish

         return

      end subroutine partition_${S}$_

   #:endfor

   !****

   subroutine sing_decompose_r_(A, sigma, U, V_H)

      real(RD), intent(inout) :: A(:,:)
      real(RD), intent(out)   :: sigma(:)
      real(RD), intent(out)   :: U(:,:)
      real(RD), intent(out)   :: V_H(:,:)

      integer  :: n
      real(RD) :: work(5*SIZE(A, 1))
      integer  :: info

      @:CHECK_BOUNDS(SIZE(sigma), MIN(SIZE(A, 1), SIZE(A, 2)))

      @:CHECK_BOUNDS(SIZE(U, 1), SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(U, 2), SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(V_H, 1), SIZE(A, 2))
      @:CHECK_BOUNDS(SIZE(V_H, 2), SIZE(A, 2))

      ! Perform the singular-value decomposition of A

      n = SIZE(A, 1)

      call XGESVD('A', 'A', n, n, A, n, sigma, U, n, V_H, n, work, SIZE(work), info)
      @:ASSERT(info == 0, 'non-zero return from XGESVD')

      ! Finish

      return

   end subroutine sing_decompose_r_

   !****

   subroutine sing_decompose_c_(A, sigma, U, V_H)

      complex(RD), intent(inout) :: A(:,:)
      real(RD), intent(out)      :: sigma(:)
      complex(RD), intent(out)   :: U(:,:)
      complex(RD), intent(out)   :: V_H(:,:)

      integer     :: n
      complex(RD) :: work(3*SIZE(A, 1))
      real(RD)    :: rwork(5*SIZE(A, 1))
      integer     :: info

      @:CHECK_BOUNDS(SIZE(sigma),MIN(SIZE(A, 1), SIZE(A, 2)))

      @:CHECK_BOUNDS(SIZE(U, 1),SIZE(A, 1))
      @:CHECK_BOUNDS(SIZE(U, 2),SIZE(A, 1))

      @:CHECK_BOUNDS(SIZE(V_H, 1),SIZE(A, 2))
      @:CHECK_BOUNDS(SIZE(V_H, 2),SIZE(A, 2))

      ! Perform the singular-value decomposition of A

      n = SIZE(A, 1)

      call XGESVD('A', 'A', n, n, A, n, sigma, U, n, V_H, n, work, SIZE(work), rwork, info)
      @:ASSERT(info == 0, 'non-zero return from XGESVD')

      ! Finish

      return

   end subroutine sing_decompose_c_

   !****

   pure function identity_matrix(n) result(I)

      integer, intent(in) :: n
      real(RD)            :: I(n,n)

      integer :: j

      ! Set up the rank-n identity matrix

      I = 0._RD

      do j = 1,n
         I(j,j) = 1._RD
      end do

      ! Finish

      return

   end function identity_matrix

   !****

   pure function permutation_matrix(ipiv) result(P)

      integer, intent(in) :: ipiv(:)
      real(RD)            :: P(SIZE(ipiv),SIZE(ipiv))

      real(RD) :: tmp(SIZE(ipiv))
      integer  :: i

      ! Set up a permutation matrix from the row-exchange vector ipiv

      P = identity_matrix(SIZE(ipiv))

      do i = 1,SIZE(ipiv)
         if(ipiv(i) /= i) then
            tmp = P(i,:)
            P(i,:) = P(ipiv(i),:)
            P(ipiv(i),:) = tmp
         end if
      end do

      ! Finish

      return

   end function permutation_matrix

   !****

   function matrix_exp_eigen_(lambda, V_l, V_r, t) result(exp_At)

      complex(RD), intent(in) :: lambda(:)
      complex(RD), intent(in) :: V_l(:,:)
      complex(RD), intent(in) :: V_r(:,:)
      real(RD), intent(in)    :: t
      complex(RD)             :: exp_At(SIZE(lambda),SIZE(lambda))

      integer :: i

      @:CHECK_BOUNDS(SIZE(V_l, 2),SIZE(V_l, 1))
      @:CHECK_BOUNDS(SIZE(V_r, 2),SIZE(V_r, 1))

      @:CHECK_BOUNDS(SIZE(V_l, 1), SIZE(lambda))
      @:CHECK_BOUNDS(SIZE(V_r, 1), SIZE(lambda))

      ! Calculate the matrix exponential exp(At) from the
      ! eigendecomposition of A

      do i = 1,SIZE(lambda)
         exp_At(i,:) = exp(lambda(i)*t)*V_l(i,:)
      end do

      exp_At = MATMUL(V_r, exp_At)

      ! Finish

      return

   end function matrix_exp_eigen_

   !****

   function outer_product_l_(v, w) result(A)

      logical, intent(in) :: v(:)
      logical, intent(in) :: w(:)
      logical             :: A(SIZE(v), SIZE(w))

      ! Calculate the outer product v w^T

      A = SPREAD(v, 2, SIZE(w)) .AND. SPREAD(w, 1, SIZE(v))

      ! Finish

      return

   end function outer_product_l_

end module linalg_m
