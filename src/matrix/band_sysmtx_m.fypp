! Module  : band_sysmtx_m
! Purpose : system matrix (band storage)
!
! Copyright 2013-214 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module band_sysmtx_m

   ! Uses

   use forum_m, only: RD, hdf5io_t

   use blas_lapack_m
   use ext_m
   use linalg_m
   use math_m
   use sysmtx_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      ! Derived-type definitions

      type, extends(sysmtx_${S}$) :: band_sysmtx_${S}$
         private
         ${T}$, allocatable           :: A_b(:,:)  ! Banded matrix
         integer, allocatable         :: ipiv(:)   ! Pivot indices
         ${T}$, allocatable           :: scl_i(:)  ! Inner boundary scales
         ${T}$, allocatable           :: scl_o(:)  ! Outer boundary scales
         type(ext_${S}$), allocatable :: scl(:)    ! Block scales
         integer                      :: n_ul      ! Number of sub-/super-diagonals
      contains
         private
         procedure, public :: set_B_i => set_B_i_${S}$_
         procedure, public :: set_B_o => set_B_o_${S}$_
         procedure, public :: set_E => set_E_${S}$_
         procedure         :: set_row_ => set_row_${S}$_
         procedure         :: get_row_ => get_row_${S}$_
         procedure, public :: factor => factor_${S}$_
         procedure         :: scale_rows_ => scale_rows_${S}$_
         procedure, public :: det => det_${S}$_
         procedure, public :: soln_vec_hom => soln_vec_hom_${S}$_
         procedure, public :: soln_vec_inhom => soln_vec_inhom_${S}$_
         procedure, public :: resd_vec_hom => resd_vec_hom_${S}$_
         procedure, public :: resd_vec_inhom => resd_vec_inhom_${S}$_
         procedure, public :: dump => dump_${S}$_
      end type band_sysmtx_${S}$

      ! Interfaces

      interface band_sysmtx_${S}$
         module procedure band_sysmtx_${S}$_
      end interface band_sysmtx_${S}$

      ! Access specifiers

      public :: band_sysmtx_${S}$

   #:endfor

   ! Default access

   private

contains

   #:for T, S in zip(DTYPE_BASE_TYPES, DTYPE_SUFFIXES)

      function band_sysmtx_${S}$_(n, n_e, n_i, n_o) result(sm)

         integer, intent(in)     :: n
         integer, intent(in)     :: n_e
         integer, intent(in)     :: n_i
         integer, intent(in)     :: n_o
         type(band_sysmtx_${S}$) :: sm

         ! Construct the sysmtx type

         ! Note that an additional n_ul rows are added to A_b to provide
         ! space for fill-in during factorization

         sm%n_ul = n_e + n_i - 1

         allocate(sm%A_b(3*sm%n_ul+1,n_e*(n+1)))
         allocate(sm%ipiv(n_e*(n+1)))

         allocate(sm%scl_i(n_i))
         allocate(sm%scl_o(n_o))

         allocate(sm%scl(n))

         sm%n = n
         sm%n_e = n_e
         sm%n_i = n_i
         sm%n_o = n_o

         ! Finish

         return

      end function band_sysmtx_${S}$_

      !****

      subroutine set_B_i_${S}$_(this, B, scl)

         class(band_sysmtx_${S}$), intent(inout) :: this
         ${T}$, intent(in)                       :: B(:,:)
         ${T}$, intent(in)                       :: scl(:)

         integer :: i_0
         integer :: j_0
         integer :: i

         @:CHECK_BOUNDS(SIZE(B, 1), this%n_i)
         @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(scl), this%n_i)

         ! Set the inner boundary conditions

         i_0 = 1
         j_0 = 1

         do i = 1, this%n_i
            call this%set_row_(i_0+i-1, j_0, B(i,:))
         end do

         this%scl_i = scl

         ! Finish

         return

      end subroutine set_B_i_${S}$_

      !****

      subroutine set_B_o_${S}$_(this, B, scl)

         class(band_sysmtx_${S}$), intent(inout) :: this
         ${T}$, intent(in)                       :: B(:,:)
         ${T}$, intent(in)                       :: scl(:)

         integer :: i_0
         integer :: j_0
         integer :: i

         @:CHECK_BOUNDS(SIZE(B, 1), this%n_o)
         @:CHECK_BOUNDS(SIZE(B, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(scl), this%n_o)

         ! Set the outer boundary conditions

         i_0 = this%n*this%n_e + this%n_i + 1
         j_0 = this%n*this%n_e + 1

         do i = 1, this%n_o
            call this%set_row_(i_0+i-1, j_0, B(i,:))
         end do

         this%scl_o = scl

         ! Finish

         return

      end subroutine set_B_o_${S}$_

      !****

      subroutine set_E_${S}$_(this, k, E_l, E_r, scl)

         class(band_sysmtx_${S}$), intent(inout) :: this
         integer, intent(in)                     :: k
         ${T}$, intent(in)                       :: E_l(:,:)
         ${T}$, intent(in)                       :: E_r(:,:)
         type(ext_${S}$), intent(in)             :: scl

         integer :: i_0
         integer :: j_0
         integer :: i
         ${T}$   :: R(2*this%n_e)

         @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

         @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
         @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

         @:ASSERT(k >= 1, 'invalid block index')
         @:ASSERT(k <= this%n, 'invalid block index')

         ! Set the block

         i_0 = this%n_e*(k-1) + this%n_i + 1
         j_0 = this%n_e*(k-1) + 1

         do i = 1, this%n_e

            R = [E_l(i,:),E_r(i,:)]

            call this%set_row_(i_0+i-1, j_0, R)

         end do

         this%scl(k) = scl

         ! Finish

         return

      end subroutine set_E_${S}$_

      !****

      subroutine set_row_${S}$_(this, i_0, j_0, R)

         class(band_sysmtx_${S}$), intent(inout) :: this
         integer, intent(in)                     :: i_0
         integer, intent(in)                     :: j_0
         ${T}$, intent(in)                       :: R(:)

         integer :: j
         integer :: i_b
         integer :: j_b

         @:ASSERT_DEBUG(abs(i_0-j_0) <= this%n_ul, 'invalid indices')
         @:ASSERT_DEBUG(abs(i_0-(j_0+SIZE(R)-1)) <= this%n_ul, 'invalid indices')

         ! Set data in row i_0, starting at column j_0. The rest of the row
         ! is zeroed out

         do j = MAX(i_0-this%n_ul, 1), j_0-1
            i_b = 2*this%n_ul + 1 + i_0 - j
            j_b = j
            this%A_b(i_b, j_b) = 0._RD
         end do

         do j = j_0, j_0+SIZE(R)-1
            i_b = 2*this%n_ul + 1 + i_0 - j
            j_b = j
            this%A_b(i_b, j_b) = R(j-j_0+1)
         end do

         do j = j_0+SIZE(R), MIN(i_0+this%n_ul, this%n_e*(this%n+1))
            i_b = 2*this%n_ul + 1 + i_0 - j
            j_b = j
            this%A_b(i_b, j_b) = 0._RD
         end do

         ! Finish

         return

      end subroutine set_row_${S}$_

      !****

      subroutine get_row_${S}$_(this, i_0, j_0, R)

         class(band_sysmtx_${S}$), intent(in) :: this
         integer, intent(in)                  :: i_0
         integer, intent(in)                  :: j_0
         ${T}$, intent(out)                   :: R(:)

         integer :: j
         integer :: i_b
         integer :: j_b

         @:ASSERT_DEBUG(abs(i_0-j_0) <= this%n_ul, 'invalid indices')
         @:ASSERT_DEBUG(abs(i_0-(j_0+SIZE(R)-1)) <= this%n_ul, 'invalid indices')

         ! Get data from row i_0, starting at column j_0

         do j = j_0, j_0+SIZE(R)-1
            i_b = 2*this%n_ul + 1 + i_0 - j
            j_b = j
            R(j-j_0+1) = this%A_b(i_b, j_b)
         end do

         ! Finish

         return

      end subroutine get_row_${S}$_

      !****

      subroutine factor_${S}$_(this)

         class(band_sysmtx_${S}$), intent(inout) :: this

         integer :: n
         integer :: m
         integer :: info

         ! Factorize the sysmtx using LU decomposition

         call this%scale_rows_()

         n = SIZE(this%A_b, 1)
         m = SIZE(this%A_b, 2)

         call XGBTRF(m, m, this%n_ul, this%n_ul, this%A_b, n, this%ipiv, info)
         @:ASSERT(info == 0 .OR. info > m-this%n_e, 'non-zero return from XGBTRF')

         ! Finish

         return

      end subroutine factor_${S}$_

      !****

      subroutine scale_rows_${S}$_(this)

         class(band_sysmtx_${S}$), intent(inout) :: this

         integer  :: i
         integer  :: j
         real(RD) :: scl
         integer  :: i_b
         integer  :: j_b

         ! Scale the rows of the sysmtx to have maximum absolute value of unity

         do i = 1, this%n_e*(this%n+1)

            scl = 0._RD

            do j = MAX(i-this%n_ul, 1), MIN(i+this%n_ul, this%n_e*(this%n+1))
               i_b = 2*this%n_ul + 1 + i - j
               j_b = j
               scl = MAX(scl, abs(this%A_b(i_b,j_b)))
            end do

            do j = MAX(i-this%n_ul, 1), MIN(i+this%n_ul, this%n_e*(this%n+1))
               i_b = 2*this%n_ul + 1 + i - j
               j_b = j
               this%A_b(i_b,j_b) = this%A_b(i_b,j_b)/scl
            end do

            if (i <= this%n_i) then

               this%scl_i(i) = this%scl_i(i)*scl

            elseif (i > this%n_e*this%n + this%n_i) then

               associate (i_ => i-this%n_e*this%n-this%n_i)
                  this%scl_o(i_) = this%scl_o(i_)*scl
               end associate

            else

               associate (k => (i-1+this%n_o)/this%n_e)
                  this%scl(k) = this%scl(k)*scl
               end associate

            endif

         end do

         ! Finish

         return

      end subroutine scale_rows_${S}$_

      !****

      function det_${S}$_(this) result(det)

         class(band_sysmtx_${S}$), intent(in) :: this
         type(ext_${S}$)                      :: det

         integer :: j

         ! Evaluate the determinant

         det = product([ &
            ext_${S}$(this%A_b(2*this%n_ul+1,:)), &
            ext_${S}$(this%scl_i), &
            this%scl,ext_${S}$(this%scl_o)])

         do j = 1, SIZE(this%ipiv)
            if(this%ipiv(j) /= j) det = -det
         enddo

         ! Finish

         return

      end function det_${S}$_

      !****

      function soln_vec_hom_${S}$_(this) result(u)

         class(band_sysmtx_${S}$), intent(in) :: this
         ${T}$                                :: u(this%n_e*(this%n+1))

         integer              :: i_s
         real(RD)             :: A_s
         integer              :: i
         ${T}$, allocatable   :: A_b(:,:)
         ${T}$, allocatable   :: B(:,:)
         integer, allocatable :: ipiv(:)
         integer              :: n2
         integer              :: j
         integer              :: info

         ! Evaluate the solution vector u of the homogeneous linear system
         ! S u = 0. It is assumed that the nullity nul(S) >= 1

         associate (n => this%n, n_e => this%n_e, n_ul => this%n_ul)

            ! Locate the smallest element on the diagonal of the outer
            ! block (this will be taken to be the singular element)

            i_s = 0
            A_s = HUGE(0._RD)

            sing_loop : do i = n_e*n+1, n_e*(n+1)
               if (abs(this%A_b(2*n_ul+1,i)) < A_s) then
                  A_s = abs(this%A_b(2*n_ul+1,i))
                  i_s = i
               end if
            end do sing_loop

            ! Set up the reduced banded system

            allocate(A_b(3*n_ul+1,i_s-1))
            allocate(B(i_s-1,1))

            allocate(ipiv(i_s-1))

            A_b(:2*n_ul+1,:) = this%A_b(:2*n_ul+1,:i_s-1)
            A_b(2*n_ul+2:,:) = 0._RD

            n2 = MIN(2*n_ul, i_s-1)

            B(:i_s-n2-1,1) = 0._RD
            B(i_s-n2:,1) = -this%A_b(2*n_ul+1-n2:2*n_ul,i_s)

            do j = 1,i_s-1
               ipiv(j) = j
            enddo

            ! Solve for the 1:i_s-1 components of the solution vector

            call XGBTRS('N', SIZE(A_b, 2), n_ul, n_ul, 1, A_b, SIZE(A_b, 1), ipiv, B, SIZE(B, 1), info)
            @:ASSERT(info == 0, 'non-zero return from XGBTRS')

            u(:i_s-1) = B(:,1)

         end associate

         ! Fill in the remaining components of the solution vector

         u(i_s) = 1._RD
         u(i_s+1:) = 0._RD

         ! Finish

         return

      end function soln_vec_hom_${S}$_

      !****

      function soln_vec_inhom_${S}$_(this, v_i, v_o) result(u)

         class(band_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                    :: v_i(:)
         ${T}$, intent(in)                    :: v_o(:)
         ${T}$                                :: u(this%n_e*(this%n+1))

         ${T}$   :: B(this%n_e*(this%n+1),1)
         integer :: info

         @:CHECK_BOUNDS(SIZE(v_i), this%n_i)
         @:CHECK_BOUNDS(SIZE(v_o), this%n_o)

         ! Evaluate the solution vector u of the inhomogeneous linear
         ! system S u = v. It is assumed that the right-hand side vector v
         ! has non-zero components in only the n_i first and n_o last rows
         ! (corresponding to the inner and outer boundary
         ! conditions). These components are supplied in v_i and v_o,
         ! respectively.

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i, n_ul => this%n_ul)

            ! Set up the banded system

            B(:n_i,1) = v_i/this%scl_i
            B(n_i+1:n_i+n*n_e,1) = 0._RD
            B(n_i+n*n_e+1:,1) = v_o/this%scl_o

            ! Solve for u

            call XGBTRS('N', n_e*(n+1), n_ul, n_ul, 1, &
               this%A_b, SIZE(this%A_b, 1), this%ipiv, B, n_e*(n+1), info)
            @:ASSERT(info == 0, 'non-zero return from XGBTRS')

            u = B(:,1)

         end associate

         ! Finish

         return

      end function soln_vec_inhom_${S}$_

      !****

      function resd_vec_hom_${S}$_(this, u) result(dv)

         class(band_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                    :: u(:)
         ${T}$                                :: dv(this%n_e*(this%n+1))

         integer :: i
         integer :: j_a
         integer :: j_b
         ${T}$   :: R(this%n_e*(this%n+1))

         @:CHECK_BOUNDS(SIZE(u), this%n_e*(this%n+1))

         ! Evaluate the residual vector dv = S u of the homogeneous linear
         ! system S u = 0.

         associate (n => this%n, n_e => this%n_e)

            !$OMP PARALLEL DO PRIVATE (j_a, j_b, R)
            multiply_loop : do i = 1, n_e*(n+1)

               j_a = MAX(i-this%n_ul, 1)
               j_b = MIN(i+this%n_ul, n_e*(n+1))

               call this%get_row_(i, j_a, R(j_a:j_b))

               dv(i) = SUM(R(j_a:j_b)*u(j_a:j_b))

            end do multiply_loop

         end associate

         ! Finish

         return

      end function resd_vec_hom_${S}$_

      !****

      function resd_vec_inhom_${S}$_(this, u, v_i, v_o) result(dv)

         class(band_sysmtx_${S}$), intent(in) :: this
         ${T}$, intent(in)                      :: u(:)
         ${T}$, intent(in)                      :: v_i(:)
         ${T}$, intent(in)                      :: v_o(:)
         ${T}$                                  :: dv(this%n_e*(this%n+1))

         @:CHECK_BOUNDS(SIZE(u), this%n_e*(this%n+1))

         @:CHECK_BOUNDS(SIZE(v_i), this%n_i)
         @:CHECK_BOUNDS(SIZE(v_o), this%n_o)

         ! Evaluate the residual vector dv = S u - v of the inhomogeneous
         ! linear system S u = v. It is assumed that the right-hand side
         ! vector v has non-zero components in only the n_i first and n_o
         ! last rows (corresponding to the inner and outer boundary
         ! conditions). These components are supplied in v_i and v_o,
         ! respectively.

         ! First evaluate dv for the homogeneous case

         dv = this%resd_vec_hom(u)

         ! Subtract v

         associate (n => this%n, n_e => this%n_e, n_i => this%n_i)

            dv(:n_i) = dv(:n_i) - v_i
            dv(n_e*n+1:) = dv(n_e*n+1:) - v_o

         end associate

         ! Finish

         return

      end function resd_vec_inhom_${S}$_

      !****

      subroutine dump_${S}$_(this, hi)

         class(band_sysmtx_${S}$), intent(in) :: this
         type(hdf5io_t), intent(inout)        :: hi

         ${T}$, allocatable :: E_l(:,:,:)
         ${T}$, allocatable :: E_r(:,:,:)
         ${T}$, allocatable :: B_i(:,:)
         ${T}$, allocatable :: B_o(:,:)
         integer            :: i
         integer            :: k

         ! Dump the band_sysmtx_t to the hgroup

         call hi%write_attr('n', this%n)
         call hi%write_attr('n_e', this%n_e)
         call hi%write_attr('n_i', this%n_i)
         call hi%write_attr('n_o', this%n_o)

         associate (n => this%n, &
            n_e => this%n_e, &
            n_i => this%n_i, &
            n_o => this%n_o)

            allocate(E_l(n_e,n_e,n))
            allocate(E_r(n_e,n_e,n))

            allocate(B_i(n_i,n_e))
            allocate(B_o(n_o,n_e))

            do i = 1, n_i
               call this%get_row_(i, 1, B_i(i,:))
            end do

            block_loop: do k = 1, n
               do i = 1, n_e
                  call this%get_row_((k-1)*n_e+i+n_i, (k-1)*n_e+1, E_l(i,:,k))
                  call this%get_row_((k-1)*n_e+i+n_i,  k   *n_e+1, E_r(i,:,k))
               end do
            end do block_loop

            do i = 1, n_o
               call this%get_row_(n*n_e+i+n_i, n*n_e+1, B_o(i,:))
            end do

         end associate

         call hi%write_dset('B_i', B_i)
         call hi%write_dset('scl_i', this%scl_i)

         call hi%write_dset('B_o', B_o)
         call hi%write_dset('scl_o', this%scl_o)

         call hi%write_dset('E_l', E_l)
         call hi%write_dset('E_r', E_r)

         call hi%write_dset('scl_f', FRACTION(this%scl))
         call hi%write_dset('scl_e', EXPONENT(this%scl))

         ! Finish

         return

      end subroutine dump_${S}$_

   #:endfor

end module band_sysmtx_m
