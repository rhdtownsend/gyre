! Module  : detail_m
! Purpose : detailed output
!
! Copyright 2020-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'
#:include 'model.inc'

module detail_m

   ! Uses

   use forum_m, only: RD

   use anapoly_0_model_m
   use anapoly_1_model_m
   use anapoly_5_model_m
   use anapoly_5_1_model_m
   use context_m
   use constants_m
   use evol_model_m
   use freq_m
   use grid_m
   use hom_model_m
   use hdf_writer_m
   use mode_m
   use model_m
   use out_par_m
   use out_util_m
   use poly_model_m
   use parfaitd_model_m
   use resp_m
   use state_m
   use txt_writer_m
   use util_m
   use wave_m
   use writer_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: detail_t
      private
      type(out_par_t) :: ot_p
   contains
      procedure, public :: write
   end type detail_t

   ! Interfaces

   interface detail_t
      module procedure detail_t_
   end interface detail_t

   ! Access specifiers

   public :: detail_t

   ! Default access

   private

contains

   function detail_t_(ot_p) result(dt)

      type(out_par_t), intent(in) :: ot_p
      type(detail_t)              :: dt

      ! Construct the detail_t

      dt%ot_p = ot_p

      ! Finish

   end function detail_t_

   !****

   subroutine write(this, wv)

      class(detail_t), intent(inout) :: this
      class(wave_t), intent(in)      :: wv

      character(:), allocatable        :: detail_file
      class(writer_t), allocatable     :: wr
      character(ITEM_LEN), allocatable :: items(:)
      type(context_t)                  :: cx
      class(model_t), pointer          :: ml
      type(state_ct)                   :: st
      type(grid_t)                     :: gr
      integer                          :: i
      logical                          :: written

      ! Write a detail file

      if (this%ot_p%detail_template == '' .OR. &
         this%ot_p%detail_item_list == '' .OR. &
         filter_wave(wv, this%ot_p%detail_filter_list)) return

      ! Set up the filename

      detail_file = this%ot_p%detail_template

      detail_file = subst(detail_file, '%ID', wv%id, '(I5.5)')
      detail_file = subst(detail_file, '%L', wv%l, '(I3.3)')
      detail_file = subst(detail_file, '%M', wv%m, '(SP,I3.2)')
      detail_file = subst(detail_file, '%id', wv%id, '(I0)')
      detail_file = subst(detail_file, '%l', wv%l, '(I0)')
      detail_file = subst(detail_file, '%m', wv%m, '(SP,I0)')

      select type (wv)
      class is (mode_t)
         detail_file = subst(detail_file, '%N', wv%n_pg, '(SP,I6.5)')
         detail_file = subst(detail_file, '%n', wv%n_pg, '(SP,I0)')
         detail_file = subst(detail_file, '%P', wv%n_p, '(SP,I6.5)')
         detail_file = subst(detail_file, '%p', wv%n_p, '(SP,I0)')
         detail_file = subst(detail_file, '%G', wv%n_g, '(SP,I6.5)')
         detail_file = subst(detail_file, '%g', wv%n_g, '(SP,I0)')
      class is (resp_t)
         detail_file = subst(detail_file, '%K', wv%k, '(SP,I3.2)')
         detail_file = subst(detail_file, '%k', wv%k, '(SP,I0)')
      end select

      ! Open the file

      select case (this%ot_p%detail_file_format)
      case ('HDF')
         allocate(wr, SOURCE=hdf_writer_t(detail_file, this%ot_p%label))
      case ('TXT')
         allocate(wr, SOURCE=txt_writer_t(detail_file, this%ot_p%label))
      case default
         @:ABORT('invalid detail_file_format')
      end select

      ! Split the item list

      items = split_list(this%ot_p%detail_item_list, ',', unique=.TRUE.)

      ! Write the items

      cx = wv%context()
      ml => cx%model()

      st = wv%state()
      gr = wv%grid()

      item_loop : do i = 1, SIZE(items)

         call write_const_(items(i), wr, written)
         if (written) cycle item_loop

         call write_wave_(items(i), this%ot_p, wv, gr, wr, written)
         if (written) cycle item_loop

         call write_context_(items(i), this%ot_p, cx, gr, st, wr, written)
         if (written) cycle item_loop

         call write_model_(items(i), this%ot_p, ml, gr, wv%l, wr, written)
         if (written) cycle item_loop

         ! Indicate a problem with the writing

         write(ERROR_UNIT, *) 'ignoring missing/invalid detail item:', TRIM(items(i))

      end do item_loop

      ! Close the file

      call wr%final()

      ! Finish

   end subroutine write

   !****

   subroutine write_const_(item, wr, written)

      character(*), intent(in)       :: item
      class(writer_t), intent(inout) :: wr
      logical, intent(out)           :: written

      ! Write the item from constants data

      written = .TRUE.

      select case (item)

         #:for N in ('G_GRAVITY', 'C_LIGHT', 'A_RADIATION', 'M_SUN', 'R_SUN', 'L_SUN', 'GYRE_DIR')
            case('${N}$')
               call wr%write('${N}$', ${N}$)
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_const_

   !****

   subroutine write_wave_(item, ot_p, wv, gr, wr, written)

      character(*), intent(in)       :: item
      type(out_par_t), intent(in)    :: ot_p
      class(wave_t), intent(in)      :: wv
      type(grid_t), intent(in)       :: gr
      class(writer_t), intent(inout) :: wr
      logical, intent(out)           :: written

      integer :: j

      ! Write the item from wave_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('lambda', 'wv%lambda(j)'), &
            ('y_1', 'wv%y_i(1, j)'), &
            ('y_2', 'wv%y_i(2, j)'), &
            ('y_3', 'wv%y_i(3, j)'), &
            ('y_4', 'wv%y_i(4, j)'), &
            ('y_5', 'wv%y_i(5, j)'), &
            ('y_6', 'wv%y_i(6, j)'), &
            ('xi_r', 'wv%xi_r(j)'), &
            ('xi_h', 'wv%xi_h(j)'), &
            ('eul_Phi', 'wv%eul_Phi(j)'), &
            ('deul_Phi', 'wv%deul_Phi(j)'), &
            ('eul_P', 'wv%eul_P(j)'), &
            ('eul_rho', 'wv%eul_rho(j)'), &
            ('eul_T', 'wv%eul_T(j)'), &
            ('lag_P', 'wv%lag_P(j)'), &
            ('lag_rho', 'wv%lag_rho(j)'), &
            ('lag_T', 'wv%lag_T(j)'), &
            ('lag_S', 'wv%lag_S(j)'), &
            ('lag_L', 'wv%lag_L(j)'), &
            ('dE_dx', 'wv%dE_dx(j)'), &
            ('dW_dx', 'wv%dW_dx(j)'), &
            ('dW_eps_dx', 'wv%dW_eps_dx(j)'), &
            ('dQ_dx', 'wv%dQ_dx(j)'), &
            ('dzeta_dx', 'wv%dzeta_dx(j)'), &
            ('dbeta_dx', 'wv%dbeta_dx(j)'), &
            ('dtau_ss_dx', 'wv%dtau_ss_dx(j)'), &
            ('dtau_tr_dx', 'wv%dtau_tr_dx(j)'), &
            ('Yt_1', 'wv%Yt_1(j)'), &
            ('Yt_2', 'wv%Yt_2(j)'), &
            ('I_0', 'wv%I_0(j)'), &
            ('I_1', 'wv%I_1(j)'), &
            ('alpha_0', 'wv%alpha_0(j)'), &
            ('alpha_1', 'wv%alpha_1(j)'), &
            ('prop_type', 'wv%prop_type(j)'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

         #:for N, E in ( &
            ('n', 'wv%n'), &
            ('id', 'wv%n'), &
            ('l', 'wv%l'), &
            ('l_i', 'wv%l_i'), &
            ('m', 'wv%m'), &
            ('omega', 'wv%omega'), &
            ('omega_int', 'wv%omega_int()'), &
            ('domega_rot', 'wv%domega_rot()'), &
            ('freq', 'wv%freq(ot_p%freq_units, ot_p%freq_frame)'), &
            ('dfreq', 'wv%dfreq_rot(ot_p%freq_units)'), &
            ('freq_units', 'ot_p%freq_units'), &
            ('freq_frame', 'ot_p%freq_frame'), &
            ('eta', 'wv%eta()'), &
            ('f_T', 'wv%f_T()'), &
            ('f_g', 'wv%f_g()'), &
            ('psi_T', 'wv%psi_T()'), &
            ('psi_g', 'wv%psi_g()'), &
            ('E', 'wv%E()'), &
            ('E_p', 'wv%E_p()'), &
            ('E_g', 'wv%E_g()'), &
            ('E_norm', 'wv%E_norm()'), &
            ('E_ratio', 'wv%E_ratio()'), &
            ('H', 'wv%H()'), &
            ('W', 'wv%W()'), &
            ('W_eps', 'wv%W_eps()'), &
            ('Q', 'wv%Q()'), &
            ('tau_ss', 'wv%tau_ss()'), &
            ('tau_tr', 'wv%tau_tr()'), &
            ('zeta', 'wv%zeta()'), &
            ('beta', 'wv%beta()'), &
            ('x', 'gr%pt%x'), &
            ('dx_min', 'wv%dx_min()'), &
            ('dx_max', 'wv%dx_max()'), &
            ('dx_rms', 'wv%dx_rms()'), &
            ('x_ref', 'gr%pt(wv%j_ref)%x'), &
            ('xi_r_ref', 'wv%xi_r(wv%j_ref)'), &
            ('xi_h_ref', 'wv%xi_h(wv%j_ref)'), &
            ('eul_Phi_ref', 'wv%eul_Phi(wv%j_ref)'), &
            ('deul_Phi_ref', 'wv%deul_Phi(wv%j_ref)'), &
            ('lag_S_ref', 'wv%lag_S(wv%j_ref)'), &
            ('lag_L_ref', 'wv%lag_L(wv%j_ref)'))
            case ('${N}$')
               call wr%write('${N}$', ${E}$)
         #:endfor

      case default

         select type (wv)

         class is (mode_t)

            call write_mode_(item, ot_p, wv, gr, wr, written)

         class is (resp_t)

            call write_resp_(item, ot_p, wv, gr, wr, written)

         class default

            written = .FALSE.

         end select

      end select

      ! Finish

      return

   end subroutine write_wave_

   !****

   subroutine write_mode_(item, ot_p, md, gr, wr, written)

      character(*), intent(in)       :: item
      type(out_par_t), intent(in)    :: ot_p
      class(mode_t), intent(in)      :: md
      type(grid_t), intent(in)       :: gr
      class(writer_t), intent(inout) :: wr
      logical, intent(out)           :: written

      ! Write the item from mode_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('n_p', 'md%n_p'), &
            ('n_g', 'md%n_g'), &
            ('n_pg', 'md%n_pg'))
            case ('${N}$')
               call wr%write('${N}$', ${E}$)
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_mode_

   !****

   subroutine write_resp_(item, ot_p, rs, gr, wr, written)

      character(*), intent(in)       :: item
      type(out_par_t), intent(in)    :: ot_p
      class(resp_t), intent(in)      :: rs
      type(grid_t), intent(in)       :: gr
      class(writer_t), intent(inout) :: wr
      logical, intent(out)           :: written

      integer :: j

      ! Write the item from resp_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('eul_Psi', 'rs%eul_Psi(j)'), &
            ('Phi_T', 'rs%Phi_T(j)'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

         #:for N, E in ( &
            ('k', 'rs%k'), &
            ('eul_Psi_ref', 'rs%eul_Psi(rs%j_ref)'), &
            ('Phi_T_ref', 'rs%Phi_T(rs%j_ref)'), &
            ('Omega_orb', ' rs%Omega_orb(ot_p%freq_units, ot_p%freq_frame)'), &
            ('q', ' rs%or_p%q'), &
            ('e', ' rs%or_p%e'), &
            ('R_a', ' rs%R_a()'), &
            ('cbar', ' rs%cbar()'), &
            ('Gbar_1', ' rs%Gbar_1()'), &
            ('Gbar_2', ' rs%Gbar_2()'), &
            ('Gbar_3', ' rs%Gbar_3()'), &
            ('Gbar_4', ' rs%Gbar_4()'))
            case ('${N}$')
               call wr%write('${N}$', ${E}$)
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_resp_

   !****

   subroutine write_context_(item, ot_p, cx, gr, st, wr, written)

      character(*), intent(in)       :: item
      type(out_par_t), intent(in)    :: ot_p
      class(context_t), intent(in)   :: cx
      type(grid_t), intent(in)       :: gr
      type(state_ct), intent(in)     :: st
      class(writer_t), intent(inout) :: wr
      logical, intent(out)           :: written

      integer :: j

      ! Write the item from context_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('eps_rho', 'cx%eps_rho(st, gr%pt(j))'), &
            ('eps_T', 'cx%eps_T(st, gr%pt(j))'), &
            ('Omega_rot', 'cx%Omega_rot(gr%pt(j))'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_context_

   !****

   subroutine write_model_(item, ot_p, ml, gr, l, wr, written)

      character(*), intent(in)            :: item
      type(out_par_t), intent(in)         :: ot_p
      class(model_t), pointer, intent(in) :: ml
      type(grid_t), intent(in)            :: gr
      integer, intent(in)                 :: l
      class(writer_t), intent(inout)      :: wr
      logical, intent(out)                :: written

      integer :: j

      ! Write the item from model_t data

      written = .TRUE.

      select case (item)

         #:for N, I in zip(COEFF_NAMES, COEFF_IDX_NAMES)
            case ('${N}$')
               call wr%write('${N}$', [(ml%coeff(${I}$, gr%pt(j)), j=1,gr%n)])
            case ('d${N}$')
               call wr%write('d${N}$', [(ml%dcoeff(${I}$, gr%pt(j)), j=1,gr%n)])
         #:endfor

         #:for N, E in ( &
            ('Delta_p', 'ml%Delta_p(gr%x_i(), gr%x_o())'), &
            ('Delta_g', 'ml%Delta_g(gr%x_i(), gr%x_o(), l*(l+1._RD))'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

      case default

         select type (ml)

         class is (evol_model_t)

            call write_evol_model_(item, ot_p, ml, gr, l, wr, written)

         class is (parfaitd_model_t)

            call write_parfaitd_model_(item, ot_p, ml, gr, l, wr, written)

         #:for T in ('hom', 'poly', 'anapoly_0', 'anapoly_1', 'anapoly_5', 'anapoly_5_1')

            class is (${T}$_model_t)

               call write_${T}$_model_(item, ot_p, ml, gr, l, wr, written)

         #:endfor

         class default

            written = .FALSE.

         end select

      end select

      ! Finish

      return

   end subroutine write_model_

   !****

   subroutine write_evol_model_(item, ot_p, ml, gr, l, wr, written)

      character(*), intent(in)                 :: item
      type(out_par_t), intent(in)              :: ot_p
      class(evol_model_t), pointer, intent(in) :: ml
      type(grid_t), intent(in)                 :: gr
      integer, intent(in)                      :: l
      class(writer_t), intent(inout)           :: wr
      logical, intent(out)                     :: written

      integer :: j

      ! Write the item from evol_model_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('M_r', 'ml%M_r(gr%pt(j))'), &
            ('P', 'ml%P(gr%pt(j))'), &
            ('rho', 'ml%rho(gr%pt(j))'), &
            ('T', 'ml%T(gr%pt(j))'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

         #:for N, E in ( &
            ('M_star', 'ml%M_star'), &
            ('R_star', 'ml%R_star'), &
            ('L_star', 'ml%L_star'))
            case ('${N}$')
               call wr%write('${N}$', ${E}$)
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_evol_model_

   !****

   subroutine write_parfaitd_model_(item, ot_p, ml, gr, l, wr, written)

      character(*), intent(in)                     :: item
      type(out_par_t), intent(in)                  :: ot_p
      class(parfaitd_model_t), pointer, intent(in) :: ml
      type(grid_t), intent(in)                     :: gr
      integer, intent(in)                          :: l
      class(writer_t), intent(inout)               :: wr
      logical, intent(out)                         :: written

      integer :: j

      ! Write the item from parfaitd_model_t data

      written = .TRUE.

      select case (item)

         #:for N, E in ( &
            ('M_r', 'ml%M_r(gr%pt(j))'), &
            ('P', 'ml%P(gr%pt(j))'), &
            ('rho', 'ml%rho(gr%pt(j))'))
            case ('${N}$')
               call wr%write('${N}$', [(${E}$, j=1,gr%n)])
         #:endfor

         #:for N, E in ( &
            ('M_star', 'ml%M_star'), &
            ('R_star', 'ml%R_star'))
            case ('${N}$')
               call wr%write('${N}$', ${E}$)
         #:endfor

      case default

         written = .FALSE.

      end select

      ! Finish

      return

   end subroutine write_parfaitd_model_

   !****

   #:for T in ('hom', 'poly', 'anapoly_0', 'anapoly_1', 'anapoly_5', 'anapoly_5_1')

      subroutine write_${T}$_model_(item, ot_p, ml, gr, l, wr, written)

         character(*), intent(in)                  :: item
         type(out_par_t), intent(in)               :: ot_p
         class(${T}$_model_t), pointer, intent(in) :: ml
         type(grid_t), intent(in)                  :: gr
         integer, intent(in)                       :: l
         class(writer_t), intent(inout)            :: wr
         logical, intent(out)                      :: written

         integer :: j

         ! Write the item from ${T}$_model_t data

         written = .TRUE.

         select case (item)
         case ('U_D')
            call wr%write('U_D', [(ml%coeff_U_D(gr%pt(j)), j=1,gr%n)])
         case default
            written = .FALSE.
         end select

         ! Finish

         return

      end subroutine write_${T}$_model_

   #:endfor

end module detail_m
