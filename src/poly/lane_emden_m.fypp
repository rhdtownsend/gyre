! Module  : lane_emden_m
! Purpose : Lane-Emden equation solver for composite polytropes
!
! Copyright 2015-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module lane_emden_m

   ! Uses

   use forum_m, only: RD, reallocate

   use math_m

   use odepack

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   public :: solve_lane_emden

   ! Default access

contains

   subroutine solve_lane_emden(n_poly, z_b, Delta_b, theta_s, dz, tol, z, theta, dtheta, n_r_out)

      real(RD), intent(in)               :: n_poly(:)
      real(RD), intent(in)               :: z_b(:)
      real(RD), intent(in)               :: Delta_b(:)
      real(RD), intent(in)               :: theta_s
      real(RD), intent(in)               :: dz
      real(RD), intent(in)               :: tol
      real(RD), allocatable, intent(out) :: z(:)
      real(RD), allocatable, intent(out) :: theta(:)
      real(RD), allocatable, intent(out) :: dtheta(:)
      integer, intent(out)               :: n_r_out

      real(RD), parameter :: X_BEG = sqrt(EPSILON(0._RD))
      integer, parameter  :: D_0 = 512
      integer, parameter  :: NEQ = 2
      integer, parameter  :: NG = 2

      integer               :: d
      integer               :: n
      real(RD), allocatable :: x(:)
      real(RD), allocatable :: y(:,:)
      real(RD)              :: dx
      real(RD)              :: x_exp
      real(RD)              :: y_exp(2)
      real(RD)              :: B
      integer               :: n_r
      logical               :: first
      integer               :: i
      real(RD)              :: x_bdy
      integer               :: istate
      real(RD)              :: rwork(22+NEQ*MAX(16,NEQ+9)+3*NG)
      integer               :: iwork(20+NEQ)
      integer               :: jroot(NG)
      real(RD)              :: t_t
      real(RD)              :: f

      @:CHECK_BOUNDS(SIZE(z_b), SIZE(n_poly)-1)
      @:CHECK_BOUNDS(SIZE(Delta_b), SIZE(n_poly)-1)

      if (SIZE(z_b) > 0) then
         @:ASSERT(z_b(1) > X_BEG, 'First boundary too close to origin')
      endif

      ! Initialize arrays

      d = D_0

      allocate(x(d))
      allocate(y(2,d))

      n = 0

      ! Perform a series expansion out to X_BEG

      dx = dz

      x_exp = 0._RD

      expand_loop : do

         ! Use a forth-order expansion of the Lane-Emden solutions

         y_exp(1) = 1._RD - x_exp**2/6._RD + n_poly(1)*x_exp**4/120._RD
         y_exp(2) = -x_exp/3._RD + n_poly(1)*x_exp**3/30._RD

         if (x_exp < X_BEG) then

            ! If necessary, expand arrays

            n = n + 1

            if(n > d) then
               d = 2*d
               call reallocate(x, [d])
               call reallocate(y, [2,d])
            endif

            x(n) = x_exp
            y(:,n) = y_exp

         else

            exit expand_loop

         end if

         x_exp = MIN(x_exp+dx, X_BEG)

      end do expand_loop

      ! Now continue by intergrating to each boundary point, or to the
      ! surface

      B = 1._RD

      n_r = SIZE(z_b) + 1

      first = .TRUE.

      region_loop : do i = 1, n_r

         if (i < n_r) then
            x_bdy = z_b(i)
         else
            x_bdy = HUGE(0._RD)
         endif

         istate = 1

         integrate_loop : do

            ! Integrate one step

            n = n + 1

            if(n > d) then
               d = 2*d
               call reallocate(x, [d])
               call reallocate(y, [2,d])
            endif

            if (first) then
               x(n) = x_exp
               y(:,n) = y_exp
               first = .FALSE.
            else
               x(n) = x(n-1)
               y(:,n) = y(:,n-1)
            end if

            call LSODAR(lane_emden_rhs_, [NEQ], y(:,n), x(n), x(n-1)+dx, 1, [0._RD,0._RD], [tol,tol], &
               1, istate, 0, rwork, SIZE(rwork), iwork, SIZE(iwork), lane_emden_jac_, 1, &
               lane_emden_constr_, NG, jroot)

            ! Check for success

            select case (istate)
            case (2)
            case (3)
               if (jroot(1) == 1) then
                  exit integrate_loop
               elseif (jroot(2) == 1) then
                  exit region_loop
               else
                  @:ABORT('Root not found')
               endif
            case default
               write(ERROR_UNIT, *) 'istate is ',istate
               write(ERROR_UNIT, *) 'Integration range x=',x(n-1)
               write(ERROR_UNIT, *) 'Starting location y=',y(:,n-1)
               write(ERROR_UNIT, *) 'Relative tolerance =',0._RD
               write(ERROR_UNIT, *) 'Absolute tolerance =',tol
               write(ERROR_UNIT, *) 'Number of steps    =',n
               @:ABORT('Integration failed')
            end select

         end do integrate_loop

         ! Create the boundary double point

         n = n + 1

         if(n > d) then
            d = 2*d
            call reallocate(x, [d])
            call reallocate(y, [2,d])
         endif

         x(n) = x(n-1)

         t_t = exp(n_poly(i)*log(y(1,n-1)) + Delta_b(i))

         y(1,n) = 1._RD

         f = ((n_poly(i  )+1._RD)*y(1,n  )**(n_poly(i+1)+1._RD))/ &
            ((n_poly(i+1)+1._RD)*y(1,n-1)**(n_poly(i  )+1._RD))

         y(2,n) = f*t_t*y(2,n-1)

         ! Update B

         B = f*t_t**2*B

      end do region_loop

      y(1,n) = theta_s

      ! Record how many regions were actually encountered

      n_r_out = i

      ! Set up return values

      z = x(:n)

      theta = y(1,:n)
      dtheta = y(2,:n)

      ! Finish

      return

   contains

      subroutine lane_emden_rhs_(neq, x, y, dy_dx)

         integer, intent(in)   :: neq
         real(RD), intent(in)  :: x
         real(RD), intent(in)  :: y(neq)
         real(RD), intent(out) :: dy_dx(neq)

         ! Calculate the right-hand side vector

         dy_dx(1) = y(2)
         if (n_poly(i) /= 0._RD) then
            dy_dx(2) = -B*abs(y(1))**n_poly(i) - 2._RD*y(2)/x
         else
            dy_dx(2) = -B - 2._RD*y(2)/x
         endif

         ! Finish

         return

      end subroutine lane_emden_rhs_

      !****

      subroutine lane_emden_jac_(neq, x, y, ml, mu, pd, nrowpd)

         integer, intent(in)   :: neq
         real(RD), intent(in)  :: x
         real(RD), intent(in)  :: y(neq)
         integer, intent(in)   :: ml
         integer, intent(in)   :: mu
         integer, intent(in)   :: nrowpd
         real(RD), intent(out) :: pd(nrowpd,neq)

         ! Calculate the Jacobian matrix

         pd(1,1) = 0._RD
         pd(1,2) = 1._RD

         pd(2,1) = -n_poly(i)*B*abs(y(1))**(n_poly(i)-1._RD)*SIGN(1._RD, y(1))
         pd(2,2) = -2._RD/x

         ! Finish

         return

      end subroutine lane_emden_jac_

      !****

      subroutine lane_emden_constr_(neq, x, y, ng, gout)

         integer, intent(in)   :: neq
         real(RD), intent(in)  :: x
         real(RD), intent(in)  :: y(neq)
         integer, intent(in)   :: ng
         real(RD), intent(out) :: gout(ng)

         ! Calculate the constraint function

         gout(1) = x - x_bdy       ! Region boundary
         gout(2) = y(1) - theta_s  ! Surface

         ! Finish

         return

      end subroutine lane_emden_constr_

   end subroutine solve_lane_emden

end module lane_emden_m
