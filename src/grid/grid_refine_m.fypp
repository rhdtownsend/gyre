! Module  : grid_refine_m
! Purpose : procedures for grid_t refinement
!
! Copyright 2013-2024 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module grid_refine_m

   ! Uses

   use forum_m, only: RD, hdf5io_t, OPEN_FILE_RO, sort_indices, unique_indices

   use context_m
   use grid_m
   use grid_par_m
   use grid_spec_m
   use grid_util_m
   use math_m
   use model_m
   use osc_par_m
   use point_m
   use state_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Interfaces

   interface refine_grid
      module procedure refine_grid_context_
      module procedure refine_grid_spec_
   end interface refine_grid

   ! Access specifiers

   public :: refine_grid

   ! Default access

   private

contains

   subroutine refine_grid_context_(gr, cx, omega, gr_p, os_p)

      type(grid_t), intent(inout)          :: gr
      type(context_t), pointer, intent(in) :: cx
      real(RD), intent(in)                 :: omega(:)
      type(grid_par_t), intent(in)         :: gr_p
      type(osc_par_t), intent(in)          :: os_p

      type(grid_spec_t) :: gs

      ! Refine the grid_t using the supplied context

      gs = grid_spec_t(cx, omega)

      call refine_grid_spec_(gr, [gs], gr_p, os_p)

      ! Finish

      return

   end subroutine refine_grid_context_

   !****

   subroutine refine_grid_spec_(gr, gs, gr_p, os_p)

      type(grid_t), intent(inout)   :: gr
      type(grid_spec_t), intent(in) :: gs(:)
      type(grid_par_t), intent(in)  :: gr_p
      type(osc_par_t), intent(in)   :: os_p

      class(model_t), pointer :: ml => null()
      integer                 :: i
      integer                 :: s

      @:ASSERT_DEBUG(SIZE(gs) >= 1, 'too few grid_specs')

      ! Refine the grid_t using the supplied array of grid_specs. Each
      ! grid spec supplies a context and the set of frequencies to
      ! adopt for that context

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Building spatial grid'
100      format(A)
      endif

      select case (gr_p%scaffold_src)
      case ('MODEL')
         if (check_log_level('INFO')) then
            write(OUTPUT_UNIT, 110) 'Scaffold grid from model'
110         format(3X,A)
         end if
      case ('FILE')
         if (check_log_level('INFO')) then
            write(OUTPUT_UNIT, 110) 'Scaffold grid from file '//TRIM(gr_p%file)
         end if
      end select

      ! Check that the grid_specs are all associated with the same model

      @:ASSERT_DEBUG(ASSOCIATED(gs(1)%cx), 'null pointer')

      ml => gs(1)%cx%model()

      check_loop : do i = 1, SIZE(gs)
         @:ASSERT_DEBUG(ASSOCIATED(gs(i)%cx), 'null pointer')
         @:ASSERT_DEBUG(ASSOCIATED(gs(i)%cx%model(), ml), 'contexts are associated with different models')
      end do check_loop

      ! Build the grid by adding points to the scaffold grid

      call add_points_(gs, gr_p, os_p, gr)

      ! Report

      if (check_log_level('INFO')) then

         write(OUTPUT_UNIT, 120) 'Final grid has', gr%s_o()-gr%s_i()+1, 'segment(s) and', gr%n, 'point(s):'
120      format(3X,A,1X,I0,1X,A,1X,I0,1X,A)

         seg_loop : do s = gr%s_i(), gr%s_o()

            associate( &
               j_i => gr%j_s_i(s), &
               j_o => gr%j_s_o(s))

               write(OUTPUT_UNIT, 130) 'Segment', s, ': x range', gr%pt(j_i)%x, '->', gr%pt(j_o)%x, &
                  '(', j_i, '->', j_o, ')'
130            format(6X,A,1X,I0,1X,A,1X,F6.4,1X,A,1X,F6.4,1X,A,I0,1X,A,1X,I0,A)

            end associate

         end do seg_loop

         write(OUTPUT_UNIT, *)

      end if

      ! Finish

   end subroutine refine_grid_spec_

   !****

   subroutine add_points_(gs, gr_p, os_p, gr)

      type(grid_spec_t), intent(in) :: gs(:)
      type(grid_par_t), intent(in)  :: gr_p
      type(osc_par_t), intent(in)   :: os_p
      type(grid_t), intent(inout)   :: gr

      integer              :: n
      integer              :: i_iter
      logical, allocatable :: split(:)
      integer              :: j
      integer              :: i
      real(RD)             :: dx
      logical, allocatable :: split_new(:)
      integer              :: j_new

      ! Add points globally

      ! Initialize the split array

      n = gr%n

      split = gr%pt(2:)%s == gr%pt(:n-1)%s

      ! Iterate until no more points need be added

      iter_loop : do i_iter = 1, gr_p%n_iter_max

         ! Loop through grid subintervals

         !$OMP PARALLEL DO PRIVATE (dx, i) SCHEDULE (DYNAMIC)
         sub_loop : do j = 1, n-1

            ! Check/update if the subinterval should be considered for splitting

            if (split(j)) then

               associate (pt_a => gr%pt(j), &
                  pt_b => gr%pt(j+1))

                  dx = pt_b%x - pt_a%x

                  if (dx > gr_p%dx_min) then

                     spec_loop : do i = 1, SIZE(gs)

                        associate (cx => gs(i)%cx, &
                           omega => gs(i)%omega)

                           if (pt_a%x /= 0._RD) then

                              split(j) = split_mech_(cx, pt_a, pt_b, omega, gr_p, os_p) .OR. &
                                 split_therm_(cx, pt_a, pt_b, omega, gr_p) .OR. &
                                 split_struct_(cx, pt_a, pt_b, gr_p) .OR. &
                                 dx > gr_p%dx_max

                           else

                              split(j) = split_center_(cx, pt_a, pt_b, omega, gr_p) .OR. &
                                 dx > gr_p%dx_max

                           end if

                        end associate

                        if (split(j)) exit spec_loop

                     end do spec_loop

                  else

                     split(j) = .FALSE.

                  endif

               end associate

            end if

         end do sub_loop

         if (check_log_level('INFO')) then
            write(OUTPUT_UNIT, 100) 'Split', COUNT(split), 'subinterval(s) in iteration', i_iter
100         format(3X,A,1X,I0,1X,A,1X,I0)
         endif

         ! Check for completion

         if (COUNT(split) == 0) exit iter_loop

         ! Perform splitting

         gr = grid_t(gr, split)

         ! Update the split array

         allocate(split_new(n + COUNT(split) - 1))

         j_new = 1

         do j = 1, n-1

            split_new(j_new) = split(j)
            j_new = j_new + 1

            if (split(j)) then

               split_new(j_new) = split(j)
               j_new = j_new + 1

            endif

         end do

         n = n + COUNT(split)

         call MOVE_ALLOC(split_new, split)

      end do iter_loop

      ! Finish

      return

   end subroutine add_points_

   !****

   function split_mech_(cx, pt_a, pt_b, omega, gr_p, os_p) result(split)

      type(context_t), intent(in)  :: cx
      type(point_t), intent(in)    :: pt_a
      type(point_t), intent(in)    :: pt_b
      real(RD), intent(in)         :: omega(:)
      type(grid_par_t), intent(in) :: gr_p
      type(osc_par_t), intent(in)  :: os_p
      logical                      :: split

      type(point_t)  :: pt
      real(RD)       :: dlnx
      real(RD)       :: V
      real(RD)       :: As
      real(RD)       :: U
      real(RD)       :: c_1
      real(RD)       :: Gamma_1
      real(RD)       :: Omega_rot
      real(RD)       :: Omega_rot_i
      integer        :: i
      type(state_rt) :: st
      real(RD)       :: omega_c
      real(RD)       :: lambda
      real(RD)       :: l_i
      real(RD)       :: c_0
      real(RD)       :: c_2
      real(RD)       :: c_4
      real(RD)       :: psi2
      real(RD)       :: chi_r
      real(RD)       :: chi_r_p
      real(RD)       :: chi_r_m
      real(RD)       :: chi_i

      ! Determine whether the subinterval [pt_a,pt_b] warrants
      ! splitting, via a local analysis of the mechanical parts of the
      ! oscillation equations

      if (gr_p%w_osc == 0._RD .AND. gr_p%w_exp == 0._RD) then

         ! No splitting necessary

         split = .FALSE.

      else

         ! Evaluate coefficients at the midpoint

         pt%s = pt_a%s
         pt%x = 0.5_RD*(pt_a%x + pt_b%x)

         dlnx = LOG(pt_b%x) - LOG(pt_a%x)

         associate (ml => cx%model())

            V = ml%coeff(I_V_2, pt)*pt%x**2
            As = ml%coeff(I_AS, pt)
            U = ml%coeff(I_U, pt)
            c_1 = ml%coeff(I_C_1, pt)
            Gamma_1 = ml%coeff(I_GAMMA_1, pt)

         end associate

         Omega_rot = cx%Omega_rot(pt)
         Omega_rot_i = cx%Omega_rot(cx%point_i())

         ! Loop over omega, updating split

         split = .FALSE.

         omega_loop : do i = 1, SIZE(omega)

            st = state_rt(omega(i))

            omega_c = cx%omega_c(Omega_rot, st)

            lambda = cx%lambda(Omega_rot, st)
            l_i = cx%l_e(Omega_rot_i, st)

            ! Calculate the propagation discriminant psi2

            c_4 = -4._RD*V/Gamma_1*c_1*os_p%alpha_gam
            c_2 = (As - V/Gamma_1 - U + 4._RD)**2 + 4._RD*V/Gamma_1*As*os_p%alpha_gam*os_p%alpha_pi + 4._RD*lambda
            c_0 = -4._RD*lambda*As/c_1*os_p%alpha_pi

            if (c_0 /= 0._RD) then
               psi2 = (c_4*omega_c**4 + c_2*omega_c**2 + c_0)/omega_c**2
            else
               psi2 = c_4*omega_c**2 + c_2
            endif

            ! Evaluate real and imaginary parts of the mechanical
            ! eigenvalue

            if (psi2 < 0._RD) then

               ! Propagation zone

               chi_r = 0.5_RD*(As + V/Gamma_1 - U + 2._RD - 2._RD*l_i)

               chi_i = 0.5_RD*sqrt(-psi2)

            else

               ! Evanescent zone; pick the steeper solution

               chi_r_p = 0.5_RD*(As + V/Gamma_1 - U + 2._RD - 2._RD*l_i + sqrt(psi2))
               chi_r_m = 0.5_RD*(As + V/Gamma_1 - U + 2._RD - 2._RD*l_i - sqrt(psi2))

               chi_r = MERGE(chi_r_p, chi_r_m, abs(chi_r_p) > abs(chi_r_m))

               chi_i = 0._RD

            endif

            ! Update split

            split = split .OR. &
               dlnx*gr_p%w_exp*abs(chi_r) > TWOPI .OR. &
               dlnx*gr_p%w_osc*abs(chi_i) > TWOPI

            if (split) exit omega_loop

         end do omega_loop

      end if

      ! Finish

      return

   end function split_mech_

   !****

   function split_therm_(cx, pt_a, pt_b, omega, gr_p) result(split)

      type(context_t), intent(in)  :: cx
      type(point_t), intent(in)    :: pt_a
      type(point_t), intent(in)    :: pt_b
      real(RD), intent(in)         :: omega(:)
      type(grid_par_t), intent(in) :: gr_p
      logical                      :: split

      type(point_t)  :: pt
      real(RD)       :: V
      real(RD)       :: nabla
      real(RD)       :: c_rad
      real(RD)       :: c_thk
      real(RD)       :: Omega_rot
      real(RD)       :: tau
      integer        :: i
      type(state_rt) :: st
      real(RD)       :: omega_c
      real(RD)       :: dlnx

      ! Determine whether the subinterval [pt_a,pt_b] warrants
      ! splitting, via a local analysis of the thermal parts of the
      ! oscillation equations

      if (gr_p%w_thm == 0._RD) then

         ! No splitting necessary

         split = .FALSE.

      else

         ! Evaluate coefficients at the midpoint

         pt%s = pt_a%s
         pt%x = 0.5_RD*(pt_a%x + pt_b%x)

         dlnx = LOG(pt_b%x) - LOG(pt_a%x)

         associate (ml => cx%model())

            V = ml%coeff(I_V_2, pt)*pt%x**2
            nabla = ml%coeff(I_NABLA, pt)

            c_rad = ml%coeff(I_C_RAD, pt)
            c_thk = ml%coeff(I_C_THK, pt)

         end associate

         Omega_rot = cx%Omega_rot(pt)

         ! Loop over omega, updating split

         split = .FALSE.

         omega_loop : do i = 1, SIZE(omega)

            st = state_rt(omega(i))

            omega_c = cx%omega_c(Omega_rot, st)

            ! Evaluate the thermal eigenvalue

            tau = sqrt(abs(V*nabla*omega_c*c_thk/c_rad))

            ! Update split

            split = split .OR. &
               dlnx*gr_p%w_thm*abs(tau) > TWOPI

            if (split) exit omega_loop

         end do omega_loop

      end if

      ! Finish

      return

   end function split_therm_

   !****

   function split_struct_(cx, pt_a, pt_b, gr_p) result(split)

      type(context_t), intent(in)  :: cx
      type(point_t), intent(in)    :: pt_a
      type(point_t), intent(in)    :: pt_b
      type(grid_par_t), intent(in) :: gr_p
      logical                      :: split

      type(point_t) :: pt
      real(RD)      :: dV_2
      real(RD)      :: dAs
      real(RD)      :: dU
      real(RD)      :: dc_1
      real(RD)      :: dGamma_1
      real(RD)      :: dlnx

      ! Determine whether the subinterval [pt_a,pt_b] warrants
      ! splitting, via a local structure gradient analysis

      if (gr_p%w_str == 0._RD) then

         ! No splitting necessary

         split = .FALSE.

      else

         ! Evaluate coefficients at the midpoint

         pt%s = pt_a%s
         pt%x = 0.5_RD*(pt_a%x + pt_b%x)

         dlnx = LOG(pt_b%x) - LOG(pt_a%x)

         associate (ml => cx%model())

            dV_2 = ml%dcoeff(I_V_2, pt)
            dAs = ml%dcoeff(I_AS, pt)
            dU = ml%dcoeff(I_U, pt)
            dc_1 = ml%dcoeff(I_C_1, pt)
            dGamma_1 = ml%dcoeff(I_GAMMA_1, pt)

         end associate

         ! Decide whether to split

         if (pt_a%x /= 0._RD) then

            split = dlnx*gr_p%w_str*abs(dV_2) > 1._RD .OR. &
               dlnx*gr_p%w_str*abs(dAs) > 1._RD .OR. &
               dlnx*gr_p%w_str*abs(dU) > 1._RD .OR. &
               dlnx*gr_p%w_str*abs(dc_1) > 1._RD .OR. &
               dlnx*gr_p%w_str*abs(dGamma_1) > 1._RD

         endif

      end if

      ! Finish

      return

   end function split_struct_

   !****

   function split_center_(cx, pt_a, pt_b, omega, gr_p) result(split)

      type(context_t), intent(in)  :: cx
      type(point_t), intent(in)    :: pt_a
      type(point_t), intent(in)    :: pt_b
      real(RD), intent(in)         :: omega(:)
      type(grid_par_t), intent(in) :: gr_p
      logical                      :: split

      type(point_t)  :: pt
      real(RD)       :: V
      real(RD)       :: As
      real(RD)       :: U
      real(RD)       :: c_1
      real(RD)       :: Gamma_1
      real(RD)       :: Omega_rot
      real(RD)       :: Omega_rot_i
      integer        :: i
      type(state_rt) :: st
      real(RD)       :: omega_c
      real(RD)       :: lambda
      real(RD)       :: l_i
      real(RD)       :: c_0
      real(RD)       :: c_2
      real(RD)       :: c_4
      real(RD)       :: psi2
      real(RD)       :: chi_r
      real(RD)       :: chi_i

      ! Determine whether the (center) subinterval [pt_a,pt_b] warrants
      ! splitting, via a local analysis of the mechanical parts of the
      ! oscillation equations

      if (.NOT. gr_p%resolve_ctr .OR. gr_p%w_ctr == 0._RD) then

         ! No splitting necessary

         split = .FALSE.

      else

         ! Evaluate coefficients at the cell midpoint

         pt%s = pt_a%s
         pt%x = 0.5_RD*(pt_a%x + pt_b%x)

         associate (ml => cx%model())

            V = ml%coeff(I_V_2, pt)*pt%x**2
            As = ml%coeff(I_AS, pt)
            U = ml%coeff(I_U, pt)
            c_1 = ml%coeff(I_C_1, pt)
            Gamma_1 = ml%coeff(I_GAMMA_1, pt)

         end associate

         Omega_rot = cx%Omega_rot(pt)
         Omega_rot_i = cx%Omega_rot(cx%point_i())

         ! Loop over omega, updating split

         split = .FALSE.

         omega_loop : do i = 1, SIZE(omega)

            st = state_rt(omega(i))

            omega_c = cx%omega_c(Omega_rot, st)

            lambda = cx%lambda(Omega_rot, st)
            l_i = cx%l_e(Omega_rot_i, st)

            ! Calculate the propagation discriminant psi2

            c_4 = -4._RD*V/Gamma_1*c_1
            c_2 = (As - V/Gamma_1 - U + 4._RD)**2 + 4._RD*V/Gamma_1*As + 4._RD*lambda
            c_0 = -4._RD*lambda*As/c_1

            if (c_0 /= 0._RD) then
               psi2 = (c_4*omega_c**4 + c_2*omega_c**2 + c_0)/omega_c**2
            else
               psi2 = c_4*omega_c**2 + c_2
            endif

            ! Evaluate real and imaginary parts of the mechanical
            ! eigenvalue

            if (psi2 < 0._RD) then

               ! Propagation zone

               chi_r = 0.5_RD*(As + V/Gamma_1 - U + 2._RD - 2._RD*l_i)

               chi_i = 0.5_RD*sqrt(-psi2)

            else

               ! Evanescent zone; pick the non-diverging solution

               chi_r = 0.5_RD*(As + V/Gamma_1 - U + 2._RD - 2._RD*l_i + sqrt(psi2))

               chi_i = 0._RD

            endif

            ! Update split

            split = split .OR. &
               chi_i /= 0._RD .OR. &
               gr_p%w_ctr*abs(chi_r) > 1._RD

            if (split) exit omega_loop

         end do omega_loop

      end if

      ! Finish

      return

   end function split_center_

end module grid_refine_m
